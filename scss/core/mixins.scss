// Adds clearfix styles
@mixin add-clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Makes touch devices use momentum-based scrolling for the given element.
@mixin add-scrollable() {
  -webkit-overflow-scrolling: touch;
}

// Adds anchor styles
@mixin add-anchor($settings: ()) {
  $o: map-extend($anchor, $settings);

  a {
    color: map-get($o, 'color');
    text-decoration: map-get($o, 'text-decoration');
    background: map-get($o, 'background');
    border-bottom: map-get($o, 'border');

    &:hover {
      color: map-fetch($o, 'hover', 'color');
      text-decoration: map-fetch($o, 'hover', 'text-decoration');
      background: map-fetch($o, 'hover', 'background');
      border-bottom: map-fetch($o, 'hover', 'border');
    }
  }
}

// A media query mixin that deifnes a query using min-width. You can pass in a
// key to the `$breakpoints()` map to access that value, or pass a value to
// create your media query.
// @param {String|Unit} $point
// @param {Style Block} @content - Passed in brackets
@mixin media-min($point) {
  @if map-has-key($breakpoints, $point) {
    @media (min-width: map-get($breakpoints, $point)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (min-width: $point) {
        @content;
      }
    }
  }
}

// A media query mixin that deifnes a query using max-width. You can pass in a
// key to the `$breakpoints()` maps to access that value, or pass a value to
// create your media query. This mixin will shave a pixel off your breakpoint
// map values so that it never overlaps with a min-width usage.
// @param {String|Unit} $point
// @param {Style Block} @content - Passed in brackets
@mixin media-max($point) {
  @if map-has-key($breakpoints, $point) {
    @media (max-width: (map-get($breakpoints, $point) - 1)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (max-width: $point) {
        @content;
      }
    }
  }
}

// Media query mixin can be used for setting styles specifically to retina
// screens. Used when setting higher resolution background images.
// @param {Style Block} @content - Passed in brackets
@mixin media-retina() {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}
