{"version":3,"names":[],"mappings":"","sources":["src/js/app.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _dismissible = _interopRequireDefault(require(\"./dismissible\"));\n\nvar _modal = _interopRequireDefault(require(\"./modal\"));\n\nvar _toggle = _interopRequireDefault(require(\"./toggle\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar dismissible = new _dismissible[\"default\"]();\nvar modal = new _modal[\"default\"]();\nvar toggle = new _toggle[\"default\"]();\n\n},{\"./dismissible\":2,\"./modal\":3,\"./toggle\":4}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default() {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    trigger: '[data-dismiss]',\n    target: '[data-dismissible]',\n    classToggle: 'dismiss'\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var target = trigger.closest(settings.target);\n\n      if (target) {\n        _utility[\"default\"].toggleClass(target, settings.classToggle);\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init = function (options) {\n    api.destroy();\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  api.init();\n  return api;\n}\n\n},{\"./utility.js\":5}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default() {\n  'use strict';\n  /**\n   * Variables\n   */\n\n  var api = {};\n  var settings;\n  var defaults = {\n    classTrigger: 'modal__trigger',\n    classModal: 'modal',\n    classDialog: 'modal__dialog',\n    classActive: 'is-active',\n    focus: '[data-focus]'\n  };\n  var memoryTrigger;\n  var memoryTarget;\n  /**\n   * Private functions\n   */\n\n  var open = function open(target) {\n    _utility[\"default\"].addClass(target, settings.classActive);\n\n    var focus = target.querySelector(settings.focus);\n    target.addEventListener('transitionend', function _listener() {\n      if (focus) {\n        focus.focus();\n      } else {\n        target.focus();\n      }\n\n      this.removeEventListener('transitionend', _listener, true);\n    }, true);\n  };\n\n  var close = function close() {\n    var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var modals = document.querySelectorAll('.' + settings.classModal);\n\n    for (var i = 0; i < modals.length; ++i) {\n      _utility[\"default\"].removeClass(modals[i], settings.classActive);\n    }\n\n    if (clear == false && memoryTrigger && memoryTarget) {\n      memoryTarget.addEventListener('transitionend', function _listener() {\n        if (memoryTrigger) {\n          memoryTrigger.focus();\n        }\n\n        memoryTarget = null;\n        memoryTrigger = null;\n        this.removeEventListener('transitionend', _listener, true);\n      }, true);\n    } else if (clear == true) {\n      memoryTarget = null;\n      memoryTrigger = null;\n    }\n  };\n\n  var escape = function escape() {\n    if (event.keyCode == 27) {\n      close();\n    }\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest('.' + settings.classTrigger);\n    var modal = event.target.closest('.' + settings.classModal);\n    var dialog = event.target.closest('.' + settings.classDialog);\n\n    if (trigger) {\n      close();\n      var dataModal = trigger.dataset.modal;\n\n      if (dataModal) {\n        memoryTarget = document.getElementById(dataModal);\n        memoryTrigger = trigger;\n        open(memoryTarget);\n      }\n\n      event.preventDefault();\n    } else if (modal && !dialog) {\n      close();\n    }\n  };\n  /**\n   * Public functions\n   */\n\n\n  api.open = function (target) {\n    open(document.getElementById(target));\n  };\n\n  api.close = function (clear) {\n    close(clear);\n  };\n\n  api.init = function (options) {\n    api.destroy();\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n    document.addEventListener('touchend', run, false);\n    document.addEventListener('keyup', escape, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    memoryTarget = null;\n    memoryTrigger = null;\n    document.removeEventListener('click', run, false);\n    document.removeEventListener('touchend', run, false);\n    document.removeEventListener('keyup', escape, false);\n  };\n  /**\n   * Init the plugin\n   */\n\n\n  api.init();\n  /**\n   * Return the API\n   */\n\n  return api;\n}\n\n},{\"./utility.js\":5}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Toggle\n * ---\n * A general class toggle script.\n */\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var defaults = {\n    trigger: '[data-toggle-class]',\n    targets: '',\n    \"class\": ''\n  };\n  var settings;\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var targets;\n\n      if (settings.targets) {\n        targets = document.querySelectorAll(settings.targets);\n      } else {\n        targets = document.querySelectorAll(trigger.dataset.toggleTarget);\n      }\n\n      if (targets.length) {\n        targets.forEach(function (target) {\n          _utility[\"default\"].toggleClass(target, trigger.dataset.toggleClass.split(' '));\n        });\n      } else {\n        if (settings[\"class\"]) {\n          _utility[\"default\"].toggleClass(trigger, settings[\"class\"]);\n        } else {\n          _utility[\"default\"].toggleClass(trigger, trigger.dataset.toggleClass.split(' '));\n        }\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init = function (options) {\n    api.destroy();\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":5}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    _classCallCheck(this, _default);\n  }\n\n  _createClass(_default, null, [{\n    key: \"hasClass\",\n\n    /**\n     * Checks if an element has a class or not\n     * ---\n     * @param {Element} Element to check class(es) on\n     * @param {String} || {Array} Class(es) to check\n     * @returns {Boolean} Returns true if class exists on element, otherwise false\n     */\n    value: function hasClass(el, c) {\n      c = this.toArray(c);\n      return c.every(function (c) {\n        return el.classList.contains(c);\n      });\n    }\n    /**\n     * Adds a class or classes to an element\n     * ---\n     * @param {Element} Element to add class(es) on\n     * @param {String} || {Array} Class(es) to add\n     */\n\n  }, {\n    key: \"addClass\",\n    value: function addClass(el, c) {\n      c = this.toArray(c);\n      c.forEach(function (c) {\n        el.classList.add(c);\n      });\n    }\n    /**\n     * Remove a class or classes from an element\n     * ---\n     * @param {Element} Element to remove class(es) from\n     * @param {String} || {Array} Class(es) to remove\n     */\n\n  }, {\n    key: \"removeClass\",\n    value: function removeClass(el, c) {\n      c = this.toArray(c);\n      c.forEach(function (c) {\n        el.classList.remove(c);\n      });\n    }\n    /**\n     * Toggle a class or classes on an element\n     * ---\n     * @param {Element} Element to toggle class(es) on\n     * @param {String} || {Array} Class(es) to toggle\n     */\n\n  }, {\n    key: \"toggleClass\",\n    value: function toggleClass(el, c) {\n      c = this.toArray(c);\n      c.forEach(function (c) {\n        el.classList.toggle(c);\n      });\n    }\n    /**\n     * Find the closest parent element based on class. This is different from the\n     * native .closest() method in that it doesn't check the current element.\n     * ---\n     * @param {Element} Element to start search on\n     * @param {String} || {Array} Class(es) to check for\n     * @return {Element} Closest parent element\n     */\n\n  }, {\n    key: \"closest\",\n    value: function closest(el, c) {\n      while ((el = el.parentElement) && !this.hasClass(el, c)) {\n        return el;\n      }\n    }\n    /**\n     * Converts a string to an array. If an array is passed, it's returned as is.\n     * Anything else is returned as false.\n     * ---\n     * @param {String} || {Array} String to convert to an array\n     * @return {Array} Return the converted array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(string) {\n      var array = [];\n\n      if (typeof string === 'string') {\n        array.push(string);\n      } else if (Array.isArray(string)) {\n        array = string;\n      } else {\n        return false;\n      }\n\n      return array;\n    }\n    /**\n     * Merge two or more objects. Returns a new object. Set the first argument\n     * to `true` for a deep or recursive merge.\n     * ---\n     * @param {Boolean} [Optional] If true, do a deep (or recursive) merge\n     * @param {Object} The objects to merge together; each overriding the next\n     * @returns {Object} Merged values of defaults and options\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (_extend) {\n      function extend() {\n        return _extend.apply(this, arguments);\n      }\n\n      extend.toString = function () {\n        return _extend.toString();\n      };\n\n      return extend;\n    }(function () {\n      var extended = {};\n      var deep = false;\n      var i = 0;\n      var length = arguments.length;\n\n      if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n        deep = arguments[0];\n        i++;\n      }\n\n      var merge = function merge(obj) {\n        for (var prop in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n              extended[prop] = extend(true, extended[prop], obj[prop]);\n            } else {\n              extended[prop] = obj[prop];\n            }\n          }\n        }\n      };\n\n      for (; i < length; i++) {\n        var obj = arguments[i];\n        merge(obj);\n      }\n\n      return extended;\n    })\n  }]);\n\n  return _default;\n}();\n\nexports[\"default\"] = _default;\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"file":"scripts.js"}