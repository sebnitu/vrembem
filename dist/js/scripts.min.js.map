{"version":3,"sources":["src/js/app.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_dismissible","_interopRequireDefault","_drawer","_modal","_toggle","obj","__esModule","default","./dismissible","./drawer","./modal","./toggle","2","breakpoints","xs","sm","md","lg","xl","3","Object","defineProperty","value","options","settings","api","defaults","trigger","target","classToggle","init","_utility","extend","document","addEventListener","run","destroy","removeEventListener","event","closest","toggleClass","preventDefault","./utility.js","4","drawers","classTarget","classTrigger","classInner","classTargetSwitch","classTriggerSwitch","classInnerSwitch","classActive","classTransitionNone","switch","switchBreakpoint","saveState","transitionDuration","drawerState","querySelectorAll","initSaveState","initSwitch","localStorage","removeItem","open","selector","toggle","close","switchDrawer","items","forEach","toArray","item","switchModal","stateSave","stateReset","drawer","state","callback","addClass","removeClass","dataDrawer","dataset","getItem","JSON","parse","id","transitionDelay","dialog","setTimeout","querySelector","hasClass","setItem","stringify","cleanSelector","replace","g","toUpperCase","bp","getBreakpoint","mq","window","matchMedia","addListener","switchCheck","matches","triggers","className","RegExp","5","memoryTrigger","memoryTarget","focus","escape","clear","_listener","this","arguments","undefined","keyCode","inner","targetData","6","targets","class","toggleTarget","split","7","_config","_defineProperties","props","descriptor","enumerable","configurable","writable","key","_default","instance","Constructor","TypeError","_classCallCheck","_extend","apply","protoProps","staticProps","prototype","_createClass","el","some","has","classList","contains","add","remove","parentElement","array","Array","isArray","push","extended","deep","toString","merge","prop","hasOwnProperty","config"],"mappings":"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","file":"scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _dismissible = _interopRequireDefault(require(\"./dismissible\"));\n\nvar _drawer = _interopRequireDefault(require(\"./drawer\"));\n\nvar _modal = _interopRequireDefault(require(\"./modal\"));\n\nvar _toggle = _interopRequireDefault(require(\"./toggle\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar dismissible = new _dismissible[\"default\"]();\nvar drawer = new _drawer[\"default\"]();\nvar modal = new _modal[\"default\"]();\nvar toggle = new _toggle[\"default\"]();\n\n},{\"./dismissible\":3,\"./drawer\":4,\"./modal\":5,\"./toggle\":6}],2:[function(require,module,exports){\nmodule.exports={\n  \"breakpoints\" : {\n    \"xs\": \"480px\",\n    \"sm\": \"620px\",\n    \"md\": \"760px\",\n    \"lg\": \"990px\",\n    \"xl\": \"1380px\"\n  }\n}\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    trigger: '[data-dismiss]',\n    target: '[data-dismissible]',\n    classToggle: 'dismiss'\n  };\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var target = trigger.closest(settings.target);\n\n      if (target) {\n        _utility[\"default\"].toggleClass(target, settings.classToggle);\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":7}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Drawer plugin\n * ---\n * A container component that slides in from the left or right. It typically\n * contains menus, search or other content for your app.\n *\n * Todos:\n * [ ] Animations in JavaScript components need to be handled differently. There should the Classes specific for animation and removed when the component is existing in its current state.\n * [ ] Debug why I'm getting \"TypeError: s is null\" on lines 396 and 433\n * [ ] Write a promise and run switch method after default save states are set\n */\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    // Element classes\n    classTarget: 'drawer__item',\n    classTrigger: 'drawer__trigger',\n    classInner: 'drawer__dialog',\n    // Used with RegExp to search and replace element classes\n    classTargetSwitch: 'modal',\n    classTriggerSwitch: 'modal__trigger',\n    classInnerSwitch: 'modal__dialog',\n    // The class that is used to make an item active\n    classActive: 'is-active',\n    classTransitionNone: 'transition_none',\n    // Whether or not to enable the switch functionality\n    // If enabled, a string selector to check for should be passed.\n    // {false} || {string} e.g. '[data-drawer-switch]'\n    \"switch\": '[data-drawer-switch]',\n    // The default break point for when to switch to drawer or modal classes\n    // {string} Either a breakpoint key or pixel value\n    switchBreakpoint: 'lg',\n    // Whether or not to store the save state in local storage\n    // {boolean} The string to save our state object as\n    saveState: true,\n    // Duration before removing the transition_none class on initial load\n    transitionDuration: 500 // Drawer specific variables\n    // Where we store all our drawers available in the DOM\n\n  };\n  var drawers; // Where we store all our switch drawers available in the DOM\n\n  var switchDrawers; // Where we build the save state object before we pass it to local storage\n\n  var drawerState = {};\n  /**\n   * The constructor method, run as soon as an instance is created\n   * ---\n   * @param {Object} options - A json object with your custom settings\n   */\n\n  api.init = function (options) {\n    // Merge the defaults and passed options into our settings obj\n    settings = _utility[\"default\"].extend(defaults, options || {}); // Get all the drawers on the page\n\n    drawers = document.querySelectorAll('.' + settings.classTarget); // Init save state functionality if it's enabled\n\n    if (settings.saveState) {\n      initSaveState();\n    } // Init switch functionality if it's enabled\n\n\n    if (settings[\"switch\"]) {\n      initSwitch();\n    } // Add our drawer trigger event listener\n\n\n    document.addEventListener('click', trigger, false);\n  };\n  /**\n   * The deconstructor method, used to reset and destory the drawer instance\n   */\n\n\n  api.destroy = function () {\n    // Clear our variables\n    settings = null;\n    drawers = null;\n    switchDrawers = null;\n    drawerState = {}; // Delete the local storage data\n\n    localStorage.removeItem('drawerState'); // Remove the drawer trigger event listener\n\n    document.removeEventListener('click', trigger, false);\n  };\n  /**\n   * Public method to open a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.open = function (selector) {\n    selector = selector ? selector : '.' + settings.classTarget;\n    toggle(document.querySelectorAll(selector), 'open');\n  };\n  /**\n   * Public method to close a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.close = function (selector) {\n    selector = selector ? selector : '.' + settings.classTarget;\n    toggle(document.querySelectorAll(selector), 'close');\n  };\n  /**\n   * Public method to toggle a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.toggle = function (selector) {\n    selector = selector ? selector : '.' + settings.classTarget;\n    toggle(document.querySelectorAll(selector));\n  };\n  /**\n   * Public method to switch a drawer into modal\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.switchDrawer = function (selector) {\n    // Use default selector if one isn't passed\n    selector = selector ? selector : settings[\"switch\"]; // Query our elements using the provided selector\n\n    var items = document.querySelectorAll(selector); // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items);\n    items.forEach(function (item) {\n      switchDrawer(item);\n    });\n  };\n  /**\n   * Public method to switch a drawer into modal\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.switchModal = function (selector) {\n    // Use default selector if one isn't passed\n    selector = selector ? selector : settings[\"switch\"]; // Query our elements using the provided selector\n\n    var items = document.querySelectorAll(selector); // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items);\n    items.forEach(function (item) {\n      switchModal(item);\n    });\n  };\n  /**\n   * Save the drawer current drawer state\n   */\n\n\n  api.stateSave = function () {\n    stateSave();\n  };\n  /**\n   * Return to drawer default state\n   */\n\n\n  api.stateReset = function () {\n    stateReset();\n  };\n  /**\n   * Private function to close a drawer or group of drawers\n   * ---\n   * @param {Node} drawer - The drawer element(s) to close\n   * @param {String} state - Whether to open, close or toggle the drawer(s)\n   * @param {Function} callback - The callback function\n   */\n\n\n  var toggle = function toggle(drawer, state, callback) {\n    // Check if drawer(s) should be opened, closed or toggled and either add or\n    // remove the active class to the passed drawer(s)\n    if (state === 'open') {\n      _utility[\"default\"].addClass(drawer, settings.classActive);\n    } else if (state === 'close') {\n      _utility[\"default\"].removeClass(drawer, settings.classActive);\n    } else {\n      _utility[\"default\"].toggleClass(drawer, settings.classActive);\n    } // Check if save state is enabled\n\n\n    if (settings.saveState) {\n      stateSave(drawer);\n    } // Fire the callback function if one was passed\n\n\n    typeof callback === 'function' && callback();\n  };\n  /**\n   * Private function to toggle drawer via a trigger\n   */\n\n\n  var trigger = function trigger() {\n    // Get the closest trigger element from the click event\n    var trigger = event.target.closest('.' + settings.classTrigger); // Check that the class trigger was clicked\n\n    if (trigger) {\n      // Get the drawer selector from the trigger via [data-target]\n      var dataDrawer = trigger.dataset.target; // Check that a drawer target was given\n\n      if (dataDrawer) {\n        // Query the drawer element and toggle it if it exists\n        var drawer = document.querySelectorAll(dataDrawer);\n\n        if (drawer.length) {\n          toggle(drawer);\n        }\n      }\n    }\n  };\n  /**\n   * Private function that initializes the save state functionality\n   */\n\n\n  var initSaveState = function initSaveState() {\n    // Check if a drawer state is already saved in local storage and save the\n    // json parsed data to our local variable if it does\n    if (localStorage.getItem('drawerState')) {\n      drawerState = JSON.parse(localStorage.getItem('drawerState'));\n    } // Loop through all drawers\n\n\n    drawers.forEach(function (drawer) {\n      // Set the default state if one is not set\n      if (drawer.id in drawerState === false) {\n        stateSave(drawer);\n      } // Get our drawer dialog element\n\n\n      var dialog = drawer.querySelector('.' + settings.classInner); // Transition delay: disables transitions as default states are being set\n\n      var transitionDelay = function transitionDelay() {\n        if (dialog) {\n          _utility[\"default\"].addClass(dialog, settings.classTransitionNone);\n\n          setTimeout(function () {\n            _utility[\"default\"].removeClass(dialog, settings.classTransitionNone);\n          }, settings.transitionDuration);\n        }\n      }; // Toggle our drawer state based on the saved state\n\n\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, 'close', transitionDelay);\n      } else if (drawerState[drawer.id]) {\n        toggle(drawer, 'open', transitionDelay);\n      }\n    });\n  };\n  /**\n   * Private function that saves the state of a specific or all drawers\n   * ---\n   * @param {Node} items - The drawer element(s) to save state\n   */\n\n\n  var stateSave = function stateSave(items) {\n    // Save all drawers if an items arg wasn't passed\n    items = items ? items : drawers; // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items); // Loop through our drawers and save their new state to local storage\n\n    items.forEach(function (item) {\n      // Only save drawer state if an id exists\n      if (item.id) {\n        drawerState[item.id] = _utility[\"default\"].hasClass(item, settings.classActive);\n        localStorage.setItem('drawerState', JSON.stringify(drawerState));\n      }\n    });\n  };\n  /**\n   * Private function that clears the drawer state\n   */\n\n\n  var stateReset = function stateReset() {\n    // Reset our local drawer state variable and delete the local storage data\n    drawerState = {};\n    localStorage.removeItem('drawerState');\n  };\n  /**\n   * Private function that initializes the switch functionality\n   */\n\n\n  var initSwitch = function initSwitch() {\n    // Query all the drawers with the switch feature enabled\n    switchDrawers = document.querySelectorAll(settings[\"switch\"]); // Loop through the switch drawers\n\n    switchDrawers.forEach(function (drawer) {\n      // Get the local breakpoint if one is set\n      // Remove brackets and the intial data flag\n      var cleanSelector = settings[\"switch\"].replace('[', '').replace(']', '').replace('data-', ''); // Convert sring to camelCase\n\n      cleanSelector = cleanSelector.replace(/-([a-z])/g, function (g) {\n        return g[1].toUpperCase();\n      }); // Check which breakpoint to use:\n      // a) The local bp set on the drawer\n      // b) The bp available in config using a key\n      // c) The raw pixel value provided in settings\n\n      var bp = drawer.dataset[cleanSelector];\n\n      if (bp) {\n        bp = _utility[\"default\"].getBreakpoint(bp);\n\n        if (!bp) {\n          bp = drawer.dataset[cleanSelector];\n        }\n      } else {\n        bp = _utility[\"default\"].getBreakpoint(settings.switchBreakpoint);\n\n        if (!bp) {\n          bp = settings.switchBreakpoint;\n        }\n      } // Media query listener\n\n\n      var mq = window.matchMedia(\"(min-width:\" + bp + \")\");\n      mq.addListener(function (mq) {\n        switchCheck(mq, drawer);\n      });\n      switchCheck(mq, drawer);\n    });\n  };\n  /**\n   * Private function that checks when a media query hits a match and switches\n   * the component from drawer to modal as needed\n   * ---\n   * @param {MediaQueryList} mq - The MediaQueryList object for the media query\n   * @param {Node} drawer - The drawer element to switch\n   */\n\n\n  var switchCheck = function switchCheck(mq, drawer) {\n    if (mq.matches) {\n      switchDrawer(drawer);\n    } else {\n      switchModal(drawer);\n    }\n  };\n  /**\n   * Private function that switches a modal into a drawer component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n\n\n  var switchDrawer = function switchDrawer(drawer) {\n    // Get the dialog and trigger elements related to this component\n    var dialog = drawer.querySelector('.dialog');\n    var triggers = document.querySelectorAll('[data-target=\"#' + drawer.id + '\"]'); // Switch the modal component to drawer\n\n    drawer.className = drawer.className.replace(new RegExp(settings.classTargetSwitch, 'gi'), settings.classTarget);\n    dialog.className = dialog.className.replace(new RegExp(settings.classInnerSwitch, 'gi'), settings.classInner);\n    triggers.forEach(function (trigger) {\n      trigger.className = trigger.className.replace(new RegExp(settings.classTriggerSwitch, 'gi'), settings.classTrigger);\n    }); // Open or close drawer based on save state\n\n    if (settings.saveState) {\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, 'close');\n      } else {\n        toggle(drawer, 'open');\n      }\n    }\n  };\n  /**\n   * Private function that switches a drawer into a modal component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n\n\n  var switchModal = function switchModal(drawer) {\n    // Get the dialog and trigger elements related to this component\n    var dialog = drawer.querySelector('.dialog');\n    var triggers = document.querySelectorAll('[data-target=\"#' + drawer.id + '\"]'); // Switch the drawer component to modal\n\n    drawer.className = drawer.className.replace(new RegExp(settings.classTarget, 'gi'), settings.classTargetSwitch);\n    dialog.className = dialog.className.replace(new RegExp(settings.classInner, 'gi'), settings.classInnerSwitch);\n    triggers.forEach(function (trigger) {\n      trigger.className = trigger.className.replace(new RegExp(settings.classTrigger, 'gi'), settings.classTriggerSwitch);\n    }); // Remove active class for modal styles by default\n\n    _utility[\"default\"].removeClass(drawer, settings.classActive);\n  };\n  /**\n   *\n   */\n  // Run the constructor method\n\n\n  api.init(options); // Return the API for running public methods\n\n  return api;\n}\n\n},{\"./utility.js\":7}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Modal plugin\n * ---\n * A component for changing the mode of a page to complete a critical task.\n * This is usually used in conjunction with the Dialog component to make\n * modal dialogs.\n */\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    classTarget: 'modal',\n    classTrigger: 'modal__trigger',\n    classInner: 'modal__dialog',\n    classActive: 'is-active',\n    focus: '[data-focus]'\n  };\n  var memoryTrigger;\n  var memoryTarget;\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n    document.addEventListener('touchend', run, false);\n    document.addEventListener('keyup', escape, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    memoryTarget = null;\n    memoryTrigger = null;\n    document.removeEventListener('click', run, false);\n    document.removeEventListener('touchend', run, false);\n    document.removeEventListener('keyup', escape, false);\n  };\n\n  api.open = function (selector) {\n    open(document.querySelectorAll(selector));\n  };\n\n  api.close = function (clear) {\n    close(clear);\n  };\n\n  var open = function open(target) {\n    _utility[\"default\"].addClass(target, settings.classActive);\n\n    if (target.length === 1) {\n      target = target.item(0);\n      var focus = target.querySelector(settings.focus);\n      target.addEventListener('transitionend', function _listener() {\n        if (focus) {\n          focus.focus();\n        } else {\n          target.focus();\n        }\n\n        this.removeEventListener('transitionend', _listener, true);\n      }, true);\n    }\n  };\n\n  var close = function close() {\n    var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var target = document.querySelectorAll('.' + settings.classTarget);\n\n    _utility[\"default\"].removeClass(target, settings.classActive);\n\n    if (clear == false && memoryTrigger && memoryTarget) {\n      if (memoryTarget.length === 1) {\n        memoryTarget = memoryTarget.item(0);\n        memoryTarget.addEventListener('transitionend', function _listener() {\n          if (memoryTrigger) {\n            memoryTrigger.focus();\n          }\n\n          memoryTarget = null;\n          memoryTrigger = null;\n          this.removeEventListener('transitionend', _listener, true);\n        }, true);\n      }\n    } else if (clear == true) {\n      memoryTarget = null;\n      memoryTrigger = null;\n    }\n  };\n\n  var escape = function escape() {\n    if (event.keyCode == 27) {\n      close();\n    }\n  };\n\n  var run = function run() {\n    var target = event.target.closest('.' + settings.classTarget);\n    var trigger = event.target.closest('.' + settings.classTrigger);\n    var inner = event.target.closest('.' + settings.classInner);\n\n    if (trigger) {\n      close();\n      var targetData = trigger.dataset.target;\n\n      if (targetData) {\n        memoryTarget = document.querySelectorAll(targetData);\n        memoryTrigger = trigger;\n        open(memoryTarget);\n      }\n\n      event.preventDefault();\n    } else if (target && !inner) {\n      close();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":7}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    trigger: '[data-toggle-class]',\n    targets: '',\n    \"class\": ''\n  };\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var targets;\n\n      if (settings.targets) {\n        targets = document.querySelectorAll(settings.targets);\n      } else {\n        targets = document.querySelectorAll(trigger.dataset.toggleTarget);\n      }\n\n      if (targets.length) {\n        targets.forEach(function (target) {\n          _utility[\"default\"].toggleClass(target, trigger.dataset.toggleClass.split(' '));\n        });\n      } else {\n        if (settings[\"class\"]) {\n          _utility[\"default\"].toggleClass(trigger, settings[\"class\"]);\n        } else {\n          _utility[\"default\"].toggleClass(trigger, trigger.dataset.toggleClass.split(' '));\n        }\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":7}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"config\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    _classCallCheck(this, _default);\n  }\n\n  _createClass(_default, null, [{\n    key: \"getBreakpoint\",\n\n    /**\n     * Get and output a breakpoint using it's key found in config.json\n     * ---\n     * @param {String} key - The key to search for in the breakpoints object\n     * @returns {String} - The pixel value of the breakpoint as a string\n     */\n    value: function getBreakpoint(key) {\n      return _config[\"default\"].breakpoints[key];\n    }\n    /**\n     * Checks if an element has a class or not\n     * ---\n     * @param {Node} el - Element(s) to check class(es) on\n     * @param {String || Array} c - Class(es) to check\n     * @returns {Boolean} - Returns true if class exists, otherwise false\n     */\n\n  }, {\n    key: \"hasClass\",\n    value: function hasClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      return c.some(function (c) {\n        var has = false;\n        el.forEach(function (el) {\n          if (el.classList.contains(c)) {\n            has = true;\n          }\n        });\n        return has;\n      });\n    }\n    /**\n     * Adds a class or classes to an element\n     * ---\n     * @param {Node} el - Element(s) to add class(es) on\n     * @param {String || Array} c - Class(es) to add\n     */\n\n  }, {\n    key: \"addClass\",\n    value: function addClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.add(c);\n        });\n      });\n    }\n    /**\n     * Remove a class or classes from an element\n     * ---\n     * @param {Node} el - Element(s) to remove class(es) from\n     * @param {String || Array} c - Class(es) to remove\n     */\n\n  }, {\n    key: \"removeClass\",\n    value: function removeClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.remove(c);\n        });\n      });\n    }\n    /**\n     * Toggle a class or classes on an element\n     * ---\n     * @param {Node} el - Element(s) to toggle class(es) on\n     * @param {String || Array} c - Class(es) to toggle\n     */\n\n  }, {\n    key: \"toggleClass\",\n    value: function toggleClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.toggle(c);\n        });\n      });\n    }\n    /**\n     * Find the closest parent element based on class. This is different from the\n     * native .closest() method in that it doesn't check the current element.\n     * ---\n     * @param {Node} el - Element to start search on\n     * @param {String || Array} c - Class(es) to check for\n     * @return {Node} - Closest parent element\n     */\n\n  }, {\n    key: \"closest\",\n    value: function closest(el, c) {\n      while ((el = el.parentElement) && !this.hasClass(el, c)) {\n        return el;\n      }\n    }\n    /**\n     * Converts a string or object to an array. If an array is passed, it's\n     * returned as is. Anything else is returned as an array.\n     * ---\n     * @param {Object} item - String or object to convert to an array\n     * @return {Array} - Return the converted array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(item) {\n      var array = [];\n\n      if (Array.isArray(item)) {\n        array = item;\n      } else {\n        array.push(item);\n      }\n\n      return array;\n    }\n    /**\n     * Merge two or more objects. Returns a new object. Set the first argument\n     * to `true` for a deep or recursive merge.\n     * ---\n     * @param {Boolean} [Optional] - If true, do a deep (or recursive) merge\n     * @param {Object} - The objects to merge together; each overriding the next\n     * @returns {Object} - Merged values of defaults and options\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (_extend) {\n      function extend() {\n        return _extend.apply(this, arguments);\n      }\n\n      extend.toString = function () {\n        return _extend.toString();\n      };\n\n      return extend;\n    }(function () {\n      var extended = {};\n      var deep = false;\n      var i = 0;\n      var length = arguments.length;\n\n      if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n        deep = arguments[0];\n        i++;\n      }\n\n      var merge = function merge(obj) {\n        for (var prop in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n              extended[prop] = extend(true, extended[prop], obj[prop]);\n            } else {\n              extended[prop] = obj[prop];\n            }\n          }\n        }\n      };\n\n      for (; i < length; i++) {\n        var obj = arguments[i];\n        merge(obj);\n      }\n\n      return extended;\n    })\n  }]);\n\n  return _default;\n}();\n\nexports[\"default\"] = _default;\n\n},{\"config\":2}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"]}