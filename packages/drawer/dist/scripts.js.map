{
  "version": 3,
  "sources": [
    "../../node_modules/browser-pack/_prelude.js",
    "../core/index.js",
    "dist/scripts.js",
    "index.js",
    "../utility/index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "export default {\n  \"breakpoints\": {\n    \"xs\": \"480\",\n    \"sm\": \"620\",\n    \"md\": \"760\",\n    \"lg\": \"990\",\n    \"xl\": \"1380\"\n  }\n}\n",
    "\"use strict\";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9",
    "import u from \"@vrembem/utility\"\n\n/**\n * Drawer plugin\n * ---\n * A container component that slides in from the left or right. It typically\n * contains menus, search or other content for your app.\n */\nexport default function(options) {\n\n  \"use strict\"\n\n  let api = {}\n  let settings\n\n  const defaults = {\n    // Component element classes\n    classTarget: \"drawer__item\",\n    classTrigger: \"drawer__trigger\",\n    classInner: \"drawer__dialog\",\n\n    // Component element switch classes\n    // Used with RegExp to search and replace element classes\n    classTargetSwitch: \"modal\",\n    classTriggerSwitch: \"modal__trigger\",\n    classInnerSwitch: \"modal__dialog\",\n\n    // State and utility classes\n    classActive: \"is-active\",\n    classTransitionNone: \"transition_none\",\n\n    // Whether or not to store the save state in local storage\n    // {boolean} The string to save our state object as\n    saveState: true,\n\n    // Whether or not to enable the switch functionality. If enabled, a string\n    // selector to check for should be passed.\n    // {false} || {string} e.g. \"[data-drawer-switch]\"\n    switch: \"[data-drawer-switch]\",\n\n    // The default break point for when to switch to drawer or modal classes\n    // {string} Either a breakpoint key or pixel value\n    switchBreakpoint: \"lg\",\n\n    // Duration before removing the transition_none class on initial load\n    transitionDuration: 500\n  }\n\n  // Where we store all our drawers available in the DOM\n  let drawers = []\n\n  // Where we build the save state object before we pass it to local storage\n  let drawerState = {}\n\n  // Where we store all our switch drawers available in the DOM\n  let switchDrawers\n\n  // Where we store all our media query lists along with their drawers\n  let mqlArray = []\n\n  /**\n   * The constructor method, run as soon as an instance is created\n   * ---\n   * @param {Object} options - A json object with your custom settings\n   */\n  api.init = (options) => {\n\n    // Merge the defaults and passed options into our settings obj\n    settings = u.extend( defaults, options || {} )\n\n    // Get all the drawers on the page and save them with their default state\n    document.querySelectorAll(\".\" + settings.classTarget)\n      .forEach((drawer) => {\n      drawers.push({\n        \"drawer\": drawer,\n        \"defaultState\": u.hasClass(drawer, settings.classActive)\n      })\n    })\n\n    // Initialize a promise and init save state if it's enabled\n    let promiseSaveState = new Promise((resolve) => {\n      if (settings.saveState) {\n        initSaveState(resolve)\n      } else {\n        resolve()\n      }\n    })\n\n    // After promise is resolved and switch is enabled, initialize switch\n    promiseSaveState.then(() => {\n      if (settings.switch) {\n        initSwitch()\n      }\n    })\n\n    // Add our drawer trigger event listener\n    document.addEventListener(\"click\", trigger, false)\n  }\n\n  /**\n   * The deconstructor method, used to reset and destroy the drawer instance\n   * ---\n   * @param {Boolean} defaultState - Return drawers to their default state?\n   */\n  api.destroy = (defaultState = true) => {\n\n    // Destroy our switch\n    destroySwitch()\n\n    // Destroy our state\n    stateClear()\n\n    // Return drawrs to their default state\n    if (defaultState) {\n      drawers.forEach((item) => {\n        if (item.defaultState) {\n          u.addClass(item.drawer, settings.classActive)\n        } else {\n          u.removeClass(item.drawer, settings.classActive)\n        }\n      })\n    }\n\n    // Clear our variables\n    settings = null\n    drawers = []\n\n    // Remove the drawer trigger event listener\n    document.removeEventListener(\"click\", trigger, false)\n  }\n\n  /**\n   * Public method to open a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n  api.open = (selector) => {\n    selector = (selector) ? selector : \".\" + settings.classTarget\n    toggle(document.querySelectorAll(selector), \"open\")\n  }\n\n  /**\n   * Public method to close a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n  api.close = (selector) => {\n    selector = (selector) ? selector : \".\" + settings.classTarget\n    toggle(document.querySelectorAll(selector), \"close\")\n  }\n\n  /**\n   * Public method to toggle a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n  api.toggle = (selector) => {\n    selector = (selector) ? selector : \".\" + settings.classTarget\n    toggle(document.querySelectorAll(selector))\n  }\n\n  /**\n   * Public method to switch a modal into drawer\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n  api.switchToDrawer = (selector) => {\n\n    // Use default selector if one isn't passed\n    selector = (selector) ? selector : settings.switch\n\n    // Query our elements using the provided selector\n    let items = document.querySelectorAll(selector)\n\n    // Convert to array if only one drawer is passed\n    items = (items.forEach) ? items : u.toArray(items)\n\n    items.forEach((item) => {\n      switchToDrawer(item)\n    })\n  }\n\n  /**\n   * Public method to switch a drawer into modal\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n  api.switchToModal = (selector) => {\n\n    // Use default selector if one isn't passed\n    selector = (selector) ? selector : settings.switch\n\n    // Query our elements using the provided selector\n    let items = document.querySelectorAll(selector)\n\n    // Convert to array if only one drawer is passed\n    items = (items.forEach) ? items : u.toArray(items)\n\n    items.forEach((item) => {\n      switchToModal(item)\n    })\n  }\n\n  /**\n   * Save the drawer current drawer state\n   */\n  api.stateSave = () => {\n    stateSave()\n  }\n\n  /**\n   * Clears drawer state from local storage\n   */\n  api.stateClear = () => {\n    stateClear()\n  }\n\n  /**\n   * Private function to close a drawer or group of drawers\n   * ---\n   * @param {Node} drawer - The drawer element(s) to close\n   * @param {String} state - Whether to open, close or toggle the drawer(s)\n   * @param {Function} callback - The callback function\n   */\n  const toggle = (drawer, state, callback) => {\n\n    // Check if drawer(s) should be opened, closed or toggled and either add or\n    // remove the active class to the passed drawer(s)\n    if (state === \"open\") {\n      u.addClass(drawer, settings.classActive)\n    } else if (state === \"close\") {\n      u.removeClass(drawer, settings.classActive)\n    } else {\n      u.toggleClass(drawer, settings.classActive)\n    }\n\n    // Save state if feature is enabled\n    if (settings.saveState) {\n      stateSave(drawer)\n    }\n\n    // Fire the callback function if one was passed\n    typeof callback === \"function\" && callback()\n  }\n\n  /**\n   * Private function to toggle drawer via a trigger\n   */\n  const trigger = () => {\n\n    // Get the closest trigger element from the click event\n    let trigger = event.target.closest(\".\" + settings.classTrigger)\n\n    // Check that the class trigger was clicked\n    if (trigger) {\n\n      // Get the drawer selector from the trigger via [data-target]\n      let dataDrawer = trigger.dataset.target\n\n      // Check that a drawer target was given\n      if (dataDrawer) {\n\n        // Query the drawer element and toggle it if it exists\n        let drawer = document.querySelectorAll(dataDrawer)\n        if (drawer.length) {\n          toggle(drawer)\n        }\n      }\n    }\n  }\n\n  /**\n   * Private function that initializes the save state functionality\n   * ---\n   * @param {Function} callback - The callback function\n   */\n  const initSaveState = (callback) => {\n\n    // Check if a drawer state is already saved in local storage and save the\n    // json parsed data to our local variable if it does\n    if (localStorage.getItem(\"drawerState\")) {\n      drawerState = JSON.parse(localStorage.getItem(\"drawerState\"))\n    }\n\n    // Loop through all drawers\n    drawers.forEach((item) => {\n\n      let drawer = item.drawer\n\n      // Set the default state if one is not set\n      if (drawer.id in drawerState === false) {\n        stateSave(drawer)\n      }\n\n      // Get our drawer dialog element\n      let dialog = drawer.querySelector(\".\" + settings.classInner)\n\n      // Disables transitions as default states are being set\n      let transitionDelay = () => {\n        if (dialog) {\n          u.addClass(dialog, settings.classTransitionNone)\n          setTimeout(() => {\n            u.removeClass(dialog, settings.classTransitionNone)\n          }, settings.transitionDuration)\n        }\n      }\n\n      // Toggle our drawer state based on the saved state\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, \"close\", transitionDelay)\n      } else if (drawerState[drawer.id]) {\n        toggle(drawer, \"open\", transitionDelay)\n      }\n    })\n\n    // Fire the callback function if one was passed and return our state object\n    typeof callback === \"function\" && callback(drawerState)\n  }\n\n  /**\n   * Private function that saves the state of a specific or all drawers\n   * ---\n   * @param {Node} items - The drawer element(s) to save state\n   */\n  const stateSave = (items) => {\n\n    // Save all drawers if an items arg wasn't passed\n    items = (items) ? items : drawers\n\n    // Convert to array if only one drawer is passed\n    items = (items.forEach) ? items : u.toArray(items)\n\n    // Loop through our drawers and save their new state to local storage\n    items.forEach((item) => {\n\n      if (item.drawer) {\n        item = item.drawer\n      }\n\n      // Only save drawer state if an id exists\n      if (item.id) {\n        drawerState[item.id] = u.hasClass(item, settings.classActive)\n        localStorage.setItem(\"drawerState\", JSON.stringify(drawerState))\n      }\n    })\n  }\n\n  /**\n   * Private function that clears the drawer state\n   */\n  const stateClear = () => {\n    drawerState = {}\n    localStorage.removeItem(\"drawerState\")\n  }\n\n  /**\n   * Private function that initializes the switch functionality\n   */\n  const initSwitch = () => {\n\n    // Query all the drawers with the switch feature enabled\n    switchDrawers = document.querySelectorAll(settings.switch)\n\n    // Loop through the switch drawers\n    switchDrawers.forEach((drawer) => {\n\n      // Get the local breakpoint if one is set\n      // Remove brackets and the intial data flag\n      let cleanSelector = settings.switch\n        .replace(\"[\", \"\")\n        .replace(\"]\", \"\")\n        .replace(\"data-\", \"\")\n\n      // Convert sring to camelCase\n      cleanSelector = cleanSelector.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase()\n      })\n\n      // Check which breakpoint to use:\n      // a) The local bp set on the drawer\n      // b) The bp available in config using a key\n      // c) The raw pixel value provided in settings\n      let bp = drawer.dataset[cleanSelector]\n      if (bp) {\n        bp = u.getBreakpoint(bp)\n        if (!bp) {\n          bp = drawer.dataset[cleanSelector]\n        }\n      } else {\n        bp = u.getBreakpoint(settings.switchBreakpoint)\n        if (!bp) {\n          bp = settings.switchBreakpoint\n        }\n      }\n\n      // Media query listener\n      let mql = window.matchMedia( \"(min-width:\" + bp + \")\" )\n\n      // Switch to modal if media doesn't match (< bp)\n      if (!mql.matches) {\n        switchToModal(drawer)\n      }\n\n      // Add our media query listener\n      mql.addListener(switchCheck)\n\n      // Push the mql to our array along with it's drawer\n      mqlArray.push({\n        \"drawer\" : drawer,\n        \"mql\": mql\n      })\n    })\n  }\n\n  /**\n   * Private function that destroys the switch functionality\n   */\n  const destroySwitch = () => {\n\n    // Switch all modals back to their original drawer state\n    switchDrawers.forEach((drawer) => {\n      switchToDrawer(drawer)\n    })\n\n    // Remove the media query listeners\n    mqlArray.forEach((item) => {\n      item.mql.removeListener(switchCheck)\n    })\n\n    // Return switch variables to their original state\n    switchDrawers = null\n    mqlArray = []\n  }\n\n  /**\n   * Private function that checks when a media query hits a match and switches\n   * the component from drawer to modal as needed\n   * ---\n   * @param {MediaQueryList} mql - The MediaQueryList object for the media query\n   * @param {Node} drawer - The drawer element to switch\n   */\n  const switchCheck = () => {\n    mqlArray.forEach((item) => {\n      if (item.mql.matches) {\n        switchToDrawer(item.drawer)\n      } else {\n        switchToModal(item.drawer)\n      }\n    })\n  }\n\n  /**\n   * Private function that switches a modal into a drawer component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n  const switchToDrawer = (drawer) => {\n\n    // Get the dialog and trigger elements related to this component\n    let dialog = drawer.querySelector(\".dialog\")\n    let triggers = document.querySelectorAll(\"[data-target=\\\"#\" + drawer.id + \"\\\"]\")\n\n    // Switch the modal component to drawer\n    drawer.className = drawer.className.replace(\n      new RegExp(settings.classTargetSwitch, \"gi\"),\n      settings.classTarget\n    )\n    dialog.className = dialog.className.replace(\n      new RegExp(settings.classInnerSwitch, \"gi\"),\n      settings.classInner\n    )\n    triggers.forEach((trigger) => {\n      trigger.className = trigger.className.replace(\n        new RegExp(settings.classTriggerSwitch, \"gi\"),\n        settings.classTrigger\n      )\n    })\n\n    // Open or close drawer based on save state\n    if (settings.saveState) {\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, \"close\")\n      } else {\n        toggle(drawer, \"open\")\n      }\n    }\n  }\n\n  /**\n   * Private function that switches a drawer into a modal component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n  const switchToModal = (drawer) => {\n\n    // Get the dialog and trigger elements related to this component\n    let dialog = drawer.querySelector(\".dialog\")\n    let triggers = document.querySelectorAll(\"[data-target=\\\"#\" + drawer.id + \"\\\"]\")\n\n    // Switch the drawer component to modal\n    drawer.className = drawer.className.replace(\n      new RegExp(settings.classTarget, \"gi\"),\n      settings.classTargetSwitch\n    )\n    dialog.className = dialog.className.replace(\n      new RegExp(settings.classInner, \"gi\"),\n      settings.classInnerSwitch\n    )\n    triggers.forEach((trigger) => {\n      trigger.className = trigger.className.replace(\n        new RegExp(settings.classTrigger, \"gi\"),\n        settings.classTriggerSwitch\n      )\n    })\n\n    // Remove active class for modal styles by default\n    u.removeClass(drawer, settings.classActive)\n  }\n\n  /**\n   * Initialize our component and return the api\n   */\n  api.init(options)\n  return api\n}\n",
    "import core from \"@vrembem/core\"\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nexport default class {\n\n  /**\n   * Get and output a breakpoint using it\"s key found in core.json\n   * ---\n   * @param {String} key - The key to search for in the breakpoints object\n   * @returns {String} - The pixel value of the breakpoint as a string\n   */\n  static getBreakpoint(key) {\n    return core.breakpoints[key]\n  }\n\n  /**\n   * Checks if an element has a class or not\n   * ---\n   * @param {Node} el - Element(s) to check class(es) on\n   * @param {String || Array} c - Class(es) to check\n   * @returns {Boolean} - Returns true if class exists, otherwise false\n   */\n  static hasClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    return c.some( function (c) {\n      let has = false\n      el.forEach((el) => {\n        if (el.classList.contains(c)) {\n          has = true\n        }\n      })\n      return has\n    })\n  }\n\n  /**\n   * Adds a class or classes to an element\n   * ---\n   * @param {Node} el - Element(s) to add class(es) on\n   * @param {String || Array} c - Class(es) to add\n   */\n  static addClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.add(c)\n      })\n    })\n  }\n\n  /**\n   * Remove a class or classes from an element\n   * ---\n   * @param {Node} el - Element(s) to remove class(es) from\n   * @param {String || Array} c - Class(es) to remove\n   */\n  static removeClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.remove(c)\n      })\n    })\n  }\n\n  /**\n   * Toggle a class or classes on an element\n   * ---\n   * @param {Node} el - Element(s) to toggle class(es) on\n   * @param {String || Array} c - Class(es) to toggle\n   */\n  static toggleClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.toggle(c)\n      })\n    })\n  }\n\n  /**\n   * Find the closest parent element based on class. This is different from the\n   * native .closest() method in that it doesn\"t check the current element.\n   * ---\n   * @param {Node} el - Element to start search on\n   * @param {String || Array} c - Class(es) to check for\n   * @return {Node} - Closest parent element\n   */\n  static closest(el, c) {\n    while ((el = el.parentElement) && !this.hasClass(el, c))\n      return el\n  }\n\n  /**\n   * Converts a string or object to an array. If an array is passed, it\"s\n   * returned as is. Anything else is returned as an array.\n   * ---\n   * @param {Object} item - String or object to convert to an array\n   * @return {Array} - Return the converted array\n   */\n  static toArray(item) {\n\n    let array = []\n\n    if (Array.isArray(item)) {\n      array = item\n    } else {\n      array.push(item)\n    }\n\n    return array\n  }\n\n  /**\n   * Merge two or more objects. Returns a new object. Set the first argument\n   * to `true` for a deep or recursive merge.\n   * ---\n   * @param {Boolean} [Optional] - If true, do a deep (or recursive) merge\n   * @param {Object} - The objects to merge together; each overriding the next\n   * @returns {Object} - Merged values of defaults and options\n   */\n  /* global extend */\n  static extend() {\n\n    let extended = {}\n    let deep = false\n    let i = 0\n    let length = arguments.length\n\n    if ( Object.prototype.toString.call( arguments[0] ) === \"[object Boolean]\" ) {\n      deep = arguments[0]\n      i++\n    }\n\n    let merge = ( obj ) => {\n      for ( let prop in obj ) {\n        if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {\n          if ( deep && Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ) {\n            extended[prop] = extend( true, extended[prop], obj[prop] )\n          } else {\n            extended[prop] = obj[prop]\n          }\n        }\n      }\n    }\n\n    for ( ; i < length; i++ ) {\n      let obj = arguments[i]\n      merge(obj)\n    }\n\n    return extended\n  }\n\n}\n"
  ]
}