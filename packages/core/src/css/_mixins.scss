@use "sass:map";
@use "sass:meta";
@use "./variables" as var;

/// A gap mixin that creates spacing between an elements children comparable to
/// the gap property for Flexbox. Optionally pass a direction string for
/// column-gap ('x') and row-gaps ('y') output.
/// @param {number unit} $val - the number unit
/// @param {null | string} $dir - direction to apply gap ('x', 'y' or null for x and y)
/// @param {null | true} $imp - whether or not to add `!important` flag
@mixin gap($val, $dir: null, $imp: null) {
  @if ($imp) {
    $imp: "!important";
  } @else if ($imp == false) {
    $imp: null;
  }

  @if ($dir == 'x') {
    > * + * {
      margin-left: $val #{$imp};
    }
  } @else if ($dir == 'y') {
    > * + * {
      margin-top: $val #{$imp};
    }
  } @else {
    margin-top: ($val * -1) #{$imp};
    margin-left: ($val * -1) #{$imp};

    > * {
      margin-top: $val #{$imp};
      margin-left: $val #{$imp};
    }
  }
}

/// A media query mixin that defines a query using min-width. You can pass in a
/// key to the `$breakpoints()` map to access that value, or pass a value to
/// create your media query.
/// @param {string | unit} $point
/// @param {style block} @content - passed in brackets
@mixin media-min($point) {
  @if map.has-key(var.$breakpoints, $point) {
    @media (min-width: map.get(var.$breakpoints, $point)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (min-width: $point) {
        @content;
      }
    }
  }
}

/// A media query mixin that defines a query using max-width. You can pass in a
/// key to the `$breakpoints()` maps to access that value, or pass a value to
/// create your media query. This mixin will shave a pixel off your breakpoint
/// values so that it never overlaps with a min-width usage.
/// @param {string | unit} $point
/// @param {style block} @content - passed in brackets
@mixin media-max($point) {
  @if map.has-key(var.$breakpoints, $point) {
    @media (max-width: (map.get(var.$breakpoints, $point) - 1)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (max-width: ($point - 1)) {
        @content;
      }
    }
  }
}

/// Media query mixin can be used for setting styles specifically to retina
/// screens. Used when setting higher resolution background images.
/// @param {style block} @content - passed in brackets
@mixin media-retina() {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

/// A utility mixin for quickely setting the width and height of an element.
/// @param {number (with unit) | string} $width - width size unit
/// @param {number (with unit) | string} $height - height size unit
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Adds clearfix styles
@mixin add-clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Add text overflow styles with ellipsis
@mixin overflow-ellipsis() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
