/// Adds clearfix styles
@mixin add-clearfix() {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

/// A media query mixin that deifnes a query using min-width. You can pass in a
/// key to the `$breakpoints()` map to access that value, or pass a value to
/// create your media query.
/// @param {string | unit} $point
/// @param {style block} @content - passed in brackets
@mixin media-min($point) {
  @if map-has-key($breakpoints, $point) {
    @media (min-width: map-get($breakpoints, $point)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (min-width: $point) {
        @content;
      }
    }
  }
}

/// A media query mixin that deifnes a query using max-width. You can pass in a
/// key to the `$breakpoints()` maps to access that value, or pass a value to
/// create your media query. This mixin will shave a pixel off your breakpoint
/// map values so that it never overlaps with a min-width usage.
/// @param {string | unit} $point
/// @param {style block} @content - passed in brackets
@mixin media-max($point) {
  @if map-has-key($breakpoints, $point) {
    @media (max-width: (map-get($breakpoints, $point) - 1)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (max-width: $point) {
        @content;
      }
    }
  }
}

/// Media query mixin can be used for setting styles specifically to retina
/// screens. Used when setting higher resolution background images.
/// @param {style block} @content - passed in brackets
@mixin media-retina() {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

/// A utility mixin for quickely setting the width and height of an element.
/// @param {number (with unit) | string} $width - width size unit
/// @param {number (with unit) | string} $height - height size unit
@mixin size($width, $height: $width) {
  height: $height;
  width: $width;
}
