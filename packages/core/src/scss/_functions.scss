@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "./prefix" as prefix;

/// Output a valid BEM class using core prefixes and the provided parameters.
/// @param {String} $block - The block name.
/// @param {String} $element [null] - The element name.
/// @param {String} $modifier [null] - The modifier name.
/// @param {String} $modifier-value [null] - The modifier value name.
/// @return {String} - A valid BEM CSS selector using the provided parameters.
@function bem($block, $element: null, $modifier: null, $modifier-value: null) {
  $class: '.#{prefix.$block}#{$block}';
  @if ($element) {
    $class: '#{$class}#{prefix.$element}#{$element}';
  }
  @if ($modifier) {
    $class: '#{$class}#{prefix.$modifier}#{$modifier}';
  }
  @if ($modifier-value) {
    $class: '#{$class}#{prefix.$modifier-value}#{$modifier-value}';
  }
  @return $class;
}

/// Output a CSS variable using the core variable prefix.
/// @param {String} $name - The custom property name.
/// @param {String} $fallback [null] - The custom property name of a fallback.
/// @return {CSS var} - The var() CSS function with the value of the custom property.
@function css($name, $fallback: null) {
  @if ($fallback) {
    @return var(--#{prefix.$variable}#{$name}, var(--#{prefix.$variable}#{$fallback}));
  } @else {
    @return var(--#{prefix.$variable}#{$name});
  }
}

/// Encodes a color for use in data-uri
/// @param {String} $string - The color to encode.
/// @return {String} - Encoded color.
@function encodecolor($string) {
  @if meta.type-of($string) == "color" {
    $hex: string.slice(color.ie-hex-str($string), 4);
    $string: string.unquote("#{$hex}");
  }
  $string: "%23" + $string;
  @return $string;
}

/// Replacing values from list.
/// @param {List} $list
/// @param {Value} $old-value
/// @param {Value} $new-value
/// @param {Boolean} $recursive [false]
/// @return {List} - List with replaced values.
@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();
  @for $i from 1 through list.length($list) {
    @if meta.type-of(list.nth($list, $i)) == "list" and $recursive {
      $result: list.append(
        $result,
        replace(list.nth($list, $i), $old-value, $new-value, $recursive)
      );
    }
    @else {
      @if list.nth($list, $i) == $old-value {
        $result: list.append($result, $new-value);
      }
      @else {
        $result: list.append($result, list.nth($list, $i));
      }
    }
  }
  @return $result;
}

/// Replaces a boolean list template with two values.
/// @param {List} $tpl - A boolean list template.
/// @param {Color} $color-1 - Color to replace 1 from template.
/// @param {Color} $color-0 [transparent] - Color to replace 0 from template.
/// @return {List} - New list with replaced values.
@function set-border-color($tpl, $color-1, $color-0: transparent) {
  $result: replace($tpl, 0, $color-0);
  $result: replace($result, 1, $color-1);
  @return $result;
}

/// Output the hue and saturation values of a provided color.
/// @param {Color} $color - The color variable to pull hue and saturation values from.
/// @return {List} - The hue and saturation values of the provided color.
@function get-hs($color) {
  @return math.round(color.hue($color)) math.round(color.saturation($color));
}

/// Removes the item of $list at index $n. If $n is negative, it counts from the
/// end of $list.
/// @param {List} $list - The list to have an item removed from.
/// @param {Number} $n - The position (index) in the list to have removed.
/// @return {List} - A new list with the item removed.
@function remove-nth($list, $n) {
  $result: ();
  $n: if($n < 0, list.length($list) + $n + 1, $n);
  $bracketed: list.is-bracketed($list);
  $separator: list.separator($list);
  @for $i from 1 through length($list){
    @if $i != $n { $result: list.append($result, list.nth($list, $i)); }
  }
  @return join((), $result, $separator, $bracketed);
}

/// Return the top/right/bottom/right value on a padding, margin, etc. property, no matter how many values were passed in.
/// @param {List | Number} $value - Value to analyze. Should be a shorthand sizing property, e.g. "1em 2em 1em".
/// @param {Keyword} $side - Side to return. Should be `top`, `right`, `bottom`, or `left`.
/// @returns {Number} - A single value based on `$value` and `$side`.
@function get-side($value, $side) {
  $_length: list.length($value);

  @if $_length == 1 {
    @return $value;
  }

  @else if $_length == 2 {
    @return map.get((top: list.nth($value, 1), bottom: list.nth($value, 1), left: list.nth($value, 2), right: list.nth($value, 2)), $side);
  }

  @else if $_length == 3 {
    @return map.get((top: list.nth($value, 1), left: list.nth($value, 2), right: list.nth($value, 2), bottom: list.nth($value, 3)), $side);
  }

  @else if $_length == 4 {
    @return map.get((top: list.nth($value, 1), right: list.nth($value, 2), bottom: list.nth($value, 3), left: list.nth($value, 4)), $side);
  }

  @else {
    @error "The provided list value is not valid: #{$value}";
  }
}
