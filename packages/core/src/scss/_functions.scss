@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

/// Encodes a color for use in data-uri
/// @param {String} $string - The color to encode
/// @return {String} - Encoded color
@function encodecolor($string) {
  @if meta.type-of($string) == "color" {
    $hex: string.slice(color.ie-hex-str($string), 4);
    $string: string.unquote("#{$hex}");
  }
  $string: "%23" + $string;
  @return $string;
}

/// Replacing values from list.
/// @param {List} $list
/// @param {Value} $old-value
/// @param {Value} $new-value
/// @param {Boolean} $recursive [false]
/// @return {List} - list with replaced values
@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();
  @for $i from 1 through list.length($list) {
    @if meta.type-of(list.nth($list, $i)) == "list" and $recursive {
      $result: list.append(
        $result,
        replace(list.nth($list, $i), $old-value, $new-value, $recursive)
      );
    }
    @else {
      @if list.nth($list, $i) == $old-value {
        $result: list.append($result, $new-value);
      }
      @else {
        $result: list.append($result, list.nth($list, $i));
      }
    }
  }
  @return $result;
}

/// Replaces a boolean list template with two values.
/// @param {List} $tpl - A boolean list template
/// @param {Color} $color-1 - Color to replace 1 from template
/// @param {Color} $color-0 [transparent] - Color to replace 0 from template
/// @return {List} - New list with replaced values
@function set-border-color($tpl, $color-1, $color-0: transparent) {
  $result: replace($tpl, 0, $color-0);
  $result: replace($result, 1, $color-1);
  @return $result;
}

/// Output the hue and saturation values of a provided color.
/// @param {Color} $color - The color variable to pull hue and saturation values from.
@function get-hs($color) {
  @return math.round(color.hue($color)), math.round(color.saturation($color));
}

/// Sets the hsl() value provided a color variable.
/// @param {Color} $color - The color variable to pull hue and saturation values from.
/// @param {Percent} $lightness - The percentage used as the lightness value.
/// @param {Number} $alpha - The number used as the alpha value.
@function set-hsl($color, $lightness, $alpha) {
  @if ($alpha) {
    @return hsl(math.round(color.hue($color)), math.round(color.saturation($color)), $lightness, $alpha);
  }
  @else {
    @return hsl(math.round(color.hue($color)), math.round(color.saturation($color)), $lightness);
  }
}

/// Returns a variable stack.
/// @param {String} $prefix - String to prefix CSS variables with.
/// @param {String} $prop - The property name of the CSS variable.
/// @param {Any} $default - The default value of the stack.
/// @return {Function} - The var function stack.
@function vars($prefix, $prop, $default: null) {
  @if ($default) {
    @return var(--#{$prefix}#{$prop}, var(--#{$prefix}root-#{$prop}, #{$default}));
  }
  @else {
    @return var(--#{$prefix}#{$prop}, var(--#{$prefix}root-#{$prop}));
  }
}
