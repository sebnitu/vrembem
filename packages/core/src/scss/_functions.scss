@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
@use "./variables" as var;

/// Remove the unit of a list.length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if meta.type-of($number) == "number" and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }
  @return $number;
}

/// Converts a pixel value to ems.
/// @param {Pixel} $px
/// @param {Pixel} $base [$font-size]
/// @return {Em} - Calculated em value
@function px-to-em($px, $base: var.$font-size) {
  @if math.is-unitless($px) {
    $px: 1px * $px;
  }
  @if math.is-unitless($base) {
    $base: 1px * $base;
  }
  $px: math.div($px, $base) * 1em;
  @return strip-unit($px) * 1em;
}

/// Converts a pixel value to rems.
/// @param {Pixel} $px
/// @return {Rem} - Calculated rem value
@function px-to-rem($px) {
  @if math.is-unitless($px) {
    $px: 1px * $px;
  }
  @if math.is-unitless(var.$font-size) {
    $font-size: 1px * var.$font-size;
  }
  $px: math.div($px, $font-size) * 1rem;
  @return strip-unit($px) * 1rem;
}

/// Converts an em value to pixels.
/// @param {Em} $em
/// @param {Pixel} $base [$font-size]
/// @return {Pixel} - Calculated pixel value
@function em-to-px($em, $base: var.$font-size) {
  @if math.is-unitless($em) {
    $em: 1em * $em;
  }
  @if math.is-unitless($base) {
    $base: 1px * $base;
  }
  $em: math.div($em * $base, 1px);
  @return strip-unit($em) * 1px;
}

/// Output the font weight value using the a weight keyword.
/// @param {String} $weight - Font weight keyword
/// @return {Number} - Font weight value
@function font-weight($keyword) {
  $value: null;
  @if ($keyword == "hairline" or $keyword == "thin") {
    $value: 100;
  }
  @else if ($keyword == "extra-light") {
    $value: 200;
  }
  @else if ($keyword == "light") {
    $value: 300;
  }
  @else if ($keyword == "regular" or $keyword == "normal") {
    $value: 400;
  }
  @else if ($keyword == "medium") {
    $value: 500;
  }
  @else if ($keyword == "semi-bold" or $keyword == "semibold") {
    $value: 600;
  }
  @else if ($keyword == "bold") {
    $value: 700;
  }
  @else if ($keyword == "extra-bold") {
    $value: 800;
  }
  @else if ($keyword == "black") {
    $value: 900;
  }
  @return $value;
}

/// Returns the aspect ratio in the form of a percentage.
/// @param {Number} $width
/// @param {Number} $height
/// @return {Percent} - Aspect ratio as a percentage
@function aspect-ratio($width, $height) {
  @return math.div($height, $width) * 100%;
}

/// Encodes a color for use in data-uri
/// @param {String} $string - The color to encode
/// @return {String} - Encoded color
@function encodecolor($string) {
  @if meta.type-of($string) == "color" {
    $hex: string.slice(color.ie-hex-str($string), 4);
    $string: string.unquote("#{$hex}");
  }
  $string: "%23" + $string;
  @return $string;
}

/// Replacing values from list.
/// @param {List} $list
/// @param {Value} $old-value
/// @param {Value} $new-value
/// @param {Boolean} $recursive [false]
/// @return {List} - list with replaced values
@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();
  @for $i from 1 through list.length($list) {
    @if meta.type-of(list.nth($list, $i)) == "list" and $recursive {
      $result: list.append(
        $result,
        replace(list.nth($list, $i), $old-value, $new-value, $recursive)
      );
    }
    @else {
      @if list.nth($list, $i) == $old-value {
        $result: list.append($result, $new-value);
      }
      @else {
        $result: list.append($result, list.nth($list, $i));
      }
    }
  }
  @return $result;
}

/// Replaces a boolean list template with two values.
/// @param {List} $tpl - A boolean list template
/// @param {Color} $color-1 - Color to replace 1 from template
/// @param {Color} $color-0 [transparent] - Color to replace 0 from template
/// @return {List} - New list with replaced values
@function set-border-color($tpl, $color-1, $color-0: transparent) {
  $result: replace($tpl, 0, $color-0);
  $result: replace($result, 1, $color-1);
  @return $result;
}

/// Switch between a dark or light color based on the provided background color
/// @param {Color} $color - The color to check against a lightness threshold
/// @param {Color} $color-subtle - The light color to use
/// @param {Color} $color-dark - The dark color to use
/// @return {Color} - A light or dark text color based on lightness test
@function color-switch(
  $background-color,
  $color-dark: var.$color,
  $color-light: var.$color-invert
) {
  // Checkout base color to lightness threshold
  @if (color.lightness($background-color) > var.$lightness-threshold) {
    // Lighter background, return dark color
    @return $color-dark;
  }
  @else {
    // Darker background, return light color
    @return $color-light;
  }
}

/// Check whether or not a color is dark
/// @param {Color} $color - The color to check against a lightness threshold
/// @return {Boolean} - The result
@function is-dark($color) {
  @return (color.lightness($color) < var.$lightness-threshold);
}

/// Check whether or not a color is light
/// @param {Color} $color - The color to check against a lightness threshold
/// @return {Boolean} - The result
@function is-light($color) {
  @return (color.lightness($color) > var.$lightness-threshold);
}
