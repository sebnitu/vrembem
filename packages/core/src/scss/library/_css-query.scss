@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "./css" as *;
@use "./media-min" as *;
@use "../variables";

/// Define a dynamic CSS variable using maps and breakpoints.
/// @param {String} $prop - The custom property name.
/// @param {Map | All} $value - The value of the custom property or a map of valid variables with breakpoints as the key.
/// @param {Map} $breakpoints - A valid breakpoints map. See: core.$breakpoints.
/// @output A default CSS variable and CSS variables in media queries.
@mixin css-query($prop, $value, $breakpoints: variables.$breakpoints) {
  // If padding is not a map, set the CSS var.
  @if meta.type-of($value) != 'map' {
    @include css($prop, $value);
  }
  // Else padding is a map, loop through the breakpoints and output CSS var.
  @else {
    // Get the first item from breakpoints.
    $_firstKey: list.nth(list.nth($value, 1), 1);
    // Output the fist padding value in the map as the base CSS var.
    @include css($prop, map.get($value, $_firstKey));
    // Loop through the breakpoints.
    @each $key, $bpValue in $breakpoints {
      // If key matches padding first key, skip it. We already output it.
      @if $key != $_firstKey {
        // If the breakpoint key exists in the padding map...
        @if map.has-key($value, $key) {
          // Output the media query with new CSS variable value.
          @include media-min($bpValue) {
            @include css($prop, map.get($value, $key));
          }
        }
      }
    }
  }
}
