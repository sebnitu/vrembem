@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "./functions" as fun;
@use "./prefix";
@use "./palette";

/// Prefix for custom properties.
/// @access private
/// @alias prefix.$variable
/// @type String
$_v: prefix.$variable;

/// Prefix for theme classes.
/// @access private
/// @alias prefix.$theme
/// @type String
$_t: prefix.$theme;

/// Set the default theme. Should match an existing theme in the $themes map.
/// @type String
$default: "light" !default;

/// CSS selector to use for outputting the root CSS custom properties.
/// @type String
$root-selector: ":root, .#{$_t}root" !default;

/// Stores the theme maps used to build theme classes and CSS custom property
/// output. Each entry should contain the name of the theme along with all its
/// custom properties and values. Themes may also contain component maps for
/// component specific theming. Optionally set `color-scheme` property for
/// outputting the `color-scheme: (light | dark);` property.
/// @example - Themes map with a high-contrast theme.
///   "high-contrast": (
///     "background": white,
///     "foreground": black,
///     ...
///   );
/// @example - Themes map with a component theme.
///   "dark": (
///     "background": teal,
///     "foreground": pink,
///     ...
///     "button": (
///       "background": gray,
///       "foreground": blue,
///       ...
///     )
///   );
/// @prop {Map} name - The name of the theme (key) and a map of property/value pairs.
/// @prop {Any} name.prop - The name of the custom property and its value.
/// @type Map
$themes: (
  "light": (
    "background": palette.get("neutral", 100),
    "background-dark": palette.get("neutral", 98),
    "background-darker": palette.get("neutral", 95),
    "background-hover": rgba(black, 0.05),
    "background-focus": rgba(black, 0.05),
    "background-active": rgba(black, 0.1),
    "foreground": palette.get("neutral", 20),
    "foreground-light": palette.get("neutral", 40),
    "foreground-lighter": palette.get("neutral", 60),
    "border-color": rgba(black, 0.1),
    "border-color-dark": rgba(black, 0.2),
    "border-color-darker": rgba(black, 0.3),
    "shadow-color": palette.get("neutral", 20%, 20%),
    "focus-visible": palette.get("primary"),
    "color-scheme": light
  ),
  "dark": (
    "background": palette.get("neutral", 10),
    "background-dark": palette.get("neutral", 12),
    "background-darker": palette.get("neutral", 15),
    "background-hover": rgba(white, 0.05),
    "background-focus": rgba(white, 0.05),
    "background-active": rgba(white, 0.1),
    "foreground": palette.get("neutral", 90),
    "foreground-light": palette.get("neutral", 70),
    "foreground-lighter": palette.get("neutral", 50),
    "border-color": rgba(white, 0.1),
    "border-color-dark": rgba(white, 0.2),
    "border-color-darker": rgba(white, 0.3),
    "shadow-color": palette.get("neutral", 0%, 20%),
    "focus-visible": palette.get("primary"),
    "color-scheme": dark
  )
) !default;

/// Function to return the CSS variable with fallback of an entry within the
/// $themes map. Requested property must exist in the default theme.
/// @example - Return the background var() from the default theme.
///   background: theme.get("background");
/// @example - Return the background var() from the card default theme.
///   background: theme.get("card", "background");
/// @param {String} $args... - The property key to return.
/// @require {Variable} $themes
/// @return {CSS Var} - The var() CSS function with the value of the requested custom property.
@function get($args...) {
  @if map.has-key($themes, $default, $args...) {
    // Initial prop value and override if two arguments are passed.
    $prop: #{list.nth($args, 1)};
    @if list.length($args) == 2 {
      $prop: #{list.nth($args, 1)}-#{list.nth($args, 2)};
    }

    // Return the CSS variable.
    @return var(--#{$_v}#{$prop});
  } @else {
    @error "Property does not exist in the default theme: (#{$default}, #{$args})";
  }
}

/// Function to return the value of an entry within the $themes map.
/// @example - Return the background value from the default theme.
///   background: theme.val("background");
/// @example - Return the foreground value from the card default theme.
///   background: theme.val("card", "foreground");
/// @example - Return the background value from the card dark theme.
///   background: theme.val("dark", "card", "background");
/// @param {String} $args... - The property key to return.
/// @require {Variable} $themes
/// @return {CSS Var} - The var() CSS function with the value of the requested custom property.
@function val($args...) {
  @if map.has-key($themes, $default, $args...) {
    @return map.get($themes, $default, $args...);
  } 
  @else if map.has-key($themes, $args...) {
    @return map.get($themes, $args...);
  }
  @else {
    @error "Property does not exist in the themes object: (#{$args})";
  }
}

/// Set a new or modify an existing property value in the $themes map.
/// @example - Set the foreground custom property for the dark theme.
///   @include theme.set("dark", "foreground", blue);
/// @output N/A
/// @param {String} $args... - The property keys and value to set.
/// @require {Variable} $themes
@mixin set($args...) {
  // Get the last item in the $args list.
  $value: list.nth($args, -1);

  // Get the props list.
  $props: fun.remove-nth($args, -1);

  // If the value is replacing a map, handle the deep-merge.
  @if (meta.type-of($value) == "map") {
    $new: $value;
    $old: map.get($themes, $props...);
    @if (meta.type-of($old) == "map") {
      $new: map.deep-merge($old, $value);
    }
    $themes: map.set($themes, list.append($props, $new)...) !global;
  }
  
  // Otherwise, just add the value using the $args list.
  @else {
    $themes: map.set($themes, $args...) !global;
  }
}

/// Remove a custom property in the $themes map.
/// @example - Remove the border-color property from the dark theme.
///   @include theme.remove("dark", "border-color");
/// @output N/A
/// @param {String} $args... - The property key to remove.
/// @require {Variable} $themes
@mixin remove($args...) {
  $themes: map.deep-remove($themes, $args...) !global;
}

/// Output all the custom properties and values of a theme or a component theme.
/// @example - Output the custom properties of the default theme.
///   @include theme.output();
/// @example - Output the custom properties of the dark theme.
///   @include theme.output("dark");
/// @example - Output the custom properties of the light theme for the button component.
///   @include theme.output("light", "button");
/// @output Custom properties with their associated values of a theme.
/// @param {String} $theme [$default] - The theme name to output.
/// @param {String} $component [null] - The name of component themes to output.
@mixin output($theme: $default, $component: null) {
  // Check if the key exists on the provided $themes map.
  @if map.has-key($themes, $theme) {

    // Initial color scheme variable.
    $color-scheme: null;

    // Initial themes map and override if component is passed.
    $map: map.get($themes, $theme);
    @if $component {
      $map: map.get($themes, $theme, $component);
    }

    // If a map exists...
    @if $map {
      // Loop through all theme entries and output their custom properties.
      @each $key, $value in $map {
        // Check if a value exists and if it's not a map.
        @if $value and meta.type-of($value) != 'map' {
          // Initial prop value and override if two arguments are passed.
          $prop: --#{$_v}#{$key};
          @if $component {
            $prop: --#{$_v}#{$component}-#{$key};
          }

          // Output property or store the color scheme.
          @if $key != 'color-scheme' {
            #{$prop}: #{$value};
          } @else {
            $color-scheme: #{$value};
          }
        }
      }
    }

    // If a color scheme was stored, output it below everything else.
    @if $color-scheme {
      color-scheme: #{$color-scheme};
    }
  } @else {
    @error "Theme does not exist in themes map: #{$theme}";
  }
}

/// Output all the custom properties and values of every theme in the provided 
/// $themes map or pass a specific component name to output. Each theme will be 
/// wrapped in their own selector using the set theme prefix and theme key. The
/// $root-selector is used to wrap the $default. Themes named "light" or
/// "dark" are also output in the `prefers-color-scheme` media query.
/// @example
///   @include theme.output-themes();
/// @example - Output the custom properties of the notice component.
///   @include theme.output-themes("notice");
/// @output
///   Custom properties with their associated values of a theme wrapped with
///   their associated theme classes.
/// @param {String} $component [null] - The name of component themes to output.
/// @require {Mixin} output - Used internally to output individual themes.
@mixin output-themes($component: null) {
  // Output the default theme in the root selector.
  #{$root-selector} {
    @include output($default, $component);
  
    // If the default them is not light mode, output the prefers light media query.
    @if $default != 'light' {
      @media (prefers-color-scheme: light) {
        @include output("light", $component);
      }
    }
    
    // If the default them is not dark mode, output the prefers dark media query.
    @if $default != 'dark' {
      @media (prefers-color-scheme: dark) {
        @include output("dark", $component);
      }
    }
  }
  
  // Run the output function on all 
  @each $key, $value in $themes {
    .#{$_t}#{$key} {
      @include output($key, $component);
    }
  }
}
