@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../variables/prefix";
@use "../utilities/reverse" as *;
@use "../utilities/debug-map" as *;

$_variables: (
  "core": (
    "prefix": prefix.$variable
  )
);

@function _pre($module) {
  @if ($module != "core") {
    @return "--#{prefix.$variable}#{$module}-";
  } @else {
    @return "--#{prefix.$variable}";
  }
}

@function reference($prop, $fallback: null, $module: "core") {
  @if ($fallback) {
    @return var(#{_pre($module)}#{$prop}, $fallback);
  } @else {
    @return var(#{_pre($module)}#{$prop});
  }
}

@mixin define($prop, $value: null, $module: "core") {
  @if ($value) {
    #{_pre($module)}#{$prop}: #{$value};
  }
}

@function get($module, $props...) {
  @if (list.length($props) == 0) {
    $props: $module;
    $module: "core";
  }

  @if not map.has-key($_variables, $module) {
    @error "Module map has not been set: \"#{$module}\"";
  }

  $props: reverse($props);
  $result: null;

  @each $prop in $props {
    @if not map.has-key($_variables, $module, $prop) {
      @error "Custom property has not been set: \"#{$module}\" > \"#{$prop}\"";
    }
    
    $result: reference($prop, $result, $module);
  }
  
  @return $result;
}

@mixin set($module, $prop, $value: null) {
  @if (meta.type-of($prop) == "map") {
    @each $propKey, $propValue in $prop {
      @if (meta.type-of($propValue) == "map") {
        @each $key, $value in $propValue {
          $_variables: map.set($_variables, $module, "#{$propKey}-#{$key}", $value) !global;
        }
      } @else {
        $_variables: map.set($_variables, $module, $propKey, $propValue) !global;
      }
    }
  }

  @else if (meta.type-of($value) == "map") {
    @each $key, $value in $value {
      $_variables: map.set($_variables, $module, "#{$prop}-#{$key}", $value) !global;
    }
  }

  @else {
    $_variables: map.set($_variables, $module, $prop, $value) !global;
  }
}

@mixin remove($keys...) {
  $_variables: map.deep-remove($_variables, $keys...) !global;
}

@mixin override($module, $prop, $value: null) {
  @if not map.has-key($_variables, $module) {
    @error "Module map has not been set: \"#{$module}\"";
  }

  @if (meta.type-of($prop) == "map") {
    @each $key, $value in $prop {
      @if not map.has-key($_variables, $module, $key) {
        @error "Custom property has not been set: \"#{$module}\" > \"#{$key}\"";
      }

      @if ($value) {
        @include define($key, $value, $module);
      }
    }
  }

  @else {
    @if not map.has-key($_variables, $module, $prop) {
      @error "Custom property has not been set: \"#{$module}\" > \"#{$prop}\"";
    }

    @if ($value) {
      @include define($prop, $value, $module);
    }
  }
}

@mixin output($module: "core") {
  @if not map.has-key($_variables, $module) {
    @error "Module map has not been set: \"#{$module}\"";
  }

  @each $prop, $value in map.get($_variables, $module) {
    @if ($value) {
      @include define($prop, $value, $module);
    }
  }
}

@mixin log($module: null) {
  @if not $module {
    @include debug-map($_variables);
  }
  
  @else {
    @if not map.has-key($_variables, $module) {
      @error "Module map has not been set: \"#{$module}\"";
    }

    @include debug-map(map.get($_variables, $module));
  }
}
