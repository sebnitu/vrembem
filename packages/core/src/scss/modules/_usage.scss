@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "../utilities/debug-map" as *;

/// TODO: Documentation
@function _init-meta-data($action: "set") {
  $def: 0; $ref: 0; $override: 0;
  @if ($action == "def") { $def: 1; }
  @if ($action == "ref") { $ref: 1; }
  @if ($action == "override") { $override: 1; }
  @return ( "def": $def, "ref": $ref, "override": $override );
}

/// Stores all references of custom properties and their meta information.
/// @type map
/// @access private
$_meta: (
  "core": (
    "prefix": _init-meta-data()
  )
);

/// TODO: Documentation
@function set($module, $prop, $action: "set") {
  @if (map.has-key($_meta, $module, $prop)) {
    $n: map.get($_meta, $module, $prop, $action);
    $_meta: map.set($_meta, $module, $prop, $action, $n + 1) !global;
  } @else {
    $_meta: map.set($_meta, $module, $prop, _init-meta-data($action)) !global;
  }
  @return $_meta;
}

/// TODO: Documentation
@function get($keys...) {
  @if (list.length($keys) == 0) {
    @return $_meta;
  } @else {
    @return map.get($_meta, $keys...);
  }
}

/// TODO: Documentation
@function remove($keys...) {
  $_meta: map.deep-remove($_meta, $keys...) !global;
  @return $_meta;
}

/// Output custom properties based on the provided strategy. This can either be
/// all (via "*" or "all" values) or "used" meaning only the custom properties
/// that have been referenced get output.
/// @param {mixin value} $mixin
///   The mixin to call with params in the output loop. 
///   Value should come from `meta.get-mixin()` usage.
/// @param {string} $module
///   The name of the module being output.
/// @param {map} $moduleMap
///   A map of containing property/value pairs to output.
/// @param {string} $strategy
///   The output strategy to apply. Available options: "*", "all" or "used".
///   - "*" and "all" will output all stored custom properties.
///   - "used" will only output custom properties that have been referenced.
@mixin output($mixin, $module, $moduleMap, $strategy) {
  // If strategy is set to all, output everything in the map.
  @if ($strategy == "*" or $strategy == "all") {
    @each $prop, $value in $moduleMap {
      @include meta.apply($mixin, $module, $prop, $value);
    }
  }
  // Else, only output variable that were referenced.
  @else {
    @each $prop, $value in $moduleMap {
      @if map.has-key(get(), $module, $prop) {
        @include meta.apply($mixin, $module, $prop, $value);
      }
    }
  }
}

/// TODO: Documentation
@mixin log($module: null, $filters: ()) {
  @if ($module == "*" or $module == "all") {
    $module: null;
  }
  
  // Initial filtered map is just inherited from meta map.
  $filtered: $_meta;

  // Do a module check and error if one is passed that hasn't been set.
  @if ($module) {
    @if (map.has-key($filtered, $module)) {
      $filtered: map.get($filtered, $module);
    } @else {
      @error "Module map has not been set: \"#{$module}\"";
    }
  }

  // Loop through the provided filters
  @each $filterKey, $filterValue in $filters {
    // If a module was passed.
    @if ($module) {
      @each $prop, $meta in $filtered {
        @if (map.has-key($meta, $filterKey) and (map.get($meta, $filterKey) != $filterValue)) {
          $filtered: map.remove($filtered, $module, $prop);
        }
      }
    }
    // If a module was not passed.
    @else {
      @each $module, $props in $filtered {
        @each $prop, $meta in $props {
          @if (map.has-key($meta, $filterKey) and (map.get($meta, $filterKey) != $filterValue)) {
            $filtered: map.deep-remove($filtered, $module, $prop);
            // Remove empty maps if they exist.
            @if (map.get($filtered, $module) == ()) {
              $filtered: map.remove($filtered, $module);
            }
          }
        }
      }
    }
  }

  // Log the filtered map.
  @if ($module) {
    @include debug-map($filtered, "Filtered custom properties of \"#{$module}\"");
  } @else if ($filters == ()) {
    @include debug-map($filtered, "All custom properties");
  } @else {
    @include debug-map($filtered, "Filtered custom properties");
  }
}
