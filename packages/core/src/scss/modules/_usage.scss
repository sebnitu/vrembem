@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "../utilities/debug-map" as *;

/// Stores all references of custom properties and their meta information.
/// @type map
/// @access private
$_meta: ();

/// Return a value from the usage `$_meta` map.
/// @param {string} $keys...
///   The keys to follow in the `$_meta` map and return its value. Leave empty 
///   to return the entire `$_meta` map.
@function get($keys...) {
  @if (list.length($keys) == 0) {
    @return $_meta;
  } @else {
    @return map.get($_meta, $keys...);
  }
}

/// Set the meta data for a module's property based on the action being taken.
/// @param {string} $module
///   The module name who's custom property is being stored under.
/// @param {string} $prop
///   The custom property name that should be stored.
/// @param {string} $action
///   The action that's being taken with the custom property. Options include:
///   - "ref": The property is being referenced.
///   - "def": The property is being defined.
///   - "override": The property is being overrode.
///   - "required": Required property should be output regardless of usage.
@function set($module, $prop, $flags...) {
  @if (map.has-key($_meta, $module, $prop)) {
    $_meta: _update-data($module, $prop, $flags...) !global;
  } @else {
    $_meta: map.set($_meta, $module, $prop, _init-data($flags...)) !global;
  }
  @return $_meta;
}

/// Mixin alias for running @function set().
@mixin set($module, $prop, $flags...) {
  $run: set($module, $prop, $flags...);
}

/// Setup initial data for a new property in the usage `$_meta` map. The action
/// parameter will increment the value of that action in the data map.
/// @param {string} $action
///   The action that's being taken with the custom property. Options include:
///   - "ref": The property is being referenced.
///   - "def": The property is being defined.
///   - "override": The property is being overrode.
///   - "required": Required property should be output regardless of usage.
/// @return {map}
///   The initial data map for storing as property value in `$_meta` map.
/// @access private
/// TODO: Update documentation
@function _init-data($flags...) {
  $result: ("def": 0, "ref": 0);
  @each $flag in $flags {
    @if ($flag == "def") or ($flag == "ref") { 
      $result: map.set($result, $flag, 1);
    }
    @else { 
      $result: map.set($result, $flag, true);
    }
  }
  @return $result;
}

/// TODO: Documentation
@function _update-data($module, $prop, $flags...) {
  $result: $_meta;
  @each $flag in $flags {
    @if ($flag == "required") or ($flag == "once") {
      // Set flag to true if set to: "required" or "once".
      $result: map.set($result, $module, $prop, $flag, true);
    } @else {
      // Increment data if it is: "def", "ref" or "override"
      $n: map.get($result, $module, $prop, $flag) or 0;
      $result: map.set($result, $module, $prop, $flag, $n + 1);
    }
  }
  @return $result;
}

/// Remove a property from the usage `$_meta` map.
/// @param {string} $keys...
///   The keys to follow in the `$_meta` map and remove.
/// TODO: Ensure that flags can be removed.
@function remove($keys...) {
  $_meta: map.deep-remove($_meta, $keys...) !global;
  @return $_meta;
}

/// Output custom properties based on the provided strategy. This can either be
/// all (via "*" or "all" values) or "used" meaning only the custom properties
/// that have been referenced get output.
/// @param {mixin value} $mixin
///   The mixin to call with params in the output loop. 
///   Value should come from `meta.get-mixin()` usage.
/// @param {string} $module
///   The name of the module being output.
/// @param {map} $moduleMap
///   A map of containing property/value pairs to output.
/// @param {string} $strategy
///   The output strategy to apply. Available options: "*", "all" or "used".
///   - "*" and "all" will output all stored custom properties.
///   - "used" will only output custom properties that have been referenced.
@mixin output($mixin, $module, $moduleMap, $strategy, $flag: null) {
  
  // If strategy is set to all, output everything in the map.
  @if ($strategy == "*" or $strategy == "all") {
    @each $prop, $value in $moduleMap {
      @if (flag-check($module, $prop, $flag)) {
        @include meta.apply($mixin, $module, $prop, $value, $flag);
      }
    }
  }
  // Else, only output variable that were referenced.
  @else {
    @each $prop, $value in $moduleMap {
      @if map.has-key(get(), $module, $prop) {
        @if (flag-check($module, $prop, $flag)) {
          @include meta.apply($mixin, $module, $prop, $value, $flag);
        }
      }
    }
  }
}

/// TODO: Add documentation
@function flag-check($module, $prop, $flag: null) {
  $meta: get($module, $prop) or ();
  @if ($flag != "override") and (map.has-key($meta, "def")) and (map.get($meta, "def") > 0) {
    @return false;
  } @else {
    @return true;
  }
}

/// Log to console data from the `$_meta` custom properties map. The log can be 
/// filtered using a module name and further with a specific data map to match.
/// @param {string} $module
///   The module name to filter the meta map's data by. Can be set to null, "*"
///   or "all" to return the values of all modules.
/// @param {mao} $filters
///   A filters map containing the values that should match and be returned.
/// 
/// @example scss
///   // Log all properties in the button module that were never referenced.
///   @include usage.log("button", ("ref": 0));
/// 
/// @example scss
///   // Log all properties of every module that are required,
///   @include usage.log("core", ("required": 1));
///
@mixin log($module: null, $filters: ()) {
  @if ($module == "*" or $module == "all") {
    $module: null;
  }
  
  // Initial filtered map is just inherited from meta map.
  $filtered: $_meta;

  // Do a module check and error if one is passed that hasn't been set.
  @if ($module) {
    @if (map.has-key($filtered, $module)) {
      $filtered: map.get($filtered, $module);
    } @else {
      @error "Module map has not been set: \"#{$module}\"";
    }
  }

  // Loop through the provided filters
  @each $filterKey, $filterValue in $filters {
    // If a module was passed.
    @if ($module) {
      @each $prop, $meta in $filtered {
        @if (not map.has-key($meta, $filterKey) or (map.get($meta, $filterKey) != $filterValue)) {
          $filtered: map.remove($filtered, $module, $prop);
        }
      }
    }
    // If a module was not passed.
    @else {
      @each $module, $props in $filtered {
        @each $prop, $meta in $props {
          @if (not map.has-key($meta, $filterKey) or (map.get($meta, $filterKey) != $filterValue)) {
            $filtered: map.deep-remove($filtered, $module, $prop);
            // Remove empty maps if they exist.
            @if (map.get($filtered, $module) == ()) {
              $filtered: map.remove($filtered, $module);
            }
          }
        }
      }
    }
  }

  // Log the filtered map.
  @if ($module) {
    @include debug-map($filtered, "Filtered custom properties of \"#{$module}\"");
  } @else if ($filters != ()) {
    @include debug-map($filtered, "Filtered custom properties");
  } @else {
    @include debug-map($filtered, "All custom properties");
  }
}
