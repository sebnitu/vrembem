@use "sass:map";
@use "sass:meta";
@use "../utilities/debug-map" as *;

/// Stores all library wide configuration options.
/// @type map
/// @access private
$-options: (
  "output-strategy": "*",
  "prefix-variables": "vb-",
  "prefix-themes": "vb-theme-",
  "prefix-blocks": null,
  "prefix-elements": "__",
  "prefix-modifiers": "_",
  "prefix-modifier-values": "_",
  "prefix-utility": null,
  "default-theme": "light"
);

/// Returns the value of an option in the configuration map.
///
/// @param {string} $keys...
///   A key or list of keys to follow in the `$-options` map and return.
///
@function get($keys...) {
  @return map.get($-options, $keys...);
}

/// Set an option in the configuration map.
///
/// @param {string} $key
///   The key in the map to set. Can be passed a map of key/value pairs.
///   - ("key": "value"), null
///   - ("key": ("key": "value")), null
///
/// @param {any} $value (null)
///   The value to be stored. Can be passed a map of key/value pairs where key
///   will be prefixed with the provided value keys.
///   - "key", "value"
///   - "key", ("key": "value")
///
@mixin set($key, $value: null) {
  // Initialize the options map to our result
  $result: $-options;

  @if meta.type-of($key) == "map" {
    @each $keyKey, $keyValue in $key {
      // Scenario: ("key": ("key": "value")), null
      @if meta.type-of($keyValue) == "map" {
        @each $key, $value in $keyValue {
          $result: map.set($result, "#{$keyKey}-#{$key}", $value);
        }
      }

      // Scenario: ("key": "value"), null
      @else {
        $result: map.set($result, $keyKey, $keyValue);
      }
    }
  }

  // Scenario: "key", ("key": "value")
  @else if meta.type-of($value) == "map" {
    @each $valueKey, $value in $value {
      $result: map.set($result, "#{$key}-#{$valueKey}", $value);
    }
  }

  // Scenario: "key", "value"
  @else {
    $result: map.set($result, $key, $value);
  }

  // Save our updated map
  $-options: $result !global;
}

/// Remove an option from the configuration map.
///
/// @param {string} $keys...
///   The list of keys to follow and remove from the configuration map.
///
@mixin remove($keys...) {
  $-options: map.deep-remove($-options, $keys...) !global;
}

/// Log to console the entire `$-options` configuration map.
@mixin log() {
  @include debug-map($-options, "Config options map");
}
