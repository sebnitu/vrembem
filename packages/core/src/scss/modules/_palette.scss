@use "sass:map";
@use "sass:meta";

@use "../utilities/get-hs" as *;
@use "../utilities/debug-map" as *;
@use "./config";
@use "./css";

/// The palette variable map where all color variants are stored.
/// @type map
/// @access private
$_palette: ();

/// The map of colors used to build the palette.
/// @type map
$seeds: (
  "primary":   hsl(152 60% 50%),
  "secondary": hsl(214 50% 50%),
  "neutral":   hsl(214 20% 50%),
  "important": hsl(0 80% 50%),
) !default;

/// The default color lightness to use when referencing a color.
/// @type number
$lightness-default: 50 !default;

/// The range of lightness values to build for each color in the palette.
/// @type list
$lightness: 0, 5, 10, 12, 15, 20, 30, 40, 50, 60, 70, 80, 90, 95, 98, 100 !default;

/// Builds the palette map using the values set in `$seeds` and `$lightness` 
/// maps. Is run automatically whenever seeds are altered.
@mixin build() {
  $result: ();
  @each $name, $value in $seeds {
    $result: map.set($result, "#{$name}-hs", get-hs($value));
    $result: map.set($result, "#{$name}", css.reference("palette", "#{$name}-#{$lightness-default}"));
    @each $value in $lightness {
      $result: map.set($result, "#{$name}-#{$value}", hsl(#{css.reference("palette", "#{$name}-hs") $value + '%'}));
    }
  }
  $_palette: $result !global;
}

/// Function to return a palette color. If called with no color name, the entire
/// palette map is returned. The following lightness formats are accepted:
///   $lightness: "seed" - Return the seed value.
///   $lightness: Number - Return the specified lightness CSS var from the 
///     palette map.
///   $lightness: Percentage - Return the hsl value of the color.
///   $alpha: Number - Return the hsl value with an alpha channel of the color.
/// @param {string} $name [null]
///   The color name to return a value for.
/// @param {number | percentage | string} $lightness [$lightness-default]
///   The lightness value of the requested color.
/// @param {number (alpha-value)} $alpha [null]
///   The alpha value of the requested color.
/// @return {Color}
///   Return format depends on the requested value.
@function get($name: null, $lightness: $lightness-default, $alpha: null) {
  // Return the palette map if no name is provided.
  @if not ($name) {
    @return $_palette;
  }

  // If lightness is passed as "seed", return the seed value.
  @else if ($lightness == "seed") {
    @return map.get($seeds, $name);
  }

  // If an alpha value is passed, return hsl with the alpha.
  @else if ($alpha) {
    @return hsl(#{css.reference("palette", "#{$name}-hs") $lightness + ' / ' + $alpha});
  }

  // If the specified lightness value exists in the palette map, return its value.
  @else if (map.has-key($_palette, "#{$name}-#{$lightness}")) {
    @return css.reference("palette", "#{$name}-#{$lightness}");
  }

  // Else return hsl using the provided lightness value.
  @else {
    @return hsl(#{css.reference("palette", "#{$name}-hs") $lightness});
  }
}

/// Set a color to the $seeds map. Can receive single entries of key/value color
/// pairs or a map containing multiple key/value pairs.
/// @param {string | map} $name
///   A name to associate with the provided color, or a map containing key/value
///   color pairs.
/// @param {color} $value [null]
///   The color to associate with the provided key.
@mixin set($name, $value: null) {
  @if (meta.type-of($name) == "map") {
    $seeds: map.merge($seeds, $name) !global;
  }
  @else {
    $seeds: map.set($seeds, $name, $value) !global;
  }
  // Run build since $seeds has been modified.
  @include build();
}

/// Removes colors from the $seeds map.
/// @param {string} $names...
///   A string or list of strings to remove from $seeds map.
@mixin remove($names...) {
  // TODO: Also remove value from $_meta map.
  $seeds: map.remove($seeds, $names...) !global;
  // Run build since $seeds has been modified.
  @include build();
}

/// Outputs custom properties built from the provided seeds and lightness range.
/// @param {map} $seeds [$seeds]
///   Base colors to build the palette from.
@mixin output($strategy: config.get("output-strategy")) {
  :root {
    // Output custom properties if they have been referenced.
    @include css.maybeOutput("palette", $_palette, $strategy);
  }
}

/// TODO: Documentation
@mixin log() {
  @include debug-map($_palette, "Palette custom properties");
}

// Initialize the palette map.
@include build();
