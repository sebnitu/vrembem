@use "sass:map";
@use "sass:meta";

@use "../utilities/get-hs" as *;
@use "../utilities/debug-map" as *;
@use "./config";
@use "./usage";
@use "./css";

/// The map of colors used to build the palette.
/// @type map
/// @access private
$_seeds: (
  "primary":   hsl(152 60% 50%),
  "secondary": hsl(214 50% 50%),
  "neutral":   hsl(214 20% 50%),
  "important": hsl(0 80% 50%),
);

/// The default color lightness to use when referencing a color.
/// @type number
$lightness-default: 50 !default;

/// The range of lightness values to build for each color in the palette.
/// @type list
$lightness-range: 0, 5, 10, 12, 15, 20, 30, 40, 50, 60, 70, 80, 90, 95, 98, 100 !default;

/// Builds a palette map using values set in `$_seeds` and `$lightness-range`.
/// Is run automatically whenever seeds map is modified.
/// @param {map} $seeds [$_seeds]
///   The seeds to generate a palette map from.
/// @param {list} $range [$lightness-range]
///   A list of lightness values to generate the palette map from.
/// @param {number} $default [$lightness-default]
///   The default lightness value. Used to generate the shorthand property.
@function build($seeds: $_seeds, $range: $lightness-range, $default: $lightness-default) {
  @if usage.remove("palette") {
    $result: ();
    @each $name, $value in $seeds {
      $result: map.set($result, "#{$name}-hs", get-hs($value));
      @if ($default) {
        $result: map.set($result, "#{$name}", css.reference("palette", "#{$name}-#{$default}"));
      }
      @each $value in $range {
        $result: map.set($result, "#{$name}-#{$value}", hsl(#{css.reference("palette", "#{$name}-hs") $value + '%'}));
      }
    }
    @return $result;
  }
}

/// The palette variable map where all color variants are stored.
/// @type map
/// @access private
$_palette: build();

/// Function to return a palette color. If called with no color name, the entire
/// palette map is returned. The following lightness formats are accepted:
///   $lightness: "seed" - Return the seed value.
///   $lightness: Number - Return the specified lightness CSS var from the 
///     palette map.
///   $lightness: Percentage - Return the hsl value of the color.
///   $alpha: Number - Return the hsl value with an alpha channel of the color.
/// @param {string} $name [null]
///   The color name to return a value for.
/// @param {any} $query [$lightness-default]
///   The type of value to return. Can be "seed" to return the initial seed
///   value or a specific lightness value.
/// @param {number (alpha-value)} $alpha [null]
///   The alpha value of the requested color.
/// @return {Color}
///   Return format depends on the requested value.
@function get($name: null, $query: $lightness-default, $alpha: null) {
  // Return the palette map if no name is provided.
  @if not ($name) {
    // Build the `$_palette` map before output.
    @return $_palette;
  }

  // If query is passed as "seed", return the seed value.
  @else if ($name == "seeds") {
    @return $_seeds;
  }

  // If query is passed as "seed", return the seed value.
  @else if ($query == "seed") {
    @return map.get($_seeds, $name);
  }

  // If an alpha value is passed, return hsl with the alpha.
  @else if ($alpha) {
    @return hsl(#{css.reference("palette", "#{$name}-hs") $query + ' / ' + $alpha});
  }

  // If the specified query value exists in the palette map, return its value.
  @else if (map.has-key($_palette, "#{$name}-#{$query}")) {
    @return css.reference("palette", "#{$name}-#{$query}");
  }

  // Else return hsl using the provided query value.
  @else {
    @return hsl(#{css.reference("palette", "#{$name}-hs") $query});
  }
}

/// Set a color to the `$_seeds` map. Can receive single entries of key/value color
/// pairs or a map containing multiple key/value pairs.
/// @param {string | map} $name
///   A name to associate with the provided color, or a map containing key/value
///   color pairs.
/// @param {color} $value [null]
///   The color to associate with the provided key.
@mixin set($name, $value: null) {
  @if (meta.type-of($name) == "map") {
    $_seeds: map.merge($_seeds, $name) !global;
  }
  @else {
    $_seeds: map.set($_seeds, $name, $value) !global;
  }
  // Run build since `$_seeds` has been modified.
  $_palette: build() !global;
}

/// Removes colors from the `$_seeds` map.
/// @param {string} $names...
///   A string or list of strings to remove from `$_seeds` map.
@mixin remove($names...) {
  $_seeds: map.remove($_seeds, $names...) !global;
  // Run build since `$_seeds` has been modified.
  $_palette: build() !global;
}

/// Update the `$_palette` map by running build() with passed params.
@mixin update() {
  $_palette: build($_seeds, $lightness-range, $lightness-default) !global;
}

/// Outputs custom properties built from the provided seeds and lightness range.
/// @param {map} $strategy
///   The output strategy to apply.
@mixin output($strategy: config.get("output-strategy")) {
  :root {
    // Output custom properties via usage output.
    @include usage.output(
      meta.get-mixin("define", "css"), "palette", $_palette, $strategy
    );
  }
}

/// Log to console the entire `$_palette` map.
@mixin log() {
  @include debug-map($_palette, "Palette custom properties");
}
