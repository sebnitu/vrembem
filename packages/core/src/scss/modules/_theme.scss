@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../variables/prefix";
@use "../utilities/remove-nth" as *;
@use "./css";
@use "./palette";

/// Prefix for theme classes.
/// @type string
/// @alias prefix.$theme
/// @access private
$_t: prefix.$theme;

/// Set the default theme. Should match an existing theme in the $_themes map.
/// @type string
$default: "light" !default;

/// CSS selector to use for outputting the root CSS custom properties.
/// @type string
$root-selector: ":root, .#{$_t}root" !default;

/// Defines the default output strategy for output mixins.
/// @type string
$output-strategy: "used";

/// Stores the theme maps used to build theme classes and CSS custom property
/// output. Each entry should contain the name of the theme along with all its
/// custom properties and values. Themes may also contain component maps for
/// component specific theming. Optionally set `color-scheme` property for
/// outputting the `color-scheme: (light | dark);` property.
/// @type map
/// @prop {map} name
///   The name of the theme (key) and a map of property/value pairs.
/// @prop {any} name.prop
///   The name of the custom property and its value.
/// 
/// @example scss
///   // Themes map with a high-contrast theme.
///   "high-contrast": (
///     "background": white,
///     "foreground": black,
///     ...
///   );
///
/// @example scss
///   // Themes map with a component theme.
///   "dark": (
///     "background": teal,
///     "foreground": pink,
///     ...
///     "button": (
///       "background": gray,
///       "foreground": blue,
///       ...
///     )
///   );
///
/// TODO: Update documentation
/// @access private
$_themes: (
  "core": (
    "light": (
      "background": palette.get("neutral", 100),
      "background-dark": palette.get("neutral", 98),
      "background-darker": palette.get("neutral", 95),
      "background-alt": palette.get("secondary", 60%, 10%),
      "background-hover": rgb(0 0 0 / 5%),
      "background-focus": rgb(0 0 0 / 5%),
      "background-active": rgb(0 0 0 / 10%),
      "foreground": palette.get("neutral", 20),
      "foreground-light": palette.get("neutral", 40),
      "foreground-lighter": palette.get("neutral", 60),
      "foreground-alt": palette.get("secondary", 50),
      "border-color": rgb(0 0 0 / 10%),
      "border-color-dark": rgb(0 0 0 / 20%),
      "border-color-darker": rgb(0 0 0 / 30%),
      "shadow-color": palette.get("neutral", 20%, 20%),
      "focus-visible": palette.get("primary"),
      "color-scheme": light
    ),
    "dark": (
      "background": palette.get("neutral", 10),
      "background-dark": palette.get("neutral", 12),
      "background-darker": palette.get("neutral", 15),
      "background-alt": palette.get("secondary", 70%, 10%),
      "background-hover": rgb(255 255 255 / 5%),
      "background-focus": rgb(255 255 255 / 5%),
      "background-active": rgb(255 255 255 / 1%),
      "foreground": palette.get("neutral", 90),
      "foreground-light": palette.get("neutral", 70),
      "foreground-lighter": palette.get("neutral", 50),
      "foreground-alt": palette.get("secondary", 60),
      "border-color": rgb(255 255 255 / 10%),
      "border-color-dark": rgb(255 255 255 / 20%),
      "border-color-darker": rgb(255 255 255 / 30%),
      "shadow-color": palette.get("neutral", 0%, 20%),
      "focus-visible": palette.get("primary"),
      "color-scheme": dark
    )
  )
) !default;

/// Function to return the CSS variable with fallback of an entry within the
/// $_themes map. Requested property must exist in the default theme.
/// @param {string} $args...
///   The property key to return.
/// @return {function}
///   The var() CSS function with the value of the requested custom property.
/// 
/// @example scss
///   // Return the background var() from the default theme.
///   background: theme.get("background");
/// 
/// @example scss
///   // Return the background var() from the card default theme.
///   background: theme.get("card", "background");
///
/// TODO: Update docs
@function get($module, $prop: null) {
  @if not ($prop) {
    $prop: $module;
    $module: "core";
  }

  @if not map.has-key($_themes, $module, $default) {
    @error "Module map has not been set: \"#{$module}\"";
  }

  @if not map.has-key($_themes, $module, $default, $prop) {
    @debug "CHECK" $module ">" $default ">" $prop;
    @debug map.get($_themes, $module, $default);
    @error "Property does not exist in themes map: #{$module} > #{$default} > #{$prop}";
  }

  // Return the CSS custom property reference.
  @return css.reference($prop, $module: $module);
}

/// Set a new or modify an existing property value in the $_themes map.
/// @param {string} $args...
///   The property keys and value to set.
/// 
/// @example scss
///   // Set the foreground custom property for the dark theme.
///   @include theme.set("dark", "foreground", blue);
///
@mixin set($module, $theme, $prop, $value: null) {
  @if not ($value) and (meta.type-of($prop) != "map") {
    $value: $prop;
    $prop: $theme;
    $theme: $module;
    $module: "core";
  }

  // If the value is replacing a map, handle the deep-merge.
  @if (meta.type-of($prop) == "map") {
    @each $propKey, $propValue in $prop {
      $_themes: map.set($_themes, $module, $theme, $propKey, $propValue) !global;
    }
  }
  
  // Otherwise, just add the value using the $args list.
  @else {
    $_themes: map.set($_themes, $module, $theme, $prop, $value) !global;
  }
}

/// Remove a custom property in the $_themes map.
/// @param {string} $args...
///   The property key to remove.
/// 
/// @example scss
///   // Remove the border-color property from the dark theme.
///   @include theme.remove("dark", "border-color");
///
@mixin remove($args...) {
  // TODO: Also remove value from $_meta map.
  $_themes: map.deep-remove($_themes, $args...) !global;
}

/// Output all the custom properties and values of a theme or a component theme.
/// @param {string} $theme [$default]
///   The theme name to output.
/// @param {string} $component [null]
///   The name of component themes to output.
/// 
/// @example scss
///   // Output the custom properties for default theme.
///   @include theme.output-theme();
/// 
/// @example scss
///   // Output the custom properties for dark theme.
///   @include theme.output-theme("dark");
/// 
/// @example scss
///   // Output the custom properties for light theme of the button component.
///   @include theme.output-theme("light", "button");
///
@mixin output-theme($module, $theme: $default, $strategy: $output-strategy) {
  // Check if module exists in themes map.
  @if not map.has-key($_themes, $module) {
    @error "Module \"#{$module}\" has not been set in themes map";
  }

  // Check if the theme exists for the module in themes map.
  @if not map.has-key($_themes, $module, $theme) {
    @error "Theme \"#{$theme}\" does not exist for \"#{$module}\" module";
  }
  
  // Save a copy of the module map from themes.
  $moduleMap: map.get($_themes, $module, $theme);

  // Get a reference of the color scheme property and remove it from the map.
  $color-scheme: map.get($moduleMap, "color-scheme");
  $moduleMap: map.remove($moduleMap, "color-scheme");

  // Output custom properties of they've been referenced.
  @include css.maybeOutput($moduleMap, $module, $strategy);

  // If a color scheme was stored, output it below everything else.
  @if $color-scheme {
    color-scheme: #{$color-scheme};
  }
}

/// Output all the custom properties and values of every theme in the provided 
/// $_themes map or pass a specific module name to output. Each theme will be 
/// wrapped in their own selector using the set theme prefix and theme key. The
/// $root-selector is used to wrap the $default. Themes named "light" or
/// "dark" are also output in the `prefers-color-scheme` media query.
/// @param {string} $module [null]
///   The name of module themes to output.
///
/// @example scss
///   @include theme.output();
///
/// @example scss
///   // Output the custom properties of the notice module.
///   @include theme.output("notice");
///
/// TODO: Update documentation.
@mixin output($module: "core", $strategy: $output-strategy) {
  // Output the default theme in the root selector.
  #{$root-selector}, .#{$_t}#{$default} {
    @include output-theme($module, $default, $strategy);
  }

  #{$root-selector} {
    // If the default them is not light mode, output the prefers light media query.
    @if $default != 'light' {
      @media (prefers-color-scheme: light) {
        @include output-theme($module, "light", $strategy);
      }
    }
    
    // If the default them is not dark mode, output the prefers dark media query.
    @if $default != 'dark' {
      @media (prefers-color-scheme: dark) {
        @include output-theme($module, "dark", $strategy);
      }
    }
  }
  
  // Run the output function on all module themes.
  @each $key, $value in map.get($_themes, $module) {
    @if not ($key == $default) {
      .#{$_t}#{$key} {
        @include output-theme($module, $key, $strategy);
      }
    }
  }
}
