@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../variables/prefix";
@use "./css";
@use "./palette";
@use "../utilities/remove-nth" as *;

/// Prefix for theme classes.
/// @type string
/// @alias prefix.$theme
/// @access private
$_t: prefix.$theme;

/// Set the default theme. Should match an existing theme in the $themes map.
/// @type string
$default: "light" !default;

/// CSS selector to use for outputting the root CSS custom properties.
/// @type string
$root-selector: ":root, .#{$_t}root" !default;

/// Stores the theme maps used to build theme classes and CSS custom property
/// output. Each entry should contain the name of the theme along with all its
/// custom properties and values. Themes may also contain component maps for
/// component specific theming. Optionally set `color-scheme` property for
/// outputting the `color-scheme: (light | dark);` property.
/// @type map
/// @prop {map} name
///   The name of the theme (key) and a map of property/value pairs.
/// @prop {any} name.prop
///   The name of the custom property and its value.
/// 
/// @example scss
///   // Themes map with a high-contrast theme.
///   "high-contrast": (
///     "background": white,
///     "foreground": black,
///     ...
///   );
///
/// @example scss
///   // Themes map with a component theme.
///   "dark": (
///     "background": teal,
///     "foreground": pink,
///     ...
///     "button": (
///       "background": gray,
///       "foreground": blue,
///       ...
///     )
///   );
///
$themes: (
  "light": (
    "background": palette.get("neutral", 100),
    "background-dark": palette.get("neutral", 98),
    "background-darker": palette.get("neutral", 95),
    "background-alt": palette.get("secondary", 60%, 10%),
    "background-hover": rgb(0 0 0 / 5%),
    "background-focus": rgb(0 0 0 / 5%),
    "background-active": rgb(0 0 0 / 10%),
    "foreground": palette.get("neutral", 20),
    "foreground-light": palette.get("neutral", 40),
    "foreground-lighter": palette.get("neutral", 60),
    "foreground-alt": palette.get("secondary", 50),
    "border-color": rgb(0 0 0 / 10%),
    "border-color-dark": rgb(0 0 0 / 20%),
    "border-color-darker": rgb(0 0 0 / 30%),
    "shadow-color": palette.get("neutral", 20%, 20%),
    "focus-visible": palette.get("primary"),
    "color-scheme": light
  ),
  "dark": (
    "background": palette.get("neutral", 10),
    "background-dark": palette.get("neutral", 12),
    "background-darker": palette.get("neutral", 15),
    "background-alt": palette.get("secondary", 70%, 10%),
    "background-hover": rgb(255 255 255 / 5%),
    "background-focus": rgb(255 255 255 / 5%),
    "background-active": rgb(255 255 255 / 1%),
    "foreground": palette.get("neutral", 90),
    "foreground-light": palette.get("neutral", 70),
    "foreground-lighter": palette.get("neutral", 50),
    "foreground-alt": palette.get("secondary", 60),
    "border-color": rgb(255 255 255 / 10%),
    "border-color-dark": rgb(255 255 255 / 20%),
    "border-color-darker": rgb(255 255 255 / 30%),
    "shadow-color": palette.get("neutral", 0%, 20%),
    "focus-visible": palette.get("primary"),
    "color-scheme": dark
  )
) !default;

/// Function to return the CSS variable with fallback of an entry within the
/// $themes map. Requested property must exist in the default theme.
/// @param {string} $args...
///   The property key to return.
/// @return {function}
///   The var() CSS function with the value of the requested custom property.
/// 
/// @example scss
///   // Return the background var() from the default theme.
///   background: theme.get("background");
/// 
/// @example scss
///   // Return the background var() from the card default theme.
///   background: theme.get("card", "background");
///
@function get($args...) {
  @if map.has-key($themes, $default, $args...) {
    // Initial prop value and override if two arguments are passed.
    $prop: #{list.nth($args, 1)};
    @if list.length($args) == 2 {
      $prop: #{list.nth($args, 1)}-#{list.nth($args, 2)};
    }

    // Return the CSS variable.
    @return css.reference($prop);
  } @else {
    @error "Property does not exist in the default theme: (#{$default}, #{$args})";
  }
}

/// Set a new or modify an existing property value in the $themes map.
/// @param {string} $args...
///   The property keys and value to set.
/// 
/// @example scss
///   // Set the foreground custom property for the dark theme.
///   @include theme.set("dark", "foreground", blue);
///
@mixin set($args...) {
  // Get the last item in the $args list.
  $value: list.nth($args, -1);

  // Get the props list.
  $props: remove-nth($args, -1);

  // If the value is replacing a map, handle the deep-merge.
  @if (meta.type-of($value) == "map") {
    $new: $value;
    $old: map.get($themes, $props...);
    @if (meta.type-of($old) == "map") {
      $new: map.deep-merge($old, $value);
    }
    $themes: map.set($themes, list.append($props, $new)...) !global;
  }
  
  // Otherwise, just add the value using the $args list.
  @else {
    $themes: map.set($themes, $args...) !global;
  }
}

/// Remove a custom property in the $themes map.
/// @param {string} $args...
///   The property key to remove.
/// 
/// @example scss
///   // Remove the border-color property from the dark theme.
///   @include theme.remove("dark", "border-color");
///
@mixin remove($args...) {
  $themes: map.deep-remove($themes, $args...) !global;
}

/// Output all the custom properties and values of a theme or a component theme.
/// @param {string} $theme [$default]
///   The theme name to output.
/// @param {string} $component [null]
///   The name of component themes to output.
/// 
/// @example scss
///   // Output the custom properties for default theme.
///   @include theme.output-theme();
/// 
/// @example scss
///   // Output the custom properties for dark theme.
///   @include theme.output-theme("dark");
/// 
/// @example scss
///   // Output the custom properties for light theme of the button component.
///   @include theme.output-theme("light", "button");
///
@mixin output-theme($theme: $default, $component: null) {
  // Check if the key exists on the provided $themes map.
  @if map.has-key($themes, $theme) {

    // Initial color scheme variable.
    $color-scheme: null;

    // Initial themes map and override if component is passed.
    $map: map.get($themes, $theme);
    @if $component {
      $map: map.get($themes, $theme, $component);
    }

    // If a map exists...
    @if $map {
      // Loop through all theme entries and output their custom properties.
      @each $key, $value in $map {
        // Check if a value exists and if it's not a map.
        @if $value and meta.type-of($value) != 'map' {
          // Initial prop value and override if two arguments are passed.
          $prop: $key;
          @if $component {
            $prop: "#{$component}-#{$key}";
          }

          // Output property or store the color scheme.
          @if $key != 'color-scheme' {
            @if $value != () {
              @include css.define($prop, $value);
            }
          } @else {
            $color-scheme: #{$value};
          }
        }
      }
    }

    // If a color scheme was stored, output it below everything else.
    @if $color-scheme {
      color-scheme: #{$color-scheme};
    }
  } @else {
    @error "Theme does not exist in themes map: #{$theme}";
  }
}

/// Output all the custom properties and values of every theme in the provided 
/// $themes map or pass a specific component name to output. Each theme will be 
/// wrapped in their own selector using the set theme prefix and theme key. The
/// $root-selector is used to wrap the $default. Themes named "light" or
/// "dark" are also output in the `prefers-color-scheme` media query.
/// @param {string} $component [null]
///   The name of component themes to output.
///
/// @example scss
///   @include theme.output();
///
/// @example scss
///   // Output the custom properties of the notice component.
///   @include theme.output("notice");
///
@mixin output($component: null) {
  // Output the default theme in the root selector.
  #{$root-selector}, .#{$_t}#{$default} {
    @include output-theme($default, $component);
  }

  #{$root-selector} {
    // If the default them is not light mode, output the prefers light media query.
    @if $default != 'light' {
      @media (prefers-color-scheme: light) {
        @include output-theme("light", $component);
      }
    }
    
    // If the default them is not dark mode, output the prefers dark media query.
    @if $default != 'dark' {
      @media (prefers-color-scheme: dark) {
        @include output-theme("dark", $component);
      }
    }
  }
  
  // Run the output function on all 
  @each $key, $value in $themes {
    @if not ($key == $default) {
      .#{$_t}#{$key} {
        @include output-theme($key, $component);
      }
    }
  }
}
