@use "sass:map";
@use "sass:meta";

@use "./functions" as fun;
@use "./prefix";

$_v: prefix.$variable;
$_palette: ();

$seeds: (
  "primary": hsl(152, 60%, 50%),
  "secondary": hsl(214, 50%, 50%),
  "neutral": hsl(214, 20%, 50%),
  "important": hsl(0, 80%, 50%),
) !default;

$lightness: 0, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 95, 98, 100 !default;
$default-lightness: 50 !default;

@function _build-range-map($key, $color) {
  $map: ();
  @each $value in $lightness {
    $map: map.set(
      $map,
      $value,
      var(--#{$_v}#{$key}-#{$value}, hsl(fun.get-hs($color)..., $lightness: $value * 1%))
    );
  }
  @return $map;
}

@mixin build() {
  @each $key, $value in $seeds {
    $_palette: map.set($_palette, $key, _build-range-map($key, $value)) !global;
  }
}

@function get($key: null, $value: $default-lightness) {
  @if not ($key) {
    @return $_palette;
  }
  @else if ($value == "seed") {
    @return map.get($seeds, $key);
  }
  @else if ($value == "hs") {
    @return fun.get-hs(map.get($seeds, $key));
  }
  @else if ($value == "var") {
    @return var(--#{$_v}#{$key}-hs, fun.get-hs(map.get($seeds, $key)));
  }
  @else {
    @return map.get($_palette, $key, $value);
  }
}

@mixin add($key, $value: null) {
  @if (meta.type-of($key) == "map") {
    $seeds: map.merge($seeds, $key) !global;
  }
  @else {
    $seeds: map.set($seeds, $key, $value) !global;
  }
  @include build();
}

@mixin remove($keys...) {
  $seeds: map.remove($seeds, $keys...) !global;
  @include build();
}

@mixin output() {
  @each $key, $seed in $seeds {
    --#{$_v}#{$key}-hs: #{fun.get-hs($seed)};
    --#{$_v}#{$key}: var(--#{$_v}#{$key}-#{$default-lightness});
    @each $value in $lightness {
      --#{$_v}#{$key}-#{$value}: hsl(var(--#{$_v}#{$key}-hs), #{$value + '%'});
    }
  }
}

@include build();
