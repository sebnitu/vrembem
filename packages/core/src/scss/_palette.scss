@use "sass:map";
@use "sass:meta";

@use "./helpers/get-hs" as *;
@use "./prefix";

/// Set the prefix for theme classes.
/// @access private
/// @alias prefix.$variable
/// @type String
$_v: prefix.$variable;

/// The palette variable where all color variants are stored.
/// @access private
/// @type Map
$_palette: ();

/// The map of colors used to build the palette.
/// @type Map
$seeds: (
  "primary":   hsl(152 60% 50%),
  "secondary": hsl(214 50% 50%),
  "neutral":   hsl(214 20% 50%),
  "important": hsl(0 80% 50%),
) !default;

/// The default color lightness to use when referencing a color.
/// @type Number
$lightness-default: 50 !default;

/// The range of lightness values to build for each color in the palette.
/// @type List
$lightness: 0, 5, 10, 12, 15, 20, 30, 40, 50, 60, 70, 80, 90, 95, 98, 100 !default;

/// Builds the palette map using the values set in $seeds and $lightness maps.
/// @require {Variable} $seeds
/// @require {Variable} $lightness
/// @require {Function} _build-range-map
@mixin build() {
  @each $key, $value in $seeds {
    $map: ();
    @each $value in $lightness {
      $map: map.set($map, $value, var(--#{$_v}#{$key}-#{$value}));
    }
    $_palette: map.set($_palette, $key, $map) !global;
  }
}

/// Function to return a palette color. If called with no color key, the entire
/// palette map is returned. The following lightness formats are accepted:
///   $lightness: "seed" - Return the seed value.
///   $lightness: Number - Return the specified lightness CSS var from the palette map.
///   $lightness: Percentage - Return the hsl value of the color.
///   $alpha: Number - Return the hsl value with an alpha channel of the color.
/// @param {String} $key [null] - The color key to return a value for.
/// @param {Number | Percentage | String} $lightness [$lightness-default] - The lightness value of the requested color.
/// @param {Number (alpha-value)} $alpha [null] - The alpha value of the requested color.
/// @require {Variable} $seeds
/// @return {Color} - Return format depends on the requested value.
@function get($key: null, $lightness: $lightness-default, $alpha: null) {
  // If key is null, return the palette.
  @if not ($key) {
    @return $_palette;
  }

  // If lightness is passed as "seed", return the seed value.
  @else if ($lightness == "seed") {
    @return map.get($seeds, $key);
  }

  // If an alpha value is passed, return hsl with the alpha.
  @else if ($alpha) {
    @return hsl(var(--#{$_v}#{$key}-hs) #{$lightness + ' / ' + $alpha});
  }

  // If the specified lightness value exists in the palette map, return its value.
  @else if (map.has-key($_palette, $key, $lightness)) {
    @return map.get($_palette, $key, $lightness);
  }

  // Else return hsl using the provided lightness value.
  @else {
    @return hsl(var(--#{$_v}#{$key}-hs) $lightness);
  }
}

/// Set a color to the $seeds map. Can receive single entries of key/value color
/// pairs or a map containing multiple key/value pairs.
/// @output N/A
/// @param {String | map} $key - A key to associate with the provided color, or a map containing key/value color pairs.
/// @param {Color} $value [null] - The color to associate with the provided key.
/// @require {Variable} $seeds
@mixin set($key, $value: null) {
  @if (meta.type-of($key) == "map") {
    $seeds: map.merge($seeds, $key) !global;
  }
  @else {
    $seeds: map.set($seeds, $key, $value) !global;
  }
  // Run build since $seeds has been modified.
  @include build();
}

/// Removes colors from the $seeds map.
/// @output N/A
/// @param {String} $keys... - A string or list of strings to remove from $seeds map.
/// @require {Variable} $seeds
@mixin remove($keys...) {
  $seeds: map.remove($seeds, $keys...) !global;
  // Run build since $seeds has been modified.
  @include build();
}

/// Outputs custom properties built from the provided seeds and lightness range.
/// @example - Output the color palette to the :root pseudo-class.
///   :root {
///     @include palette.output();
///   }
/// @output Custom properties of the palette.
/// @param {Map} $seeds [$seeds] - Base colors to build the palette from.
/// @param {Map} $lightness [$lightness] - Lightness range to build for each color.
/// @param {Variable} $lightness-default [$lightness-default] - Default lightness value to use for colors.
@mixin output($seeds: $seeds) {
  @each $key, $seed in $seeds {
    --#{$_v}#{$key}-hs: #{get-hs($seed)};
    --#{$_v}#{$key}: var(--#{$_v}#{$key}-#{$lightness-default});
    @each $value in $lightness {
      --#{$_v}#{$key}-#{$value}: hsl(var(--#{$_v}#{$key}-hs) #{$value + '%'});
    }
  }
}

// Run the build to build the initial palette map.
@include build();
