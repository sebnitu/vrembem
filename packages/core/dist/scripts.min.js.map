{
  "version": 3,
  "sources": [
    "../../node_modules/browser-pack/_prelude.js",
    "dist/scripts.min.js",
    "index.js",
    "src/breakpoints.json",
    "src/utility.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;aCFA,IAAA,SAAA,uBAAA,QAAA;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;2FCPA,IAAA,aAAA,uBAAA,QAAA,6lBAeuB,GACnB,OAAO,aAAA,QAAY,oCAUL,EAAI,GAGlB,OAFA,EAAM,EAAG,QAAW,EAAK,KAAK,QAAQ,IACtC,EAAI,KAAK,QAAQ,IACR,KAAM,SAAU,GACvB,IAAI,GAAM,EAMV,OALA,EAAG,QAAQ,SAAC,GACN,EAAG,UAAU,SAAS,KACxB,GAAM,KAGH,qCAUK,EAAI,GAClB,EAAM,EAAG,QAAW,EAAK,KAAK,QAAQ,GACtC,EAAI,KAAK,QAAQ,GACjB,EAAG,QAAQ,SAAC,GACV,EAAE,QAAQ,SAAC,GACT,EAAG,UAAU,IAAI,2CAWJ,EAAI,GACrB,EAAM,EAAG,QAAW,EAAK,KAAK,QAAQ,GACtC,EAAI,KAAK,QAAQ,GACjB,EAAG,QAAQ,SAAC,GACV,EAAE,QAAQ,SAAC,GACT,EAAG,UAAU,OAAO,2CAWP,EAAI,GACrB,EAAM,EAAG,QAAW,EAAK,KAAK,QAAQ,GACtC,EAAI,KAAK,QAAQ,GACjB,EAAG,QAAQ,SAAC,GACV,EAAE,QAAQ,SAAC,GACT,EAAG,UAAU,OAAO,uCAaX,EAAI,GACjB,MAAQ,EAAK,EAAG,iBAAmB,KAAK,SAAS,EAAI,IACrD,OAAO,kCAUM,GAEb,IAAI,EAAQ,GAQZ,OANI,MAAM,QAAQ,GAChB,EAAQ,EAER,EAAM,KAAK,GAGN,gJAaP,IAAI,EAAW,GACX,GAAO,EACP,EAAI,EACJ,EAAS,UAAU,OAEiC,qBAAnD,OAAO,UAAU,SAAS,KAAM,UAAU,MAC7C,EAAO,UAAU,GACjB,KAeF,IAZA,IAAI,EAAQ,SAAE,GACZ,IAAM,IAAI,KAAQ,EACX,OAAO,UAAU,eAAe,KAAM,EAAK,KACzC,GAAsD,oBAA9C,OAAO,UAAU,SAAS,KAAK,EAAI,IAC9C,EAAS,GAAQ,QAAQ,EAAM,EAAS,GAAO,EAAI,IAEnD,EAAS,GAAQ,EAAI,KAMrB,EAAI,EAAQ,IAAM,CAExB,EADU,UAAU,IAItB,OAAO",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "\"use strict\";\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMubWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJmaWxlIjoiL1VzZXJzL3NlYm5pdHUvZGV2L3ZyZW1iZW0vcGFja2FnZXMvY29yZS9kaXN0L3NjcmlwdHMubWluLmpzIn0=",
    "import u from \"./src/utility\"\n",
    "module.exports={\n  \"xs\": \"480\",\n  \"sm\": \"620\",\n  \"md\": \"760\",\n  \"lg\": \"990\",\n  \"xl\": \"1380\"\n}\n",
    "import breakpoints from \"./breakpoints\"\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nexport default class {\n\n  /**\n   * Get and output a breakpoint using it's key found in config.json\n   * ---\n   * @param {String} key - The key to search for in the breakpoints object\n   * @returns {String} - The pixel value of the breakpoint as a string\n   */\n  static getBreakpoint(key) {\n    return breakpoints[key]\n  }\n\n  /**\n   * Checks if an element has a class or not\n   * ---\n   * @param {Node} el - Element(s) to check class(es) on\n   * @param {String || Array} c - Class(es) to check\n   * @returns {Boolean} - Returns true if class exists, otherwise false\n   */\n  static hasClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    return c.some( function (c) {\n      let has = false\n      el.forEach((el) => {\n        if (el.classList.contains(c)) {\n          has = true\n        }\n      })\n      return has\n    })\n  }\n\n  /**\n   * Adds a class or classes to an element\n   * ---\n   * @param {Node} el - Element(s) to add class(es) on\n   * @param {String || Array} c - Class(es) to add\n   */\n  static addClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.add(c)\n      })\n    })\n  }\n\n  /**\n   * Remove a class or classes from an element\n   * ---\n   * @param {Node} el - Element(s) to remove class(es) from\n   * @param {String || Array} c - Class(es) to remove\n   */\n  static removeClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.remove(c)\n      })\n    })\n  }\n\n  /**\n   * Toggle a class or classes on an element\n   * ---\n   * @param {Node} el - Element(s) to toggle class(es) on\n   * @param {String || Array} c - Class(es) to toggle\n   */\n  static toggleClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.toggle(c)\n      })\n    })\n  }\n\n  /**\n   * Find the closest parent element based on class. This is different from the\n   * native .closest() method in that it doesn't check the current element.\n   * ---\n   * @param {Node} el - Element to start search on\n   * @param {String || Array} c - Class(es) to check for\n   * @return {Node} - Closest parent element\n   */\n  static closest(el, c) {\n    while ((el = el.parentElement) && !this.hasClass(el, c))\n    return el\n  }\n\n  /**\n   * Converts a string or object to an array. If an array is passed, it's\n   * returned as is. Anything else is returned as an array.\n   * ---\n   * @param {Object} item - String or object to convert to an array\n   * @return {Array} - Return the converted array\n   */\n  static toArray(item) {\n\n    let array = []\n\n    if (Array.isArray(item)) {\n      array = item\n    } else {\n      array.push(item)\n    }\n\n    return array\n  }\n\n  /**\n   * Merge two or more objects. Returns a new object. Set the first argument\n   * to `true` for a deep or recursive merge.\n   * ---\n   * @param {Boolean} [Optional] - If true, do a deep (or recursive) merge\n   * @param {Object} - The objects to merge together; each overriding the next\n   * @returns {Object} - Merged values of defaults and options\n   */\n  static extend() {\n\n    let extended = {}\n    let deep = false\n    let i = 0\n    let length = arguments.length\n\n    if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\n      deep = arguments[0]\n      i++\n    }\n\n    let merge = ( obj ) => {\n      for ( let prop in obj ) {\n        if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {\n          if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {\n            extended[prop] = extend( true, extended[prop], obj[prop] )\n          } else {\n            extended[prop] = obj[prop]\n          }\n        }\n      }\n    }\n\n    for ( ; i < length; i++ ) {\n      let obj = arguments[i]\n      merge(obj)\n    }\n\n    return extended\n  }\n\n}\n"
  ]
}