@use "@vrembem/core";
@use "./variables" as var;

#{core.bem("button")} {
  position: relative;
  display: inline-flex;
  gap: core.css("button-gap");
  align-items: center;
  justify-content: center;
  min-width: core.css("button-size");
  height: core.css("button-size");
  padding: core.css("button-padding");
  transition-property: core.css("button-transition-property");
  transition-duration: core.css("button-transition-duration");
  transition-timing-function: core.css("button-transition-timing-function");
  outline: none;
  border: core.css("button-border-width") solid core.css("button-border-color");
  border-radius: core.css("button-border-radius");
  background: core.css("button-background");
  background-clip: border-box;
  box-shadow: core.css("button-box-shadow");
  color: core.css("button-foreground");
  font-family: inherit;
  font-size: core.css("button-font-size");
  font-weight: core.css("button-font-weight");
  line-height: core.css("button-line-height");
  text-decoration: none;
  white-space: nowrap;
  cursor: pointer;

  &:disabled:not(.is-loading) {
    opacity: core.css("button-disabled-opacity");
    pointer-events: none;
  }

  &:hover,
  &:focus-visible {
    border-color: core.css("button-border-color-hover");
    background-color: core.css("button-background-hover");
    box-shadow: core.css("button-box-shadow");
    color: core.css("button-foreground-hover");
  }

  &:focus-visible {
    box-shadow: core.css("button-box-shadow-focus");
  }

  &:active {
    border-color: core.css("button-border-color-active");
    background-color: core.css("button-background-active");
    box-shadow: core.css("button-box-shadow-active");
    color: core.css("button-foreground-active");
  }

  &.is-loading {
    color: transparent !important;
    pointer-events: none;

    &::after {
      @include core.size(core.css("button-loading-size"));
      content: "";
      position: absolute;
      top: calc(50% - calc(core.css("button-loading-size") * 0.5));
      left: calc(50% - calc(core.css("button-loading-size") * 0.5));
      animation: spin core.css("button-loading-animation-duration") infinite core.css("button-loading-animation-timing-function");
      border: core.css("button-loading-border");
      border-radius: core.$border-radius-circle;
      border-color: core.css("button-loading-border-color") core.css("button-loading-border-color") transparent transparent;
    }
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}
