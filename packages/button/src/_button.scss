@use "@vrembem/core";
@use "@vrembem/core/css";
@use "./variables" as var;

#{core.bem("button")} {
  position: relative;
  display: inline-flex;
  gap: css.get("button", "gap");
  align-items: center;
  justify-content: center;
  min-width: css.get("button", "size", var.$size);
  min-height: css.get("button", "size", var.$size);
  padding: css.get("button", "padding", var.$padding);
  transition-property: css.get("button", "transition-property");
  transition-duration: css.get("button", "transition-duration");
  transition-timing-function: css.get("button", "transition-timing-function");
  outline: none;
  border: css.get("button", "border-width", var.$border-width) solid css.get("button", "border-color");
  border-radius: css.get("button", "border-radius", var.$border-radius);
  background: css.get("button", "background");
  background-clip: border-box;
  box-shadow: css.get("button", "box-shadow");
  color: css.get("button", "foreground");
  font-family: inherit;
  font-size: css.get("button", "font-size", var.$font-size);
  font-weight: inherit;
  line-height: css.get("button", "line-height", var.$line-height);
  text-decoration: none;
  white-space: nowrap;
  cursor: pointer;

  &:disabled:not(.is-loading) {
    opacity: css.get("button", "disabled-opacity");
    pointer-events: none;
  }

  &:hover,
  &:focus-visible {
    border-color: css.get("button", "border-color-hover");
    background-color: css.get("button", "background-hover");
    box-shadow: css.get("button", "box-shadow");
    color: css.get("button", "foreground-hover");
  }

  &:focus-visible {
    box-shadow: css.get("button", "box-shadow-focus");
  }

  &:active {
    border-color: css.get("button", "border-color-active");
    background-color: css.get("button", "background-active");
    box-shadow: css.get("button", "box-shadow");
    color: css.get("button", "foreground-active");
  }

  &.is-loading {
    color: transparent !important;
    pointer-events: none;

    &::after {
      @include core.size(css.get("button", "loading-size"));
      content: "";
      position: absolute;
      top: calc(50% - calc(css.get("button", "loading-size") * 0.5));
      left: calc(50% - calc(css.get("button", "loading-size") * 0.5));
      animation: spin css.get("button", "loading-animation-duration") infinite css.get("button", "loading-animation-timing-function");
      border: css.get("button", "loading-border");
      border-radius: core.$border-radius-circle;
      border-color: css.get("button", "loading-border-color") css.get("button", "loading-border-color") transparent transparent;
    }
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}
