@use "@vrembem/core";
@use "@vrembem/core/css";
@use "./variables" as var;

// TODO: Move this into core library.
@mixin form-control-properties($module) {
  min-width: css.get($module, "size", css.get("form-control-size"));
  min-height: css.get($module, "size", css.get("form-control-size"));
  padding: css.get($module, "padding", core.minus-border-width(core.$form-control-padding, css.get($module, "border-width", css.get("form-control-border-width"))));
  transition-property: css.get($module, "transition-property", css.get("form-control-transition-property"));
  transition-duration: css.get($module, "transition-duration", css.get("form-control-transition-duration"));
  transition-timing-function: css.get($module, "transition-timing-function", css.get("form-control-transition-timing-function"));
  border-width: css.get($module, "border-width", css.get("form-control-border-width"));
  border-radius: css.get($module, "border-radius", css.get("form-control-border-radius"));
  font-size: css.get($module, "font-size", css.get("form-control-font-size"));
  line-height: css.get($module, "line-height", css.get("form-control-line-height"));
}

@mixin button-base() {
  position: relative;
  display: inline-flex;
  gap: css.get("button", "gap", var.$gap);
  align-items: center;
  justify-content: center;
  outline: none;
  border-style: solid;
  background-clip: border-box;
  font-family: inherit;
  font-weight: inherit;
  text-decoration: none;
  white-space: nowrap;
  cursor: pointer;
}

@mixin button-color() {
  border-color: css.get("button", "border-color", var.$border-color);
  background: css.get("button", "background", var.$background);
  box-shadow: 0 0 0 0 css.get("button", "box-shadow", var.$box-shadow);
  color: css.get("button", "foreground", var.$foreground);
}

#{core.bem("button")} {
  @include form-control-properties("button");
  @include button-base();
  @include button-color();
  
  &:hover {
    border-color: css.get("button", "border-color-hover", "border-color", var.$border-color-hover);
    background: css.get("button", "background-hover", "background", var.$background-hover);
    box-shadow: css.get("button", "box-shadow-hover", "box-shadow", var.$box-shadow-hover);
    color: css.get("button", "foreground-hover", "foreground", var.$foreground-hover);
  }

  &:focus {
    border-color: css.get("button", "border-color-focus", "border-color-hover", "border-color", var.$border-color-focus);
    background: css.get("button", "background-focus", "background-hover", "background", var.$background-focus);
    box-shadow: css.get("button", "box-shadow-focus", "box-shadow-hover", "box-shadow", var.$box-shadow-focus);
    color: css.get("button", "foreground-focus", "foreground-hover", "foreground", var.$foreground-focus);
  }

  &:focus-visible {
    border-color: css.get("button", "border-color-focus-visible", "border-color-focus", "border-color-hover", "border-color", var.$border-color-focus-visible);
    background: css.get("button", "background-focus-visible", "background-focus", "background-hover", "background", var.$background-focus-visible);
    box-shadow: css.get("button", "box-shadow-focus-visible", "box-shadow-focus", "box-shadow-hover", "box-shadow", var.$box-shadow-focus-visible);
    color: css.get("button", "foreground-focus-visible", "foreground-focus", "foreground-hover", "foreground", var.$foreground-focus-visible);
  }

  &:active {
    border-color: css.get("button", "border-color-active", "border-color", var.$border-color-active);
    background: css.get("button", "background-active", "background", var.$background-active);
    box-shadow: css.get("button", "box-shadow-active", "box-shadow", var.$box-shadow-active);
    color: css.get("button", "foreground-active", "foreground", var.$foreground-active);
  }

  &:disabled:not(.is-loading) {
    opacity: css.get("button", "disabled-opacity", var.$disabled-opacity);
    pointer-events: none;
  }

  &.is-loading {
    color: transparent !important;
    pointer-events: none;

    &::after {
      @include css.override("loading", "color", css.get("button", "foreground", var.$foreground));
      @include core.loading-spinner();
    }
  }
}
