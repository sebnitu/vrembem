{
  "version": 3,
  "sources": [
    "../../node_modules/browser-pack/_prelude.js",
    "../core/index.js",
    "dist/scripts.js",
    "index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "export default {\n  \"breakpoints\": {\n    \"xs\": \"480\",\n    \"sm\": \"620\",\n    \"md\": \"760\",\n    \"lg\": \"990\",\n    \"xl\": \"1380\"\n  }\n}\n",
    "\"use strict\";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiJ9",
    "import core from \"@vrembem/core\"\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nexport default class {\n\n  /**\n   * Get and output a breakpoint using it\"s key found in core.json\n   * ---\n   * @param {String} key - The key to search for in the breakpoints object\n   * @returns {String} - The pixel value of the breakpoint as a string\n   */\n  static getBreakpoint(key) {\n    return core.breakpoints[key]\n  }\n\n  /**\n   * Checks if an element has a class or not\n   * ---\n   * @param {Node} el - Element(s) to check class(es) on\n   * @param {String || Array} c - Class(es) to check\n   * @returns {Boolean} - Returns true if class exists, otherwise false\n   */\n  static hasClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    return c.some( function (c) {\n      let has = false\n      el.forEach((el) => {\n        if (el.classList.contains(c)) {\n          has = true\n        }\n      })\n      return has\n    })\n  }\n\n  /**\n   * Adds a class or classes to an element\n   * ---\n   * @param {Node} el - Element(s) to add class(es) on\n   * @param {String || Array} c - Class(es) to add\n   */\n  static addClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.add(c)\n      })\n    })\n  }\n\n  /**\n   * Remove a class or classes from an element\n   * ---\n   * @param {Node} el - Element(s) to remove class(es) from\n   * @param {String || Array} c - Class(es) to remove\n   */\n  static removeClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.remove(c)\n      })\n    })\n  }\n\n  /**\n   * Toggle a class or classes on an element\n   * ---\n   * @param {Node} el - Element(s) to toggle class(es) on\n   * @param {String || Array} c - Class(es) to toggle\n   */\n  static toggleClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.toggle(c)\n      })\n    })\n  }\n\n  /**\n   * Find the closest parent element based on class. This is different from the\n   * native .closest() method in that it doesn\"t check the current element.\n   * ---\n   * @param {Node} el - Element to start search on\n   * @param {String || Array} c - Class(es) to check for\n   * @return {Node} - Closest parent element\n   */\n  static closest(el, c) {\n    while ((el = el.parentElement) && !this.hasClass(el, c))\n      return el\n  }\n\n  /**\n   * Converts a string or object to an array. If an array is passed, it\"s\n   * returned as is. Anything else is returned as an array.\n   * ---\n   * @param {Object} item - String or object to convert to an array\n   * @return {Array} - Return the converted array\n   */\n  static toArray(item) {\n\n    let array = []\n\n    if (Array.isArray(item)) {\n      array = item\n    } else {\n      array.push(item)\n    }\n\n    return array\n  }\n\n  /**\n   * Merge two or more objects. Returns a new object. Set the first argument\n   * to `true` for a deep or recursive merge.\n   * ---\n   * @param {Boolean} [Optional] - If true, do a deep (or recursive) merge\n   * @param {Object} - The objects to merge together; each overriding the next\n   * @returns {Object} - Merged values of defaults and options\n   */\n  /* global extend */\n  static extend() {\n\n    let extended = {}\n    let deep = false\n    let i = 0\n    let length = arguments.length\n\n    if ( Object.prototype.toString.call( arguments[0] ) === \"[object Boolean]\" ) {\n      deep = arguments[0]\n      i++\n    }\n\n    let merge = ( obj ) => {\n      for ( let prop in obj ) {\n        if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {\n          if ( deep && Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ) {\n            extended[prop] = extend( true, extended[prop], obj[prop] )\n          } else {\n            extended[prop] = obj[prop]\n          }\n        }\n      }\n    }\n\n    for ( ; i < length; i++ ) {\n      let obj = arguments[i]\n      merge(obj)\n    }\n\n    return extended\n  }\n\n}\n"
  ]
}