{
  "version": 3,
  "sources": [
    "../../node_modules/browser-pack-flat/_prelude",
    "../core/index.js",
    "index.js"
  ],
  "names": [
    "_$core_1",
    "breakpoints",
    "xs",
    "sm",
    "md",
    "lg",
    "xl",
    "obj",
    "_core",
    "__esModule",
    "default",
    "_defineProperties",
    "target",
    "props",
    "i",
    "length",
    "descriptor",
    "enumerable",
    "configurable",
    "writable",
    "Object",
    "defineProperty",
    "key",
    "_default",
    "instance",
    "Constructor",
    "TypeError",
    "this",
    "staticProps",
    "value",
    "el",
    "c",
    "forEach",
    "toArray",
    "some",
    "has",
    "classList",
    "contains",
    "add",
    "remove",
    "toggle",
    "parentElement",
    "hasClass",
    "item",
    "array",
    "Array",
    "isArray",
    "push",
    "_extend",
    "extend",
    "apply",
    "arguments",
    "toString",
    "extended",
    "deep",
    "prototype",
    "call",
    "merge",
    "prop",
    "hasOwnProperty",
    "_$utility_3"
  ],
  "mappings": "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",
  "sourcesContent": [
    "(function(){\n",
    "export default {\n  \"breakpoints\": {\n    \"xs\": \"480\",\n    \"sm\": \"620\",\n    \"md\": \"760\",\n    \"lg\": \"990\",\n    \"xl\": \"1380\"\n  }\n}\n",
    "import core from \"@vrembem/core\"\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nexport default class {\n\n  /**\n   * Get and output a breakpoint using it\"s key found in core.json\n   * ---\n   * @param {String} key - The key to search for in the breakpoints object\n   * @returns {String} - The pixel value of the breakpoint as a string\n   */\n  static getBreakpoint(key) {\n    return core.breakpoints[key]\n  }\n\n  /**\n   * Checks if an element has a class or not\n   * ---\n   * @param {Node} el - Element(s) to check class(es) on\n   * @param {String || Array} c - Class(es) to check\n   * @returns {Boolean} - Returns true if class exists, otherwise false\n   */\n  static hasClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    return c.some( function (c) {\n      let has = false\n      el.forEach((el) => {\n        if (el.classList.contains(c)) {\n          has = true\n        }\n      })\n      return has\n    })\n  }\n\n  /**\n   * Adds a class or classes to an element\n   * ---\n   * @param {Node} el - Element(s) to add class(es) on\n   * @param {String || Array} c - Class(es) to add\n   */\n  static addClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.add(c)\n      })\n    })\n  }\n\n  /**\n   * Remove a class or classes from an element\n   * ---\n   * @param {Node} el - Element(s) to remove class(es) from\n   * @param {String || Array} c - Class(es) to remove\n   */\n  static removeClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.remove(c)\n      })\n    })\n  }\n\n  /**\n   * Toggle a class or classes on an element\n   * ---\n   * @param {Node} el - Element(s) to toggle class(es) on\n   * @param {String || Array} c - Class(es) to toggle\n   */\n  static toggleClass(el, c) {\n    el = (el.forEach) ? el : this.toArray(el)\n    c = this.toArray(c)\n    el.forEach((el) => {\n      c.forEach((c) => {\n        el.classList.toggle(c)\n      })\n    })\n  }\n\n  /**\n   * Find the closest parent element based on class. This is different from the\n   * native .closest() method in that it doesn\"t check the current element.\n   * ---\n   * @param {Node} el - Element to start search on\n   * @param {String || Array} c - Class(es) to check for\n   * @return {Node} - Closest parent element\n   */\n  static closest(el, c) {\n    while ((el = el.parentElement) && !this.hasClass(el, c))\n      return el\n  }\n\n  /**\n   * Converts a string or object to an array. If an array is passed, it\"s\n   * returned as is. Anything else is returned as an array.\n   * ---\n   * @param {Object} item - String or object to convert to an array\n   * @return {Array} - Return the converted array\n   */\n  static toArray(item) {\n\n    let array = []\n\n    if (Array.isArray(item)) {\n      array = item\n    } else {\n      array.push(item)\n    }\n\n    return array\n  }\n\n  /**\n   * Merge two or more objects. Returns a new object. Set the first argument\n   * to `true` for a deep or recursive merge.\n   * ---\n   * @param {Boolean} [Optional] - If true, do a deep (or recursive) merge\n   * @param {Object} - The objects to merge together; each overriding the next\n   * @returns {Object} - Merged values of defaults and options\n   */\n  /* global extend */\n  static extend() {\n\n    let extended = {}\n    let deep = false\n    let i = 0\n    let length = arguments.length\n\n    if ( Object.prototype.toString.call( arguments[0] ) === \"[object Boolean]\" ) {\n      deep = arguments[0]\n      i++\n    }\n\n    let merge = ( obj ) => {\n      for ( let prop in obj ) {\n        if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {\n          if ( deep && Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ) {\n            extended[prop] = extend( true, extended[prop], obj[prop] )\n          } else {\n            extended[prop] = obj[prop]\n          }\n        }\n      }\n    }\n\n    for ( ; i < length; i++ ) {\n      let obj = arguments[i]\n      merge(obj)\n    }\n\n    return extended\n  }\n\n}\n"
  ],
  "sourceRoot": ""
}