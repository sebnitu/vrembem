@use "@vrembem/core";
@use "./variables" as var;

// Blockquote
// ---

@mixin blockquote() {
  position: relative;
  padding: var.$blockquote-padding;
  border: var.$blockquote-border;
  border-radius: var.$blockquote-border-radius;
  background: var.$blockquote-background;
  color: var.$blockquote-color;

  @if var.$blockquote-accent-color {
    &::before {
      content: "";
      position: absolute;
      top: var.$blockquote-accent-offset;
      bottom: var.$blockquote-accent-offset;
      left: var.$blockquote-accent-offset;
      width: var.$blockquote-accent-width;
      background-color: var.$blockquote-accent-color;
    }
  }

  > * + * {
    margin-top: var.$blockquote-spacing;
  }
}

// Code
// ---

@mixin code() {
  padding: var.$code-padding;
  border: var.$code-border;
  background: var.$code-background;
  color: var.$code-color;
  font-family: core.$font-family-mono;
  font-size: var.$code-font-size;
  word-break: break-word;
}

// Heading
// ---

@mixin heading-base() {
  color: var.$heading-color;
  font-family: var.$heading-font-family;
  font-weight: var.$heading-font-weight;
  line-height: var.$heading-line-height;
}

@mixin heading($level) {
  @if $level == 1 {
    font-size: 2em;
    @include core.media-min("md") {
      font-size: 2.5em;
    }
  }

  @else if $level == 2 {
    font-size: 1.75em;
    @include core.media-min("md") {
      font-size: 2em;
    }
  }

  @else if $level == 3 {
    font-size: 1.5em;
    @include core.media-min("md") {
      font-size: 1.75em;
    }
  }

  @else if $level == 4 {
    font-size: 1.25em;
    @include core.media-min("md") {
      font-size: 1.5em;
    }
  }

  @else if $level == 5 {
    font-size: 1.1em;
    line-height: inherit;
    @include core.media-min("md") {
      font-size: 1.25em;
    }
  }

  @else if $level == 6 {
    font-size: 1em;
    line-height: inherit;
    @include core.media-min("md") {
      font-size: 1em;
    }
  }
}

// Link
// ---

@mixin link() {
  transition: var.$link-transition;
  border-bottom: var.$link-border;
  color: var.$link-color;
  text-decoration: var.$link-text-decoration;

  &:hover {
    border-bottom: var.$link-border-hover;
    color: var.$link-color-hover;
    text-decoration: var.$link-text-decoration-hover;
  }

  &:focus {
    outline: currentColor dotted 1px;
    outline-offset: 3px;
    border-bottom: var.$link-border-hover;
    color: var.$link-color-hover;
    text-decoration: var.$link-text-decoration-hover;
  }
}

@mixin link-modifier($modifier) {
  @if $modifier == "subtle" {
    border-color: var.$link-subtle-border-color;
    color: var.$link-subtle-color;

    &:hover,
    &:focus {
      border-color: var.$link-subtle-border-color-hover;
      color: var.$link-subtle-color-hover;
    }
  }

  @else if $modifier == "invert" {
    border-color: var.$link-invert-border-color;
    color: var.$link-invert-color;

    &:hover,
    &:focus {
      border-color: var.$link-invert-border-color-hover;
      color: var.$link-invert-color-hover;
    }
  }

  @else if $modifier == "invert-subtle" {
    border-color: var.$link-invert-subtle-border-color;
    color: var.$link-invert-subtle-color;

    &:hover,
    &:focus {
      border-color: var.$link-invert-subtle-border-color-hover;
      color: var.$link-invert-subtle-color-hover;
    }
  }
}

// List
// ---

@mixin list() {
  margin-left: var.$list-spacing;

  ul,
  ol {
    margin-left: var.$list-spacing;
  }

  li {
    margin: var.$list-item-spacing 0;
  }
}

// Pre
// ---

@mixin pre() {
  padding: var.$pre-padding;
  overflow: auto;
  border: var.$pre-border;
  border-radius: var.$pre-border-radius;
  background: var.$pre-background;
  color: var.$pre-color;
  font-family: core.$font-family-mono;

  code {
    padding: 0;
    border: none;
    background: none;
    color: inherit;
    font-size: 1em;
  }
}

// Scroll-box
// ---

@mixin scroll-box() {
  display: block;
  width: 100%;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

// Separator
// ---

@mixin separator($border) {
  display: block;
  height: 0;
  border: none;
  border-top: $border;
}

// Spacing
// ---

@mixin spacing($spacing, $imp: null) {
  @if ($imp) {
    $imp: "!important";
  } @else if ($imp == false) {
    $imp: null;
  }
  @if ($spacing) {
    > * + * {
      margin-top: $spacing #{$imp};
    }
  }
}

// Type
// ---

@mixin type() {
  @include core.add-clearfix();
  @include spacing(var.$type-spacing);
  font-family: var.$type-font-family;
  font-size: var.$type-font-size;
  line-height: var.$type-line-height;

  > h1,
  > h2,
  > h3,
  > h4,
  > h5,
  > h6 {
    @include heading-base();
  }

  > h1 {
    @include heading(1);
  }

  > h2 {
    @include heading(2);
  }

  > h3 {
    @include heading(3);
  }

  > h4 {
    @include heading(4);
  }

  > h5 {
    @include heading(5);
  }

  > h6 {
    @include heading(6);
  }

  > a,
  > :not(div) a {
    @include link();
  }

  > code,
  > :not(div) code {
    @include code();
  }

  > hr {
    @include separator(var.$separator-border);
  }

  > ul,
  > ol {
    @include list();
  }

  > blockquote {
    @include blockquote();
  }

  > pre {
    @include pre();
  }
}

@mixin type-invert($color: black) {
  @if (lightness($color) < core.$lightness-threshold) {
    color: core.$color-invert;

    > h1,
    > h2,
    > h3,
    > h4,
    > h5,
    > h6 {
      color: var.$heading-color-invert;
    }

    > hr {
      @include separator(var.$separator-border-invert);
    }

    > blockquote {
      border-color: var.$blockquote-border-color-invert;
    }

    > a,
    > :not(div) a {
      @include link-modifier("invert");
    }

    > code,
    > :not(div) code {
      color: var.$code-color-invert;
    }

    > pre {
      color: var.$pre-color;

      code {
        color: inherit;
      }
    }
  }
}
