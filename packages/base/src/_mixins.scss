@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "@vrembem/core";
@use "@vrembem/core/palette";
@use "./variables" as var;

// Heading
// ---

@mixin heading-base($heading-color: var.$heading-color) {
  color: $heading-color;
  font-family: var.$heading-font-family;
  font-weight: var.$heading-font-weight;
  line-height: var.$heading-line-height;
}

@mixin heading-levels($map: var.$heading-scale, $prefix: null) {
  @each $key, $value in $map {
    $font-size: $value;
    $line-height: null;
    @if meta.type-of($value) == list {
      $font-size: list.nth($value, 1);
      $line-height: list.nth($value, 2);
    }
    #{$prefix}#{$key} {
      font-size: $font-size;
      line-height: $line-height;
    }
  }
}

@mixin heading($level, $map: var.$heading-scale) {
  $value: null;
  @if meta.type-of($level) == number {
    $value: list.nth(map.values($map), $level);
  }
  @else if meta.type-of($level) == string {
    $value: map.get($map, $level);
  }
  $font-size: $value;
  $line-height: null;
  @if meta.type-of($value) == list {
    $font-size: list.nth($value, 1);
    $line-height: list.nth($value, 2);
  }
  font-size: $font-size;
  line-height: $line-height;
}

// Scroll-box
// ---

@mixin scroll-box() {
  display: block;
  width: 100%;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}

// Separator
// ---

@mixin separator($border) {
  display: block;
  height: 0;
  border: none;
  border-top: $border;
}

// Screen reader only content
// ---

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
}

// Type
// ---

@mixin type() {
  color: var.$type-color;
  font-family: var.$type-font-family;
  font-size: var.$type-font-size;
  line-height: var.$type-line-height;

  > * + * {
    margin-top: var.$type-gap;
  }

  > h1,
  > h2,
  > h3,
  > h4,
  > h5,
  > h6 {
    @include heading-base(var.$type-heading-color);
  }

  > {
    @include heading-levels();
  }
}
