////////////////////////////////////////////////////////////////////////////////
// @Mixins
////////////////////////////////////////////////////////////////////////////////

// Add Clearfix
// Allows you to apply a clearfix to an element that contains floats.
@mixin add-clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

// Remove Clearfix
// Removes the clearfix styles from an element. This is typically used when a
// clearfix is inherited on an element and you'd like it removed.
@mixin remove-clearfix() {
  &:after {
    content: none;
    display: none;
    clear: none;
  }
}

// Scrollable
// Makes touch devices use momentum-based scrolling for the given element.
@mixin add-scrollable() {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  transition: top linear 0.2s, bottom linear 0.2s;
}

// Make Triangle
// Creates the base styles for creating CSS triangles.
@mixin make-triangle() {
  content: '';
  display: inline-block;
  width: 0;
  height: 0;
  border: none;
  border-style: solid;
  border-color: transparent;
}

// Add Triangle Styles
// Uses the "0x0" element with borders trick to draw arrow size, color and direction.
// @param $size
//   @type unit (pixel, em, rem)
// @param $color
//   @type color
// @param $direction
//   @desc The direction that the triangle will point.
//   @type string
//   @options 'up', 'right', 'down', 'left', 'up-right', 'up-left', 'down-right', 'down-left'
@mixin add-triangle-styles( $size, $color, $direction ) {
  border-color: transparent;
  @if ($direction == 'up') {
    border-width: 0 $size $size $size;
    border-bottom-color: $color;
  } @else if ($direction == 'right') {
    border-width: $size 0 $size $size;
    border-left-color: $color;
  } @else if ($direction == 'down') {
    border-width: $size $size 0 $size;
    border-top-color: $color;
  } @else if ($direction == 'left') {
    border-width: $size $size $size 0;
    border-right-color: $color;
  } @else if ($direction == 'up right' or $direction == 'right up') {
    border-width: $size;
    border-top-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'up left' or $direction == 'left up') {
    border-width: $size;
    border-top-color: $color;
    border-left-color: $color;
  } @else if ($direction == 'down right' or $direction == 'right down') {
    border-width: $size;
    border-bottom-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'down left' or $direction == 'left down') {
    border-width: $size;
    border-bottom-color: $color;
    border-left-color: $color;
  } @else {
    @warn "#{$direction} is not a valid direction for @mixin triangle";
  }
}

// Add Truncate Text
// Truncates text with an ellipsis. Element this is applied to must be block
// or inline-block.
// @param $display
//   @type display property (block, inline-block)
//   @default block
@mixin add-text-truncate( $display : block ) {
  @if ($display == inline-block or $display == block) {
    display: $display;
  }
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Add Hide text
// Hides text from an element. This is most commonly used as an image
// replacement technique for hiding text in an element to reveal a
// background image.
@mixin add-text-hide() {
  font-size: 0;
  line-height: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}
