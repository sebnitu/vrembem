////////////////////////////////////////////////////////////////////////////////
// @Functions
////////////////////////////////////////////////////////////////////////////////

// Map Extend
// jQuery-style extend function for when `map-merge()` isn't enough. Use when
// we need to merge more than two maps and/or need a merge to be recursive.
// @param $map
//   @type first map
// @param $maps
//   @type list of maps
// @param $deep
//   @desc Whether or not to enable recursive mode.
//   @type boolean
//   @default false
// @return merged map
@function map-extend($map, $maps.../*, $deep */) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {

        // If value is a nested map and same key from map is a nested map as well
        @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
          // Recursive extend
          $value: map-extend(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge($map, ($key: $value));
      }
    }
  }

  @return $map;
}

// Map Fetch
// An easy way to fetch a deep value in a multi-level map. Works much like
// map-get() except that you pass multiple keys as the second variable argument
// to go down multiple levels in the nested map.
// @param $map
//   @type map
// @param $keys
//   @type list
// @return map value
@function map-fetch($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// Map Set
// An easy way to set a deep value in a multi-level map. By passing in a map,
// value and keys to the original map value you want changed.
// @param $map
//   @type map
// @param $value
//   @type value
// @param $keys
//   @type list
// @return updated map value
@function map-set($map, $value, $keys) {
  $maps: ($map,);
  $result: null;

  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  @return $result;
}

// Strip Units
// Srtips the unit from a value. e.g. 12px -> 12.
// @param $val
//   @type unit (pixel, em, percent, number)
// @return number
@function strip-units($val) {
  @return ($val / ($val * 0 + 1));
}

// Pixels to Ems
// Converts a pixel value to ems.
// @param $px
//   @type unit (pixel, number)
// @param $font-size
//   @type unit (pixel, number)
//   @default $font-size
// @return unit (em)
@function px-to-em($px, $base : $font-size) {
  @if unitless($px) {
    $px: 1px * $px;
  }
  @if unitless($base) {
    $base: 1px * $base;
  }
  $px: ($px / $base) * 1em;
  @return strip-units($px) * 1em;
}

// Pixels to Rems
// Converts a pixel value to rems.
// @param $px
//   @type unit (pixel, number)
// @return unit (rem)
@function px-to-rem($px) {
  @if unitless($px) {
    $px: 1px * $px;
  }
  @if unitless($font-size) {
    $font-size: 1px * $font-size;
  }
  $px: ($px / $font-size) * 1rem;
  @return strip-units($px) * 1rem;
}

// Ems to Pixels
// Converts an em value to pixels.
// @param $px
//   @type unit (em, number)
// @param $font-size
//   @type unit (pixel, number)
//   @default $font-size
// @return unit (px)
@function em-to-px($em, $base : $font-size) {
  @if unitless($em) {
    $em: 1em * $em;
  }
  @if unitless($base) {
    $base: 1px * $base;
  }
  $em: ($em * $base) / 1px;
  @return strip-units($em) * 1px;
}

// Font Weight
// Output the font weight value using the a weight keyword.
// @param $weight
//   @type string
//   @options 'hairline', 'thin', 'extra-light', 'light', 'regular', 'normal',
//     'medium', 'semi-bold', 'bold', 'extra-bold', 'black'
@function font-weight($keyword) {
  $value: null !default;

  @if ($keyword == 'hairline' or $keyword == 'thin') {
    $value: 100;
  } @else if ($keyword == 'extra-light') {
    $value: 200;
  } @else if ($keyword == 'light') {
    $value: 300;
  } @else if ($keyword == 'regular' or $keyword == 'normal') {
    $value: 400;
  } @else if ($keyword == 'medium') {
    $value: 500;
  } @else if ($keyword == 'semi-bold') {
    $value: 600;
  } @else if ($keyword == 'bold') {
    $value: 700;
  } @else if ($keyword == 'extra-bold') {
    $value: 800;
  } @else if ($keyword == 'black') {
    $value: 900;
  }

  @return $value;
}

// Aspect Ratio
// Returns the aspect ratio in the form of a percentage.
// @param $width
//   @type width aspect ratio (number)
// @param $height
//   @type height aspect ratio (number)
// @return height percentage of aspect ratio
@function aspect-ratio($width, $height) {
  @return (($height / $width) * 100%);
}
