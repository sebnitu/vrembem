////////////////////////////////////////////////////////////////////////////////
// @Media Queries
////////////////////////////////////////////////////////////////////////////////

// Local Breakpoints Map
// @type map
$tweakpoints: () !default;

// Global Breakpoints Map
// @type map
$breakpoints: (
  'small'  : 480px,
  'medium' : 760px,
  'large'  : 990px,
  'huge'   : 1380px
) !default;

////////////////////////////////////////////////////////////////////////////////
// @Media Query Mixins
////////////////////////////////////////////////////////////////////////////////

// Media Min
// A media query mixin that deifnes a query using min-width. You can pass in the
// key to the `$teakpoints()` or `$breakpoints()` maps to access that value, or
// pass a value to create your media query.
// @param $point
//   @type map key | unit (pixel, em, rem)
// @param @content (passed in brackets)
//   @type style block
@mixin media-min($point) {
  @if map-has-key($tweakpoints, $point) {
    @media (min-width: map-get($tweakpoints, $point)) {
      @content;
    }
  } @else if map-has-key($breakpoints, $point) {
    @media (min-width: map-get($breakpoints, $point)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (min-width: $point) {
        @content;
      }
    }
  }
}

// Media Max
// A media query mixin that deifnes a query using max-width. You can pass in the
// key to the `$teakpoints()` or `$breakpoints()` maps to access that value, or
// pass a value to create your media query. This mixin will shave a pixel off
// your breakpoint value so that it never overlaps with a breakpoint that might
// be used in the `media-min` mixin except when a value is passed directly.
// @param $point
//   @type map key | unit (pixel, em, rem)
// @param @content (passed in brackets)
//   @type style block
@mixin media-max($point) {
  @if map-has-key($tweakpoints, $point) {
    @media (max-width: (map-get($tweakpoints, $point) - 1)) {
      @content;
    }
  } @else if map-has-key($breakpoints, $point) {
    @media (max-width: (map-get($breakpoints, $point) - 1)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (max-width: $point) {
        @content;
      }
    }
  }
}

// Retina Media Query
// Media query mixin can be used for setting styles specifically to retina
// screens. Used when setting higher resolution background images.
// @param @content (passed in brackets)
//   @type style block
@mixin media-retina() {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}
