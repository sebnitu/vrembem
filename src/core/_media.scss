////
/// Media query variables and mixins
/// @author Sebastian Nitu
/// @access public
////

/// Local breakpoints map
/// @type {Map}
$tweakpoints: () !default;

/// Global breakpoints map
/// @type {Map}
$breakpoints: (
  'tiny': 480px,
  'small': 620px,
  'medium': 760px,
  'large': 990px,
  'huge': 1380px
) !default;


/// A media query mixin that deifnes a query using min-width. You can pass in the
/// key to the `$teakpoints()` or `$breakpoints()` maps to access that value, or
/// pass a value to create your media query.
/// @param {String|Unit} $point
/// @param {Style Block} @content - Passed in brackets
@mixin media-min($point) {
  @if map-has-key($tweakpoints, $point) {
    @media (min-width: map-get($tweakpoints, $point)) {
      @content;
    }
  } @else if map-has-key($breakpoints, $point) {
    @media (min-width: map-get($breakpoints, $point)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (min-width: $point) {
        @content;
      }
    }
  }
}

/// A media query mixin that deifnes a query using max-width. You can pass in the
/// key to the `$teakpoints()` or `$breakpoints()` maps to access that value, or
/// pass a value to create your media query. This mixin will shave a pixel off
/// your breakpoint value so that it never overlaps with a breakpoint that might
/// be used in the `media-min` mixin except when a value is passed directly.
/// @param {String|Unit} $point
/// @param {Style Block} @content - Passed in brackets
@mixin media-max($point) {
  @if map-has-key($tweakpoints, $point) {
    @media (max-width: (map-get($tweakpoints, $point) - 1)) {
      @content;
    }
  } @else if map-has-key($breakpoints, $point) {
    @media (max-width: (map-get($breakpoints, $point) - 1)) {
      @content;
    }
  } @else {
    @if (type-of($point) == number) {
      @media (max-width: $point) {
        @content;
      }
    }
  }
}

/// Media query mixin can be used for setting styles specifically to retina
/// screens. Used when setting higher resolution background images.
/// @param {Style Block} @content - Passed in brackets
@mixin media-retina() {
  // sass-lint:disable no-vendor-prefixes
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}
