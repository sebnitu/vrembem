{"version":3,"names":[],"mappings":"","sources":["src/js/app.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _utility = _interopRequireDefault(require(\"utility\"));\n\nvar _dismissible = _interopRequireDefault(require(\"dismissible\"));\n\nvar _drawer = _interopRequireDefault(require(\"drawer\"));\n\nvar _modal = _interopRequireDefault(require(\"modal\"));\n\nvar _toggle = _interopRequireDefault(require(\"toggle\"));\n\nvar _list = _interopRequireDefault(require(\"list.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar dismissible = new _dismissible[\"default\"]();\nvar drawer = new _drawer[\"default\"]();\nvar modal = new _modal[\"default\"]();\nvar toggle = new _toggle[\"default\"]();\n/**\n * General event trigger for testing\n */\n\ndocument.addEventListener('click', function () {\n  // Get the element that triggered the event\n  var trigger = event.target; // Run the script if it exists as a data attribute\n\n  if (trigger.dataset.script) {\n    // Get our script string for processing\n    var string = trigger.dataset.script; // console.log('Run: ', string)\n    // Get indexes of string\n\n    var indexObject = string.indexOf('.');\n    var indexMethod = string.indexOf('(');\n    var indexParamStart = string.indexOf('\\'');\n    var indexParamEnd = string.indexOf('\\'', indexParamStart + 1); // Get the object, method and if params are passed\n\n    var obj = string.substring(0, indexObject);\n    var method = string.substring(indexObject + 1, indexMethod);\n    var params = string.substring(indexParamStart + 1, indexParamEnd); // console.log('Obj: ', obj)\n    // console.log('Method: ', method)\n    // console.log('Params: ', params)\n    // Run our data script\n\n    if (obj === 'drawer') {\n      drawer[method](params);\n    }\n  }\n});\n/**\n * List.js\n * ---\n * Adds list functionality along with search.\n * list.js docs: http://listjs.com/\n */\n\nif (document.getElementById('listjs')) {\n  // Init our list.js component\n  var list = new _list[\"default\"]('listjs', {\n    fuzzySearch: {\n      searchClass: 'search',\n      location: 0,\n      distance: 100,\n      threshold: 0.4,\n      multiSearch: true\n    },\n    valueNames: ['name', {\n      data: ['category']\n    }],\n    listClass: 'menu'\n  }); // Empty Notice\n  // Displayed when the search returns no results\n\n  var notice_empty = document.querySelector('.notice_empty');\n  var notice_empty_text = notice_empty.querySelector('.search_text'); // Clear search button\n\n  var filter = document.querySelector('.filter');\n  var search = document.querySelector('.filter .search');\n  var search_clear = document.querySelector('.filter .search_clear');\n\n  var isMenuLinkActive = function isMenuLinkActive() {\n    var menuLinks = document.querySelectorAll('#listjs .menu__link');\n\n    var isActive = _utility[\"default\"].hasClass(menuLinks, 'is-active');\n\n    return isActive;\n  }; // On search complete callback\n\n\n  list.on('searchComplete', function () {\n    // Update the search text in empty notice\n    var value = search.value;\n    notice_empty_text.innerHTML = value;\n    localStorage.setItem('searchValue', value); // Show clear search button if a value there is something in search\n\n    if (value) {\n      _utility[\"default\"].addClass(filter, 'is-active');\n\n      _utility[\"default\"].addClass(search, 'is-active');\n\n      _utility[\"default\"].removeClass(search_clear, 'dismiss');\n    } else {\n      _utility[\"default\"].removeClass(filter, 'is-active');\n\n      _utility[\"default\"].removeClass(search, 'is-active');\n\n      _utility[\"default\"].addClass(search_clear, 'dismiss');\n    } // Toggle notice depending on the number of visible items\n\n\n    if (list.visibleItems.length > 0) {\n      _utility[\"default\"].addClass(notice_empty, 'dismiss');\n    } else {\n      _utility[\"default\"].removeClass(notice_empty, 'dismiss');\n    }\n  }); // Click events for category and clears\n\n  document.addEventListener('click', function () {\n    var trigger_search_clear = event.target.closest('.search_clear');\n    var trigger_search_cat = event.target.closest('.category');\n\n    if (trigger_search_clear) {\n      search.value = '';\n      list.search();\n      event.preventDefault();\n    }\n\n    if (trigger_search_cat) {\n      search.value = trigger_search_cat.dataset.category;\n      list.search(search.value);\n      event.preventDefault();\n    }\n  }, false); // Restore our local storage value\n\n  if (localStorage.getItem('searchValue')) {\n    search.value = localStorage.getItem('searchValue');\n    list.search(search.value);\n\n    if (!isMenuLinkActive()) {\n      search.value = '';\n      list.search();\n    }\n  }\n}\n\n},{\"dismissible\":23,\"drawer\":24,\"list.js\":5,\"modal\":25,\"toggle\":26,\"utility\":27}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  var addAsync = function addAsync(values, callback, items) {\n    var valuesToAdd = values.splice(0, 50);\n    items = items || [];\n    items = items.concat(list.add(valuesToAdd));\n\n    if (values.length > 0) {\n      setTimeout(function () {\n        addAsync(values, callback, items);\n      }, 1);\n    } else {\n      list.update();\n      callback(items);\n    }\n  };\n\n  return addAsync;\n};\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  // Add handlers\n  list.handlers.filterStart = list.handlers.filterStart || [];\n  list.handlers.filterComplete = list.handlers.filterComplete || [];\n  return function (filterFunction) {\n    list.trigger('filterStart');\n    list.i = 1; // Reset paging\n\n    list.reset.filter();\n\n    if (filterFunction === undefined) {\n      list.filtered = false;\n    } else {\n      list.filtered = true;\n      var is = list.items;\n\n      for (var i = 0, il = is.length; i < il; i++) {\n        var item = is[i];\n\n        if (filterFunction(item)) {\n          item.filtered = true;\n        } else {\n          item.filtered = false;\n        }\n      }\n    }\n\n    list.update();\n    list.trigger('filterComplete');\n    return list.visibleItems;\n  };\n};\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nvar classes = require('./utils/classes'),\n    events = require('./utils/events'),\n    extend = require('./utils/extend'),\n    toString = require('./utils/to-string'),\n    getByClass = require('./utils/get-by-class'),\n    fuzzy = require('./utils/fuzzy');\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options = extend({\n    location: 0,\n    distance: 100,\n    threshold: 0.4,\n    multiSearch: true,\n    searchClass: 'fuzzy-search'\n  }, options);\n  var fuzzySearch = {\n    search: function search(searchString, columns) {\n      // Substract arguments from the searchString or put searchString as only argument\n      var searchArguments = options.multiSearch ? searchString.replace(/ +$/, '').split(/ +/) : [searchString];\n\n      for (var k = 0, kl = list.items.length; k < kl; k++) {\n        fuzzySearch.item(list.items[k], columns, searchArguments);\n      }\n    },\n    item: function item(_item, columns, searchArguments) {\n      var found = true;\n\n      for (var i = 0; i < searchArguments.length; i++) {\n        var foundArgument = false;\n\n        for (var j = 0, jl = columns.length; j < jl; j++) {\n          if (fuzzySearch.values(_item.values(), columns[j], searchArguments[i])) {\n            foundArgument = true;\n          }\n        }\n\n        if (!foundArgument) {\n          found = false;\n        }\n      }\n\n      _item.found = found;\n    },\n    values: function values(_values, value, searchArgument) {\n      if (_values.hasOwnProperty(value)) {\n        var text = toString(_values[value]).toLowerCase();\n\n        if (fuzzy(text, searchArgument, options)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n  events.bind(getByClass(list.listContainer, options.searchClass), 'keyup', function (e) {\n    var target = e.target || e.srcElement; // IE have srcElement\n\n    list.search(target.value, fuzzySearch.search);\n  });\n  return function (str, columns) {\n    list.search(str, columns, fuzzySearch.search);\n  };\n};\n\n},{\"./utils/classes\":12,\"./utils/events\":13,\"./utils/extend\":14,\"./utils/fuzzy\":15,\"./utils/get-by-class\":17,\"./utils/to-string\":20}],5:[function(require,module,exports){\n\"use strict\";\n\nvar naturalSort = require('string-natural-compare'),\n    getByClass = require('./utils/get-by-class'),\n    extend = require('./utils/extend'),\n    indexOf = require('./utils/index-of'),\n    events = require('./utils/events'),\n    toString = require('./utils/to-string'),\n    classes = require('./utils/classes'),\n    getAttribute = require('./utils/get-attribute'),\n    toArray = require('./utils/to-array');\n\nmodule.exports = function (id, options, values) {\n  var self = this,\n      init,\n      Item = require('./item')(self),\n      addAsync = require('./add-async')(self),\n      initPagination = require('./pagination')(self);\n\n  init = {\n    start: function start() {\n      self.listClass = \"list\";\n      self.searchClass = \"search\";\n      self.sortClass = \"sort\";\n      self.page = 10000;\n      self.i = 1;\n      self.items = [];\n      self.visibleItems = [];\n      self.matchingItems = [];\n      self.searched = false;\n      self.filtered = false;\n      self.searchColumns = undefined;\n      self.handlers = {\n        'updated': []\n      };\n      self.valueNames = [];\n      self.utils = {\n        getByClass: getByClass,\n        extend: extend,\n        indexOf: indexOf,\n        events: events,\n        toString: toString,\n        naturalSort: naturalSort,\n        classes: classes,\n        getAttribute: getAttribute,\n        toArray: toArray\n      };\n      self.utils.extend(self, options);\n      self.listContainer = typeof id === 'string' ? document.getElementById(id) : id;\n\n      if (!self.listContainer) {\n        return;\n      }\n\n      self.list = getByClass(self.listContainer, self.listClass, true);\n      self.parse = require('./parse')(self);\n      self.templater = require('./templater')(self);\n      self.search = require('./search')(self);\n      self.filter = require('./filter')(self);\n      self.sort = require('./sort')(self);\n      self.fuzzySearch = require('./fuzzy-search')(self, options.fuzzySearch);\n      this.handlers();\n      this.items();\n      this.pagination();\n      self.update();\n    },\n    handlers: function handlers() {\n      for (var handler in self.handlers) {\n        if (self[handler]) {\n          self.on(handler, self[handler]);\n        }\n      }\n    },\n    items: function items() {\n      self.parse(self.list);\n\n      if (values !== undefined) {\n        self.add(values);\n      }\n    },\n    pagination: function pagination() {\n      if (options.pagination !== undefined) {\n        if (options.pagination === true) {\n          options.pagination = [{}];\n        }\n\n        if (options.pagination[0] === undefined) {\n          options.pagination = [options.pagination];\n        }\n\n        for (var i = 0, il = options.pagination.length; i < il; i++) {\n          initPagination(options.pagination[i]);\n        }\n      }\n    }\n  };\n  /*\n  * Re-parse the List, use if html have changed\n  */\n\n  this.reIndex = function () {\n    self.items = [];\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.searched = false;\n    self.filtered = false;\n    self.parse(self.list);\n  };\n\n  this.toJSON = function () {\n    var json = [];\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      json.push(self.items[i].values());\n    }\n\n    return json;\n  };\n  /*\n  * Add object to list\n  */\n\n\n  this.add = function (values, callback) {\n    if (values.length === 0) {\n      return;\n    }\n\n    if (callback) {\n      addAsync(values, callback);\n      return;\n    }\n\n    var added = [],\n        notCreate = false;\n\n    if (values[0] === undefined) {\n      values = [values];\n    }\n\n    for (var i = 0, il = values.length; i < il; i++) {\n      var item = null;\n      notCreate = self.items.length > self.page ? true : false;\n      item = new Item(values[i], undefined, notCreate);\n      self.items.push(item);\n      added.push(item);\n    }\n\n    self.update();\n    return added;\n  };\n\n  this.show = function (i, page) {\n    this.i = i;\n    this.page = page;\n    self.update();\n    return self;\n  };\n  /* Removes object from list.\n  * Loops through the list and removes objects where\n  * property \"valuename\" === value\n  */\n\n\n  this.remove = function (valueName, value, options) {\n    var found = 0;\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      if (self.items[i].values()[valueName] == value) {\n        self.templater.remove(self.items[i], options);\n        self.items.splice(i, 1);\n        il--;\n        i--;\n        found++;\n      }\n    }\n\n    self.update();\n    return found;\n  };\n  /* Gets the objects in the list which\n  * property \"valueName\" === value\n  */\n\n\n  this.get = function (valueName, value) {\n    var matchedItems = [];\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      var item = self.items[i];\n\n      if (item.values()[valueName] == value) {\n        matchedItems.push(item);\n      }\n    }\n\n    return matchedItems;\n  };\n  /*\n  * Get size of the list\n  */\n\n\n  this.size = function () {\n    return self.items.length;\n  };\n  /*\n  * Removes all items from the list\n  */\n\n\n  this.clear = function () {\n    self.templater.clear();\n    self.items = [];\n    return self;\n  };\n\n  this.on = function (event, callback) {\n    self.handlers[event].push(callback);\n    return self;\n  };\n\n  this.off = function (event, callback) {\n    var e = self.handlers[event];\n    var index = indexOf(e, callback);\n\n    if (index > -1) {\n      e.splice(index, 1);\n    }\n\n    return self;\n  };\n\n  this.trigger = function (event) {\n    var i = self.handlers[event].length;\n\n    while (i--) {\n      self.handlers[event][i](self);\n    }\n\n    return self;\n  };\n\n  this.reset = {\n    filter: function filter() {\n      var is = self.items,\n          il = is.length;\n\n      while (il--) {\n        is[il].filtered = false;\n      }\n\n      return self;\n    },\n    search: function search() {\n      var is = self.items,\n          il = is.length;\n\n      while (il--) {\n        is[il].found = false;\n      }\n\n      return self;\n    }\n  };\n\n  this.update = function () {\n    var is = self.items,\n        il = is.length;\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.templater.clear();\n\n    for (var i = 0; i < il; i++) {\n      if (is[i].matching() && self.matchingItems.length + 1 >= self.i && self.visibleItems.length < self.page) {\n        is[i].show();\n        self.visibleItems.push(is[i]);\n        self.matchingItems.push(is[i]);\n      } else if (is[i].matching()) {\n        self.matchingItems.push(is[i]);\n        is[i].hide();\n      } else {\n        is[i].hide();\n      }\n    }\n\n    self.trigger('updated');\n    return self;\n  };\n\n  init.start();\n};\n\n},{\"./add-async\":2,\"./filter\":3,\"./fuzzy-search\":4,\"./item\":6,\"./pagination\":7,\"./parse\":8,\"./search\":9,\"./sort\":10,\"./templater\":11,\"./utils/classes\":12,\"./utils/events\":13,\"./utils/extend\":14,\"./utils/get-attribute\":16,\"./utils/get-by-class\":17,\"./utils/index-of\":18,\"./utils/to-array\":19,\"./utils/to-string\":20,\"string-natural-compare\":21}],6:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  return function (initValues, element, notCreate) {\n    var item = this;\n    this._values = {};\n    this.found = false; // Show if list.searched == true and this.found == true\n\n    this.filtered = false; // Show if list.filtered == true and this.filtered == true\n\n    var init = function init(initValues, element, notCreate) {\n      if (element === undefined) {\n        if (notCreate) {\n          item.values(initValues, notCreate);\n        } else {\n          item.values(initValues);\n        }\n      } else {\n        item.elm = element;\n        var values = list.templater.get(item, initValues);\n        item.values(values);\n      }\n    };\n\n    this.values = function (newValues, notCreate) {\n      if (newValues !== undefined) {\n        for (var name in newValues) {\n          item._values[name] = newValues[name];\n        }\n\n        if (notCreate !== true) {\n          list.templater.set(item, item.values());\n        }\n      } else {\n        return item._values;\n      }\n    };\n\n    this.show = function () {\n      list.templater.show(item);\n    };\n\n    this.hide = function () {\n      list.templater.hide(item);\n    };\n\n    this.matching = function () {\n      return list.filtered && list.searched && item.found && item.filtered || list.filtered && !list.searched && item.filtered || !list.filtered && list.searched && item.found || !list.filtered && !list.searched;\n    };\n\n    this.visible = function () {\n      return item.elm && item.elm.parentNode == list.list ? true : false;\n    };\n\n    init(initValues, element, notCreate);\n  };\n};\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\n\nvar classes = require('./utils/classes'),\n    events = require('./utils/events'),\n    List = require('./index');\n\nmodule.exports = function (list) {\n  var refresh = function refresh(pagingList, options) {\n    var item,\n        l = list.matchingItems.length,\n        index = list.i,\n        page = list.page,\n        pages = Math.ceil(l / page),\n        currentPage = Math.ceil(index / page),\n        innerWindow = options.innerWindow || 2,\n        left = options.left || options.outerWindow || 0,\n        right = options.right || options.outerWindow || 0;\n    right = pages - right;\n    pagingList.clear();\n\n    for (var i = 1; i <= pages; i++) {\n      var className = currentPage === i ? \"active\" : \"\"; //console.log(i, left, right, currentPage, (currentPage - innerWindow), (currentPage + innerWindow), className);\n\n      if (is.number(i, left, right, currentPage, innerWindow)) {\n        item = pagingList.add({\n          page: i,\n          dotted: false\n        })[0];\n\n        if (className) {\n          classes(item.elm).add(className);\n        }\n\n        addEvent(item.elm, i, page);\n      } else if (is.dotted(pagingList, i, left, right, currentPage, innerWindow, pagingList.size())) {\n        item = pagingList.add({\n          page: \"...\",\n          dotted: true\n        })[0];\n        classes(item.elm).add(\"disabled\");\n      }\n    }\n  };\n\n  var is = {\n    number: function number(i, left, right, currentPage, innerWindow) {\n      return this.left(i, left) || this.right(i, right) || this.innerWindow(i, currentPage, innerWindow);\n    },\n    left: function left(i, _left) {\n      return i <= _left;\n    },\n    right: function right(i, _right) {\n      return i > _right;\n    },\n    innerWindow: function innerWindow(i, currentPage, _innerWindow) {\n      return i >= currentPage - _innerWindow && i <= currentPage + _innerWindow;\n    },\n    dotted: function dotted(pagingList, i, left, right, currentPage, innerWindow, currentPageItem) {\n      return this.dottedLeft(pagingList, i, left, right, currentPage, innerWindow) || this.dottedRight(pagingList, i, left, right, currentPage, innerWindow, currentPageItem);\n    },\n    dottedLeft: function dottedLeft(pagingList, i, left, right, currentPage, innerWindow) {\n      return i == left + 1 && !this.innerWindow(i, currentPage, innerWindow) && !this.right(i, right);\n    },\n    dottedRight: function dottedRight(pagingList, i, left, right, currentPage, innerWindow, currentPageItem) {\n      if (pagingList.items[currentPageItem - 1].values().dotted) {\n        return false;\n      } else {\n        return i == right && !this.innerWindow(i, currentPage, innerWindow) && !this.right(i, right);\n      }\n    }\n  };\n\n  var addEvent = function addEvent(elm, i, page) {\n    events.bind(elm, 'click', function () {\n      list.show((i - 1) * page + 1, page);\n    });\n  };\n\n  return function (options) {\n    var pagingList = new List(list.listContainer.id, {\n      listClass: options.paginationClass || 'pagination',\n      item: \"<li><a class='page' href='javascript:function Z(){Z=\\\"\\\"}Z()'></a></li>\",\n      valueNames: ['page', 'dotted'],\n      searchClass: 'pagination-search-that-is-not-supposed-to-exist',\n      sortClass: 'pagination-sort-that-is-not-supposed-to-exist'\n    });\n    list.on('updated', function () {\n      refresh(pagingList, options);\n    });\n    refresh(pagingList, options);\n  };\n};\n\n},{\"./index\":5,\"./utils/classes\":12,\"./utils/events\":13}],8:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  var Item = require('./item')(list);\n\n  var getChildren = function getChildren(parent) {\n    var nodes = parent.childNodes,\n        items = [];\n\n    for (var i = 0, il = nodes.length; i < il; i++) {\n      // Only textnodes have a data attribute\n      if (nodes[i].data === undefined) {\n        items.push(nodes[i]);\n      }\n    }\n\n    return items;\n  };\n\n  var parse = function parse(itemElements, valueNames) {\n    for (var i = 0, il = itemElements.length; i < il; i++) {\n      list.items.push(new Item(valueNames, itemElements[i]));\n    }\n  };\n\n  var parseAsync = function parseAsync(itemElements, valueNames) {\n    var itemsToIndex = itemElements.splice(0, 50); // TODO: If < 100 items, what happens in IE etc?\n\n    parse(itemsToIndex, valueNames);\n\n    if (itemElements.length > 0) {\n      setTimeout(function () {\n        parseAsync(itemElements, valueNames);\n      }, 1);\n    } else {\n      list.update();\n      list.trigger('parseComplete');\n    }\n  };\n\n  list.handlers.parseComplete = list.handlers.parseComplete || [];\n  return function () {\n    var itemsToIndex = getChildren(list.list),\n        valueNames = list.valueNames;\n\n    if (list.indexAsync) {\n      parseAsync(itemsToIndex, valueNames);\n    } else {\n      parse(itemsToIndex, valueNames);\n    }\n  };\n};\n\n},{\"./item\":6}],9:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (_list) {\n  var item, text, columns, searchString, customSearch;\n  var prepare = {\n    resetList: function resetList() {\n      _list.i = 1;\n\n      _list.templater.clear();\n\n      customSearch = undefined;\n    },\n    setOptions: function setOptions(args) {\n      if (args.length == 2 && args[1] instanceof Array) {\n        columns = args[1];\n      } else if (args.length == 2 && typeof args[1] == \"function\") {\n        columns = undefined;\n        customSearch = args[1];\n      } else if (args.length == 3) {\n        columns = args[1];\n        customSearch = args[2];\n      } else {\n        columns = undefined;\n      }\n    },\n    setColumns: function setColumns() {\n      if (_list.items.length === 0) return;\n\n      if (columns === undefined) {\n        columns = _list.searchColumns === undefined ? prepare.toArray(_list.items[0].values()) : _list.searchColumns;\n      }\n    },\n    setSearchString: function setSearchString(s) {\n      s = _list.utils.toString(s).toLowerCase();\n      s = s.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\"); // Escape regular expression characters\n\n      searchString = s;\n    },\n    toArray: function toArray(values) {\n      var tmpColumn = [];\n\n      for (var name in values) {\n        tmpColumn.push(name);\n      }\n\n      return tmpColumn;\n    }\n  };\n  var search = {\n    list: function list() {\n      for (var k = 0, kl = _list.items.length; k < kl; k++) {\n        search.item(_list.items[k]);\n      }\n    },\n    item: function item(_item) {\n      _item.found = false;\n\n      for (var j = 0, jl = columns.length; j < jl; j++) {\n        if (search.values(_item.values(), columns[j])) {\n          _item.found = true;\n          return;\n        }\n      }\n    },\n    values: function values(_values, column) {\n      if (_values.hasOwnProperty(column)) {\n        text = _list.utils.toString(_values[column]).toLowerCase();\n\n        if (searchString !== \"\" && text.search(searchString) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    reset: function reset() {\n      _list.reset.search();\n\n      _list.searched = false;\n    }\n  };\n\n  var searchMethod = function searchMethod(str) {\n    _list.trigger('searchStart');\n\n    prepare.resetList();\n    prepare.setSearchString(str);\n    prepare.setOptions(arguments); // str, cols|searchFunction, searchFunction\n\n    prepare.setColumns();\n\n    if (searchString === \"\") {\n      search.reset();\n    } else {\n      _list.searched = true;\n\n      if (customSearch) {\n        customSearch(searchString, columns);\n      } else {\n        search.list();\n      }\n    }\n\n    _list.update();\n\n    _list.trigger('searchComplete');\n\n    return _list.visibleItems;\n  };\n\n  _list.handlers.searchStart = _list.handlers.searchStart || [];\n  _list.handlers.searchComplete = _list.handlers.searchComplete || [];\n\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'keyup', function (e) {\n    var target = e.target || e.srcElement,\n        // IE have srcElement\n    alreadyCleared = target.value === \"\" && !_list.searched;\n\n    if (!alreadyCleared) {\n      // If oninput already have resetted the list, do nothing\n      searchMethod(target.value);\n    }\n  }); // Used to detect click on HTML5 clear button\n\n\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'input', function (e) {\n    var target = e.target || e.srcElement;\n\n    if (target.value === \"\") {\n      searchMethod('');\n    }\n  });\n\n  return searchMethod;\n};\n\n},{}],10:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  var buttons = {\n    els: undefined,\n    clear: function clear() {\n      for (var i = 0, il = buttons.els.length; i < il; i++) {\n        list.utils.classes(buttons.els[i]).remove('asc');\n        list.utils.classes(buttons.els[i]).remove('desc');\n      }\n    },\n    getOrder: function getOrder(btn) {\n      var predefinedOrder = list.utils.getAttribute(btn, 'data-order');\n\n      if (predefinedOrder == \"asc\" || predefinedOrder == \"desc\") {\n        return predefinedOrder;\n      } else if (list.utils.classes(btn).has('desc')) {\n        return \"asc\";\n      } else if (list.utils.classes(btn).has('asc')) {\n        return \"desc\";\n      } else {\n        return \"asc\";\n      }\n    },\n    getInSensitive: function getInSensitive(btn, options) {\n      var insensitive = list.utils.getAttribute(btn, 'data-insensitive');\n\n      if (insensitive === \"false\") {\n        options.insensitive = false;\n      } else {\n        options.insensitive = true;\n      }\n    },\n    setOrder: function setOrder(options) {\n      for (var i = 0, il = buttons.els.length; i < il; i++) {\n        var btn = buttons.els[i];\n\n        if (list.utils.getAttribute(btn, 'data-sort') !== options.valueName) {\n          continue;\n        }\n\n        var predefinedOrder = list.utils.getAttribute(btn, 'data-order');\n\n        if (predefinedOrder == \"asc\" || predefinedOrder == \"desc\") {\n          if (predefinedOrder == options.order) {\n            list.utils.classes(btn).add(options.order);\n          }\n        } else {\n          list.utils.classes(btn).add(options.order);\n        }\n      }\n    }\n  };\n\n  var sort = function sort() {\n    list.trigger('sortStart');\n    var options = {};\n    var target = arguments[0].currentTarget || arguments[0].srcElement || undefined;\n\n    if (target) {\n      options.valueName = list.utils.getAttribute(target, 'data-sort');\n      buttons.getInSensitive(target, options);\n      options.order = buttons.getOrder(target);\n    } else {\n      options = arguments[1] || options;\n      options.valueName = arguments[0];\n      options.order = options.order || \"asc\";\n      options.insensitive = typeof options.insensitive == \"undefined\" ? true : options.insensitive;\n    }\n\n    buttons.clear();\n    buttons.setOrder(options); // caseInsensitive\n    // alphabet\n\n    var customSortFunction = options.sortFunction || list.sortFunction || null,\n        multi = options.order === 'desc' ? -1 : 1,\n        sortFunction;\n\n    if (customSortFunction) {\n      sortFunction = function sortFunction(itemA, itemB) {\n        return customSortFunction(itemA, itemB, options) * multi;\n      };\n    } else {\n      sortFunction = function sortFunction(itemA, itemB) {\n        var sort = list.utils.naturalSort;\n        sort.alphabet = list.alphabet || options.alphabet || undefined;\n\n        if (!sort.alphabet && options.insensitive) {\n          sort = list.utils.naturalSort.caseInsensitive;\n        }\n\n        return sort(itemA.values()[options.valueName], itemB.values()[options.valueName]) * multi;\n      };\n    }\n\n    list.items.sort(sortFunction);\n    list.update();\n    list.trigger('sortComplete');\n  }; // Add handlers\n\n\n  list.handlers.sortStart = list.handlers.sortStart || [];\n  list.handlers.sortComplete = list.handlers.sortComplete || [];\n  buttons.els = list.utils.getByClass(list.listContainer, list.sortClass);\n  list.utils.events.bind(buttons.els, 'click', sort);\n  list.on('searchStart', buttons.clear);\n  list.on('filterStart', buttons.clear);\n  return sort;\n};\n\n},{}],11:[function(require,module,exports){\n\"use strict\";\n\nvar Templater = function Templater(list) {\n  var itemSource,\n      templater = this;\n\n  var init = function init() {\n    itemSource = templater.getItemSource(list.item);\n\n    if (itemSource) {\n      itemSource = templater.clearSourceItem(itemSource, list.valueNames);\n    }\n  };\n\n  this.clearSourceItem = function (el, valueNames) {\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm;\n\n      if (valueNames[i].data) {\n        for (var j = 0, jl = valueNames[i].data.length; j < jl; j++) {\n          el.setAttribute('data-' + valueNames[i].data[j], '');\n        }\n      } else if (valueNames[i].attr && valueNames[i].name) {\n        elm = list.utils.getByClass(el, valueNames[i].name, true);\n\n        if (elm) {\n          elm.setAttribute(valueNames[i].attr, \"\");\n        }\n      } else {\n        elm = list.utils.getByClass(el, valueNames[i], true);\n\n        if (elm) {\n          elm.innerHTML = \"\";\n        }\n      }\n\n      elm = undefined;\n    }\n\n    return el;\n  };\n\n  this.getItemSource = function (item) {\n    if (item === undefined) {\n      var nodes = list.list.childNodes,\n          items = [];\n\n      for (var i = 0, il = nodes.length; i < il; i++) {\n        // Only textnodes have a data attribute\n        if (nodes[i].data === undefined) {\n          return nodes[i].cloneNode(true);\n        }\n      }\n    } else if (/<tr[\\s>]/g.exec(item)) {\n      var tbody = document.createElement('tbody');\n      tbody.innerHTML = item;\n      return tbody.firstChild;\n    } else if (item.indexOf(\"<\") !== -1) {\n      var div = document.createElement('div');\n      div.innerHTML = item;\n      return div.firstChild;\n    } else {\n      var source = document.getElementById(list.item);\n\n      if (source) {\n        return source;\n      }\n    }\n\n    return undefined;\n  };\n\n  this.get = function (item, valueNames) {\n    templater.create(item);\n    var values = {};\n\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm;\n\n      if (valueNames[i].data) {\n        for (var j = 0, jl = valueNames[i].data.length; j < jl; j++) {\n          values[valueNames[i].data[j]] = list.utils.getAttribute(item.elm, 'data-' + valueNames[i].data[j]);\n        }\n      } else if (valueNames[i].attr && valueNames[i].name) {\n        elm = list.utils.getByClass(item.elm, valueNames[i].name, true);\n        values[valueNames[i].name] = elm ? list.utils.getAttribute(elm, valueNames[i].attr) : \"\";\n      } else {\n        elm = list.utils.getByClass(item.elm, valueNames[i], true);\n        values[valueNames[i]] = elm ? elm.innerHTML : \"\";\n      }\n\n      elm = undefined;\n    }\n\n    return values;\n  };\n\n  this.set = function (item, values) {\n    var getValueName = function getValueName(name) {\n      for (var i = 0, il = list.valueNames.length; i < il; i++) {\n        if (list.valueNames[i].data) {\n          var data = list.valueNames[i].data;\n\n          for (var j = 0, jl = data.length; j < jl; j++) {\n            if (data[j] === name) {\n              return {\n                data: name\n              };\n            }\n          }\n        } else if (list.valueNames[i].attr && list.valueNames[i].name && list.valueNames[i].name == name) {\n          return list.valueNames[i];\n        } else if (list.valueNames[i] === name) {\n          return name;\n        }\n      }\n    };\n\n    var setValue = function setValue(name, value) {\n      var elm;\n      var valueName = getValueName(name);\n      if (!valueName) return;\n\n      if (valueName.data) {\n        item.elm.setAttribute('data-' + valueName.data, value);\n      } else if (valueName.attr && valueName.name) {\n        elm = list.utils.getByClass(item.elm, valueName.name, true);\n\n        if (elm) {\n          elm.setAttribute(valueName.attr, value);\n        }\n      } else {\n        elm = list.utils.getByClass(item.elm, valueName, true);\n\n        if (elm) {\n          elm.innerHTML = value;\n        }\n      }\n\n      elm = undefined;\n    };\n\n    if (!templater.create(item)) {\n      for (var v in values) {\n        if (values.hasOwnProperty(v)) {\n          setValue(v, values[v]);\n        }\n      }\n    }\n  };\n\n  this.create = function (item) {\n    if (item.elm !== undefined) {\n      return false;\n    }\n\n    if (itemSource === undefined) {\n      throw new Error(\"The list need to have at list one item on init otherwise you'll have to add a template.\");\n    }\n    /* If item source does not exists, use the first item in list as\n    source for new items */\n\n\n    var newItem = itemSource.cloneNode(true);\n    newItem.removeAttribute('id');\n    item.elm = newItem;\n    templater.set(item, item.values());\n    return true;\n  };\n\n  this.remove = function (item) {\n    if (item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n\n  this.show = function (item) {\n    templater.create(item);\n    list.list.appendChild(item.elm);\n  };\n\n  this.hide = function (item) {\n    if (item.elm !== undefined && item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n\n  this.clear = function () {\n    /* .innerHTML = ''; fucks up IE */\n    if (list.list.hasChildNodes()) {\n      while (list.list.childNodes.length >= 1) {\n        list.list.removeChild(list.list.firstChild);\n      }\n    }\n  };\n\n  init();\n};\n\nmodule.exports = function (list) {\n  return new Templater(list);\n};\n\n},{}],12:[function(require,module,exports){\n\"use strict\";\n\n/**\n * Module dependencies.\n */\nvar index = require('./index-of');\n/**\n * Whitespace regexp.\n */\n\n\nvar re = /\\s+/;\n/**\n * toString reference.\n */\n\nvar toString = Object.prototype.toString;\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nmodule.exports = function (el) {\n  return new ClassList(el);\n};\n/**\n * Initialize a new ClassList for `el`.\n *\n * @param {Element} el\n * @api private\n */\n\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n\n  this.el = el;\n  this.list = el.classList;\n}\n/**\n * Add class `name` if not already present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.add = function (name) {\n  // classList\n  if (this.list) {\n    this.list.add(name);\n    return this;\n  } // fallback\n\n\n  var arr = this.array();\n  var i = index(arr, name);\n  if (!~i) arr.push(name);\n  this.el.className = arr.join(' ');\n  return this;\n};\n/**\n * Remove class `name` when present, or\n * pass a regular expression to remove\n * any which match.\n *\n * @param {String|RegExp} name\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.remove = function (name) {\n  // classList\n  if (this.list) {\n    this.list.remove(name);\n    return this;\n  } // fallback\n\n\n  var arr = this.array();\n  var i = index(arr, name);\n  if (~i) arr.splice(i, 1);\n  this.el.className = arr.join(' ');\n  return this;\n};\n/**\n * Toggle class `name`, can force state via `force`.\n *\n * For browsers that support classList, but do not support `force` yet,\n * the mistake will be detected and corrected.\n *\n * @param {String} name\n * @param {Boolean} force\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.toggle = function (name, force) {\n  // classList\n  if (this.list) {\n    if (\"undefined\" !== typeof force) {\n      if (force !== this.list.toggle(name, force)) {\n        this.list.toggle(name); // toggle again to correct\n      }\n    } else {\n      this.list.toggle(name);\n    }\n\n    return this;\n  } // fallback\n\n\n  if (\"undefined\" !== typeof force) {\n    if (!force) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  } else {\n    if (this.has(name)) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  }\n\n  return this;\n};\n/**\n * Return an array of classes.\n *\n * @return {Array}\n * @api public\n */\n\n\nClassList.prototype.array = function () {\n  var className = this.el.getAttribute('class') || '';\n  var str = className.replace(/^\\s+|\\s+$/g, '');\n  var arr = str.split(re);\n  if ('' === arr[0]) arr.shift();\n  return arr;\n};\n/**\n * Check if class `name` is present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.has = ClassList.prototype.contains = function (name) {\n  return this.list ? this.list.contains(name) : !!~index(this.array(), name);\n};\n\n},{\"./index-of\":18}],13:[function(require,module,exports){\n\"use strict\";\n\nvar bind = window.addEventListener ? 'addEventListener' : 'attachEvent',\n    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',\n    prefix = bind !== 'addEventListener' ? 'on' : '',\n    toArray = require('./to-array');\n/**\n * Bind `el` event `type` to `fn`.\n *\n * @param {Element} el, NodeList, HTMLCollection or Array\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\n\n\nexports.bind = function (el, type, fn, capture) {\n  el = toArray(el);\n\n  for (var i = 0; i < el.length; i++) {\n    el[i][bind](prefix + type, fn, capture || false);\n  }\n};\n/**\n * Unbind `el` event `type`'s callback `fn`.\n *\n * @param {Element} el, NodeList, HTMLCollection or Array\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\n\n\nexports.unbind = function (el, type, fn, capture) {\n  el = toArray(el);\n\n  for (var i = 0; i < el.length; i++) {\n    el[i][unbind](prefix + type, fn, capture || false);\n  }\n};\n\n},{\"./to-array\":19}],14:[function(require,module,exports){\n\"use strict\";\n\n/*\n * Source: https://github.com/segmentio/extend\n */\nmodule.exports = function extend(object) {\n  // Takes an unlimited number of extenders.\n  var args = Array.prototype.slice.call(arguments, 1); // For each extender, copy their properties on our object.\n\n  for (var i = 0, source; source = args[i]; i++) {\n    if (!source) continue;\n\n    for (var property in source) {\n      object[property] = source[property];\n    }\n  }\n\n  return object;\n};\n\n},{}],15:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (text, pattern, options) {\n  // Aproximately where in the text is the pattern expected to be found?\n  var Match_Location = options.location || 0; //Determines how close the match must be to the fuzzy location (specified above). An exact letter match which is 'distance' characters away from the fuzzy location would score as a complete mismatch. A distance of '0' requires the match be at the exact location specified, a threshold of '1000' would require a perfect match to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n\n  var Match_Distance = options.distance || 100; // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match (of both letters and location), a threshold of '1.0' would match anything.\n\n  var Match_Threshold = options.threshold || 0.4;\n  if (pattern === text) return true; // Exact match\n\n  if (pattern.length > 32) return false; // This algorithm cannot be used\n  // Set starting location at beginning text and initialise the alphabet.\n\n  var loc = Match_Location,\n      s = function () {\n    var q = {},\n        i;\n\n    for (i = 0; i < pattern.length; i++) {\n      q[pattern.charAt(i)] = 0;\n    }\n\n    for (i = 0; i < pattern.length; i++) {\n      q[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n    }\n\n    return q;\n  }(); // Compute and return the score for a match with e errors and x location.\n  // Accesses loc and pattern through being a closure.\n\n\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length,\n        proximity = Math.abs(loc - x);\n\n    if (!Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n\n    return accuracy + proximity / Match_Distance;\n  }\n\n  var score_threshold = Match_Threshold,\n      // Highest score beyond which we give up.\n  best_loc = text.indexOf(pattern, loc); // Is there a nearby exact match? (speedup)\n\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold); // What about in the other direction? (speedup)\n\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  } // Initialise the bit arrays.\n\n\n  var matchmask = 1 << pattern.length - 1;\n  best_loc = -1;\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n\n      if (d === 0) {\n        // First pass: exact match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        // Subsequent passes: fuzzy match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];\n      }\n\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n\n    last_rd = rd;\n  }\n\n  return best_loc < 0 ? false : true;\n};\n\n},{}],16:[function(require,module,exports){\n\"use strict\";\n\n/**\n * A cross-browser implementation of getAttribute.\n * Source found here: http://stackoverflow.com/a/3755343/361337 written by Vivin Paliath\n *\n * Return the value for `attr` at `element`.\n *\n * @param {Element} el\n * @param {String} attr\n * @api public\n */\nmodule.exports = function (el, attr) {\n  var result = el.getAttribute && el.getAttribute(attr) || null;\n\n  if (!result) {\n    var attrs = el.attributes;\n    var length = attrs.length;\n\n    for (var i = 0; i < length; i++) {\n      if (attr[i] !== undefined) {\n        if (attr[i].nodeName === attr) {\n          result = attr[i].nodeValue;\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\n},{}],17:[function(require,module,exports){\n\"use strict\";\n\n/**\n * A cross-browser implementation of getElementsByClass.\n * Heavily based on Dustin Diaz's function: http://dustindiaz.com/getelementsbyclass.\n *\n * Find all elements with class `className` inside `container`.\n * Use `single = true` to increase performance in older browsers\n * when only one element is needed.\n *\n * @param {String} className\n * @param {Element} container\n * @param {Boolean} single\n * @api public\n */\nvar getElementsByClassName = function getElementsByClassName(container, className, single) {\n  if (single) {\n    return container.getElementsByClassName(className)[0];\n  } else {\n    return container.getElementsByClassName(className);\n  }\n};\n\nvar querySelector = function querySelector(container, className, single) {\n  className = '.' + className;\n\n  if (single) {\n    return container.querySelector(className);\n  } else {\n    return container.querySelectorAll(className);\n  }\n};\n\nvar polyfill = function polyfill(container, className, single) {\n  var classElements = [],\n      tag = '*';\n  var els = container.getElementsByTagName(tag);\n  var elsLen = els.length;\n  var pattern = new RegExp(\"(^|\\\\s)\" + className + \"(\\\\s|$)\");\n\n  for (var i = 0, j = 0; i < elsLen; i++) {\n    if (pattern.test(els[i].className)) {\n      if (single) {\n        return els[i];\n      } else {\n        classElements[j] = els[i];\n        j++;\n      }\n    }\n  }\n\n  return classElements;\n};\n\nmodule.exports = function () {\n  return function (container, className, single, options) {\n    options = options || {};\n\n    if (options.test && options.getElementsByClassName || !options.test && document.getElementsByClassName) {\n      return getElementsByClassName(container, className, single);\n    } else if (options.test && options.querySelector || !options.test && document.querySelector) {\n      return querySelector(container, className, single);\n    } else {\n      return polyfill(container, className, single);\n    }\n  };\n}();\n\n},{}],18:[function(require,module,exports){\n\"use strict\";\n\nvar indexOf = [].indexOf;\n\nmodule.exports = function (arr, obj) {\n  if (indexOf) return arr.indexOf(obj);\n\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n\n  return -1;\n};\n\n},{}],19:[function(require,module,exports){\n\"use strict\";\n\n/**\n * Source: https://github.com/timoxley/to-array\n *\n * Convert an array-like object into an `Array`.\n * If `collection` is already an `Array`, then will return a clone of `collection`.\n *\n * @param {Array | Mixed} collection An `Array` or array-like object to convert e.g. `arguments` or `NodeList`\n * @return {Array} Naive conversion of `collection` to a new `Array`.\n * @api public\n */\nmodule.exports = function toArray(collection) {\n  if (typeof collection === 'undefined') return [];\n  if (collection === null) return [null];\n  if (collection === window) return [window];\n  if (typeof collection === 'string') return [collection];\n  if (isArray(collection)) return collection;\n  if (typeof collection.length != 'number') return [collection];\n  if (typeof collection === 'function' && collection instanceof Function) return [collection];\n  var arr = [];\n\n  for (var i = 0; i < collection.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(collection, i) || i in collection) {\n      arr.push(collection[i]);\n    }\n  }\n\n  if (!arr.length) return [];\n  return arr;\n};\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === \"[object Array]\";\n}\n\n},{}],20:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (s) {\n  s = s === undefined ? \"\" : s;\n  s = s === null ? \"\" : s;\n  s = s.toString();\n  return s;\n};\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (charCodeA < alphabetIndexMapLength && charCodeB < alphabetIndexMapLength && alphabetIndexMap[charCodeA] !== -1 && alphabetIndexMap[charCodeB] !== -1) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function (a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function get() {\n      return alphabet;\n    },\n    set: function set(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n      var i = 0;\n\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n\n      alphabetIndexMapLength = alphabetIndexMap.length;\n\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    }\n  }\n});\nmodule.exports = naturalCompare;\n\n},{}],22:[function(require,module,exports){\nmodule.exports={\n  \"breakpoints\" : {\n    \"xs\": \"480px\",\n    \"sm\": \"620px\",\n    \"md\": \"760px\",\n    \"lg\": \"990px\",\n    \"xl\": \"1380px\"\n  }\n}\n\n},{}],23:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    trigger: '[data-dismiss]',\n    target: '[data-dismissible]',\n    classToggle: 'dismiss'\n  };\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var target = trigger.closest(settings.target);\n\n      if (target) {\n        _utility[\"default\"].toggleClass(target, settings.classToggle);\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":27}],24:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Drawer plugin\n * ---\n * A container component that slides in from the left or right. It typically\n * contains menus, search or other content for your app.\n */\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    // Component element classes\n    classTarget: 'drawer__item',\n    classTrigger: 'drawer__trigger',\n    classInner: 'drawer__dialog',\n    // Component element switch classes\n    // Used with RegExp to search and replace element classes\n    classTargetSwitch: 'modal',\n    classTriggerSwitch: 'modal__trigger',\n    classInnerSwitch: 'modal__dialog',\n    // State and utility classes\n    classActive: 'is-active',\n    classTransitionNone: 'transition_none',\n    // Whether or not to store the save state in local storage\n    // {boolean} The string to save our state object as\n    saveState: true,\n    // Whether or not to enable the switch functionality. If enabled, a string\n    // selector to check for should be passed.\n    // {false} || {string} e.g. '[data-drawer-switch]'\n    \"switch\": '[data-drawer-switch]',\n    // The default break point for when to switch to drawer or modal classes\n    // {string} Either a breakpoint key or pixel value\n    switchBreakpoint: 'lg',\n    // Duration before removing the transition_none class on initial load\n    transitionDuration: 500 // Where we store all our drawers available in the DOM\n\n  };\n  var drawers = []; // Where we build the save state object before we pass it to local storage\n\n  var drawerState = {}; // Where we store all our switch drawers available in the DOM\n\n  var switchDrawers; // Where we store all our media query lists along with their drawers\n\n  var mqlArray = [];\n  /**\n   * The constructor method, run as soon as an instance is created\n   * ---\n   * @param {Object} options - A json object with your custom settings\n   */\n\n  api.init = function (options) {\n    // Merge the defaults and passed options into our settings obj\n    settings = _utility[\"default\"].extend(defaults, options || {}); // Get all the drawers on the page and save them with their default state\n\n    document.querySelectorAll('.' + settings.classTarget).forEach(function (drawer) {\n      drawers.push({\n        'drawer': drawer,\n        'defaultState': _utility[\"default\"].hasClass(drawer, settings.classActive)\n      });\n    }); // Initialize a promise and init save state if it's enabled\n\n    var promiseSaveState = new Promise(function (resolve) {\n      if (settings.saveState) {\n        initSaveState(resolve);\n      } else {\n        resolve();\n      }\n    }); // After promise is resolved and switch is enabled, initialize switch\n\n    promiseSaveState.then(function () {\n      if (settings[\"switch\"]) {\n        initSwitch();\n      }\n    }); // Add our drawer trigger event listener\n\n    document.addEventListener('click', trigger, false);\n  };\n  /**\n   * The deconstructor method, used to reset and destroy the drawer instance\n   * ---\n   * @param {Boolean} defaultState - Return drawers to their default state?\n   */\n\n\n  api.destroy = function () {\n    var defaultState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    // Destroy our switch\n    destroySwitch(); // Destroy our state\n\n    stateClear(); // Return drawrs to their default state\n\n    if (defaultState) {\n      drawers.forEach(function (item) {\n        if (item.defaultState) {\n          _utility[\"default\"].addClass(item.drawer, settings.classActive);\n        } else {\n          _utility[\"default\"].removeClass(item.drawer, settings.classActive);\n        }\n      });\n    } // Clear our variables\n\n\n    settings = null;\n    drawers = []; // Remove the drawer trigger event listener\n\n    document.removeEventListener('click', trigger, false);\n  };\n  /**\n   * Public method to open a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.open = function (selector) {\n    selector = selector ? selector : '.' + settings.classTarget;\n    toggle(document.querySelectorAll(selector), 'open');\n  };\n  /**\n   * Public method to close a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.close = function (selector) {\n    selector = selector ? selector : '.' + settings.classTarget;\n    toggle(document.querySelectorAll(selector), 'close');\n  };\n  /**\n   * Public method to toggle a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.toggle = function (selector) {\n    selector = selector ? selector : '.' + settings.classTarget;\n    toggle(document.querySelectorAll(selector));\n  };\n  /**\n   * Public method to switch a modal into drawer\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.switchToDrawer = function (selector) {\n    // Use default selector if one isn't passed\n    selector = selector ? selector : settings[\"switch\"]; // Query our elements using the provided selector\n\n    var items = document.querySelectorAll(selector); // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items);\n    items.forEach(function (item) {\n      switchToDrawer(item);\n    });\n  };\n  /**\n   * Public method to switch a drawer into modal\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.switchToModal = function (selector) {\n    // Use default selector if one isn't passed\n    selector = selector ? selector : settings[\"switch\"]; // Query our elements using the provided selector\n\n    var items = document.querySelectorAll(selector); // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items);\n    items.forEach(function (item) {\n      switchToModal(item);\n    });\n  };\n  /**\n   * Save the drawer current drawer state\n   */\n\n\n  api.stateSave = function () {\n    stateSave();\n  };\n  /**\n   * Clears drawer state from local storage\n   */\n\n\n  api.stateClear = function () {\n    stateClear();\n  };\n  /**\n   * Private function to close a drawer or group of drawers\n   * ---\n   * @param {Node} drawer - The drawer element(s) to close\n   * @param {String} state - Whether to open, close or toggle the drawer(s)\n   * @param {Function} callback - The callback function\n   */\n\n\n  var toggle = function toggle(drawer, state, callback) {\n    // Check if drawer(s) should be opened, closed or toggled and either add or\n    // remove the active class to the passed drawer(s)\n    if (state === 'open') {\n      _utility[\"default\"].addClass(drawer, settings.classActive);\n    } else if (state === 'close') {\n      _utility[\"default\"].removeClass(drawer, settings.classActive);\n    } else {\n      _utility[\"default\"].toggleClass(drawer, settings.classActive);\n    } // Save state if feature is enabled\n\n\n    if (settings.saveState) {\n      stateSave(drawer);\n    } // Fire the callback function if one was passed\n\n\n    typeof callback === 'function' && callback();\n  };\n  /**\n   * Private function to toggle drawer via a trigger\n   */\n\n\n  var trigger = function trigger() {\n    // Get the closest trigger element from the click event\n    var trigger = event.target.closest('.' + settings.classTrigger); // Check that the class trigger was clicked\n\n    if (trigger) {\n      // Get the drawer selector from the trigger via [data-target]\n      var dataDrawer = trigger.dataset.target; // Check that a drawer target was given\n\n      if (dataDrawer) {\n        // Query the drawer element and toggle it if it exists\n        var drawer = document.querySelectorAll(dataDrawer);\n\n        if (drawer.length) {\n          toggle(drawer);\n        }\n      }\n    }\n  };\n  /**\n   * Private function that initializes the save state functionality\n   * ---\n   * @param {Function} callback - The callback function\n   */\n\n\n  var initSaveState = function initSaveState(callback) {\n    // Check if a drawer state is already saved in local storage and save the\n    // json parsed data to our local variable if it does\n    if (localStorage.getItem('drawerState')) {\n      drawerState = JSON.parse(localStorage.getItem('drawerState'));\n    } // Loop through all drawers\n\n\n    drawers.forEach(function (item) {\n      var drawer = item.drawer; // Set the default state if one is not set\n\n      if (drawer.id in drawerState === false) {\n        stateSave(drawer);\n      } // Get our drawer dialog element\n\n\n      var dialog = drawer.querySelector('.' + settings.classInner); // Disables transitions as default states are being set\n\n      var transitionDelay = function transitionDelay() {\n        if (dialog) {\n          _utility[\"default\"].addClass(dialog, settings.classTransitionNone);\n\n          setTimeout(function () {\n            _utility[\"default\"].removeClass(dialog, settings.classTransitionNone);\n          }, settings.transitionDuration);\n        }\n      }; // Toggle our drawer state based on the saved state\n\n\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, 'close', transitionDelay);\n      } else if (drawerState[drawer.id]) {\n        toggle(drawer, 'open', transitionDelay);\n      }\n    }); // Fire the callback function if one was passed and return our state object\n\n    typeof callback === 'function' && callback(drawerState);\n  };\n  /**\n   * Private function that saves the state of a specific or all drawers\n   * ---\n   * @param {Node} items - The drawer element(s) to save state\n   */\n\n\n  var stateSave = function stateSave(items) {\n    // Save all drawers if an items arg wasn't passed\n    items = items ? items : drawers; // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items); // Loop through our drawers and save their new state to local storage\n\n    items.forEach(function (item) {\n      if (item.drawer) {\n        item = item.drawer;\n      } // Only save drawer state if an id exists\n\n\n      if (item.id) {\n        drawerState[item.id] = _utility[\"default\"].hasClass(item, settings.classActive);\n        localStorage.setItem('drawerState', JSON.stringify(drawerState));\n      }\n    });\n  };\n  /**\n   * Private function that clears the drawer state\n   */\n\n\n  var stateClear = function stateClear() {\n    drawerState = {};\n    localStorage.removeItem('drawerState');\n  };\n  /**\n   * Private function that initializes the switch functionality\n   */\n\n\n  var initSwitch = function initSwitch() {\n    // Query all the drawers with the switch feature enabled\n    switchDrawers = document.querySelectorAll(settings[\"switch\"]); // Loop through the switch drawers\n\n    switchDrawers.forEach(function (drawer) {\n      // Get the local breakpoint if one is set\n      // Remove brackets and the intial data flag\n      var cleanSelector = settings[\"switch\"].replace('[', '').replace(']', '').replace('data-', ''); // Convert sring to camelCase\n\n      cleanSelector = cleanSelector.replace(/-([a-z])/g, function (g) {\n        return g[1].toUpperCase();\n      }); // Check which breakpoint to use:\n      // a) The local bp set on the drawer\n      // b) The bp available in config using a key\n      // c) The raw pixel value provided in settings\n\n      var bp = drawer.dataset[cleanSelector];\n\n      if (bp) {\n        bp = _utility[\"default\"].getBreakpoint(bp);\n\n        if (!bp) {\n          bp = drawer.dataset[cleanSelector];\n        }\n      } else {\n        bp = _utility[\"default\"].getBreakpoint(settings.switchBreakpoint);\n\n        if (!bp) {\n          bp = settings.switchBreakpoint;\n        }\n      } // Media query listener\n\n\n      var mql = window.matchMedia(\"(min-width:\" + bp + \")\"); // Switch to modal if media doesn't match (< bp)\n\n      if (!mql.matches) {\n        switchToModal(drawer);\n      } // Add our media query listener\n\n\n      mql.addListener(switchCheck); // Push the mql to our array along with it's drawer\n\n      mqlArray.push({\n        'drawer': drawer,\n        'mql': mql\n      });\n    });\n  };\n  /**\n   * Private function that destroys the switch functionality\n   */\n\n\n  var destroySwitch = function destroySwitch() {\n    // Switch all modals back to their original drawer state\n    switchDrawers.forEach(function (drawer) {\n      switchToDrawer(drawer);\n    }); // Remove the media query listeners\n\n    mqlArray.forEach(function (item) {\n      item.mql.removeListener(switchCheck);\n    }); // Return switch variables to their original state\n\n    switchDrawers = null;\n    mqlArray = [];\n  };\n  /**\n   * Private function that checks when a media query hits a match and switches\n   * the component from drawer to modal as needed\n   * ---\n   * @param {MediaQueryList} mql - The MediaQueryList object for the media query\n   * @param {Node} drawer - The drawer element to switch\n   */\n\n\n  var switchCheck = function switchCheck() {\n    mqlArray.forEach(function (item) {\n      if (item.mql.matches) {\n        switchToDrawer(item.drawer);\n      } else {\n        switchToModal(item.drawer);\n      }\n    });\n  };\n  /**\n   * Private function that switches a modal into a drawer component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n\n\n  var switchToDrawer = function switchToDrawer(drawer) {\n    // Get the dialog and trigger elements related to this component\n    var dialog = drawer.querySelector('.dialog');\n    var triggers = document.querySelectorAll('[data-target=\"#' + drawer.id + '\"]'); // Switch the modal component to drawer\n\n    drawer.className = drawer.className.replace(new RegExp(settings.classTargetSwitch, 'gi'), settings.classTarget);\n    dialog.className = dialog.className.replace(new RegExp(settings.classInnerSwitch, 'gi'), settings.classInner);\n    triggers.forEach(function (trigger) {\n      trigger.className = trigger.className.replace(new RegExp(settings.classTriggerSwitch, 'gi'), settings.classTrigger);\n    }); // Open or close drawer based on save state\n\n    if (settings.saveState) {\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, 'close');\n      } else {\n        toggle(drawer, 'open');\n      }\n    }\n  };\n  /**\n   * Private function that switches a drawer into a modal component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n\n\n  var switchToModal = function switchToModal(drawer) {\n    // Get the dialog and trigger elements related to this component\n    var dialog = drawer.querySelector('.dialog');\n    var triggers = document.querySelectorAll('[data-target=\"#' + drawer.id + '\"]'); // Switch the drawer component to modal\n\n    drawer.className = drawer.className.replace(new RegExp(settings.classTarget, 'gi'), settings.classTargetSwitch);\n    dialog.className = dialog.className.replace(new RegExp(settings.classInner, 'gi'), settings.classInnerSwitch);\n    triggers.forEach(function (trigger) {\n      trigger.className = trigger.className.replace(new RegExp(settings.classTrigger, 'gi'), settings.classTriggerSwitch);\n    }); // Remove active class for modal styles by default\n\n    _utility[\"default\"].removeClass(drawer, settings.classActive);\n  };\n  /**\n   * Initialize our component and return the api\n   */\n\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":27}],25:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Modal plugin\n * ---\n * A component for changing the mode of a page to complete a critical task.\n * This is usually used in conjunction with the Dialog component to make\n * modal dialogs.\n */\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    classTarget: 'modal',\n    classTrigger: 'modal__trigger',\n    classInner: 'modal__dialog',\n    classActive: 'is-active',\n    focus: '[data-focus]'\n  };\n  var memoryTrigger;\n  var memoryTarget;\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n    document.addEventListener('touchend', run, false);\n    document.addEventListener('keyup', escape, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    memoryTarget = null;\n    memoryTrigger = null;\n    document.removeEventListener('click', run, false);\n    document.removeEventListener('touchend', run, false);\n    document.removeEventListener('keyup', escape, false);\n  };\n\n  api.open = function (selector) {\n    open(document.querySelectorAll(selector));\n  };\n\n  api.close = function (clear) {\n    close(clear);\n  };\n\n  var open = function open(target) {\n    _utility[\"default\"].addClass(target, settings.classActive);\n\n    if (target.length === 1) {\n      target = target.item(0);\n      var focus = target.querySelector(settings.focus);\n      target.addEventListener('transitionend', function _listener() {\n        if (focus) {\n          focus.focus();\n        } else {\n          target.focus();\n        }\n\n        this.removeEventListener('transitionend', _listener, true);\n      }, true);\n    }\n  };\n\n  var close = function close() {\n    var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var target = document.querySelectorAll('.' + settings.classTarget);\n\n    _utility[\"default\"].removeClass(target, settings.classActive);\n\n    if (clear == false && memoryTrigger && memoryTarget) {\n      if (memoryTarget.length === 1) {\n        memoryTarget = memoryTarget.item(0);\n        memoryTarget.addEventListener('transitionend', function _listener() {\n          if (memoryTrigger) {\n            memoryTrigger.focus();\n          }\n\n          memoryTarget = null;\n          memoryTrigger = null;\n          this.removeEventListener('transitionend', _listener, true);\n        }, true);\n      }\n    } else if (clear == true) {\n      memoryTarget = null;\n      memoryTrigger = null;\n    }\n  };\n\n  var escape = function escape() {\n    if (event.keyCode == 27) {\n      close();\n    }\n  };\n\n  var run = function run() {\n    var target = event.target.closest('.' + settings.classTarget);\n    var trigger = event.target.closest('.' + settings.classTrigger);\n    var inner = event.target.closest('.' + settings.classInner);\n\n    if (trigger) {\n      close();\n      var targetData = trigger.dataset.target;\n\n      if (targetData) {\n        memoryTarget = document.querySelectorAll(targetData);\n        memoryTrigger = trigger;\n        open(memoryTarget);\n      }\n\n      event.preventDefault();\n    } else if (target && !inner) {\n      close();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":27}],26:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    trigger: '[data-toggle-class]',\n    targets: '',\n    \"class\": ''\n  };\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var targets;\n\n      if (settings.targets) {\n        targets = document.querySelectorAll(settings.targets);\n      } else {\n        targets = document.querySelectorAll(trigger.dataset.toggleTarget);\n      }\n\n      if (targets.length) {\n        targets.forEach(function (target) {\n          _utility[\"default\"].toggleClass(target, trigger.dataset.toggleClass.split(' '));\n        });\n      } else {\n        if (settings[\"class\"]) {\n          _utility[\"default\"].toggleClass(trigger, settings[\"class\"]);\n        } else {\n          _utility[\"default\"].toggleClass(trigger, trigger.dataset.toggleClass.split(' '));\n        }\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":27}],27:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"config\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    _classCallCheck(this, _default);\n  }\n\n  _createClass(_default, null, [{\n    key: \"getBreakpoint\",\n\n    /**\n     * Get and output a breakpoint using it's key found in config.json\n     * ---\n     * @param {String} key - The key to search for in the breakpoints object\n     * @returns {String} - The pixel value of the breakpoint as a string\n     */\n    value: function getBreakpoint(key) {\n      return _config[\"default\"].breakpoints[key];\n    }\n    /**\n     * Checks if an element has a class or not\n     * ---\n     * @param {Node} el - Element(s) to check class(es) on\n     * @param {String || Array} c - Class(es) to check\n     * @returns {Boolean} - Returns true if class exists, otherwise false\n     */\n\n  }, {\n    key: \"hasClass\",\n    value: function hasClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      return c.some(function (c) {\n        var has = false;\n        el.forEach(function (el) {\n          if (el.classList.contains(c)) {\n            has = true;\n          }\n        });\n        return has;\n      });\n    }\n    /**\n     * Adds a class or classes to an element\n     * ---\n     * @param {Node} el - Element(s) to add class(es) on\n     * @param {String || Array} c - Class(es) to add\n     */\n\n  }, {\n    key: \"addClass\",\n    value: function addClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.add(c);\n        });\n      });\n    }\n    /**\n     * Remove a class or classes from an element\n     * ---\n     * @param {Node} el - Element(s) to remove class(es) from\n     * @param {String || Array} c - Class(es) to remove\n     */\n\n  }, {\n    key: \"removeClass\",\n    value: function removeClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.remove(c);\n        });\n      });\n    }\n    /**\n     * Toggle a class or classes on an element\n     * ---\n     * @param {Node} el - Element(s) to toggle class(es) on\n     * @param {String || Array} c - Class(es) to toggle\n     */\n\n  }, {\n    key: \"toggleClass\",\n    value: function toggleClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.toggle(c);\n        });\n      });\n    }\n    /**\n     * Find the closest parent element based on class. This is different from the\n     * native .closest() method in that it doesn't check the current element.\n     * ---\n     * @param {Node} el - Element to start search on\n     * @param {String || Array} c - Class(es) to check for\n     * @return {Node} - Closest parent element\n     */\n\n  }, {\n    key: \"closest\",\n    value: function closest(el, c) {\n      while ((el = el.parentElement) && !this.hasClass(el, c)) {\n        return el;\n      }\n    }\n    /**\n     * Converts a string or object to an array. If an array is passed, it's\n     * returned as is. Anything else is returned as an array.\n     * ---\n     * @param {Object} item - String or object to convert to an array\n     * @return {Array} - Return the converted array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(item) {\n      var array = [];\n\n      if (Array.isArray(item)) {\n        array = item;\n      } else {\n        array.push(item);\n      }\n\n      return array;\n    }\n    /**\n     * Merge two or more objects. Returns a new object. Set the first argument\n     * to `true` for a deep or recursive merge.\n     * ---\n     * @param {Boolean} [Optional] - If true, do a deep (or recursive) merge\n     * @param {Object} - The objects to merge together; each overriding the next\n     * @returns {Object} - Merged values of defaults and options\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (_extend) {\n      function extend() {\n        return _extend.apply(this, arguments);\n      }\n\n      extend.toString = function () {\n        return _extend.toString();\n      };\n\n      return extend;\n    }(function () {\n      var extended = {};\n      var deep = false;\n      var i = 0;\n      var length = arguments.length;\n\n      if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n        deep = arguments[0];\n        i++;\n      }\n\n      var merge = function merge(obj) {\n        for (var prop in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n              extended[prop] = extend(true, extended[prop], obj[prop]);\n            } else {\n              extended[prop] = obj[prop];\n            }\n          }\n        }\n      };\n\n      for (; i < length; i++) {\n        var obj = arguments[i];\n        merge(obj);\n      }\n\n      return extended;\n    })\n  }]);\n\n  return _default;\n}();\n\nexports[\"default\"] = _default;\n\n},{\"config\":22}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"file":"scripts.js"}