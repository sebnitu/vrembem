{"version":3,"sources":["src/js/app.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_modal2","_interopRequireDefault","_dismissible2","_list2","obj","__esModule","default","document","getElementById","blocksList","valueNames","data","listClass","updateList","values_type","value","filter","item","includes","values","type","addEventListener","onchange","sort","order","dismissible.js","list.js","modal.js","2","list","addAsync","callback","items","valuesToAdd","splice","concat","add","setTimeout","update","3","handlers","filterStart","filterComplete","filterFunction","trigger","reset","undefined","filtered","is","il","visibleItems","4","events","extend","toString","getByClass","fuzzy","options","location","distance","threshold","multiSearch","searchClass","fuzzySearch","search","searchString","columns","searchArguments","replace","split","k","kl","_item","found","foundArgument","j","jl","_values","searchArgument","hasOwnProperty","text","toLowerCase","bind","listContainer","target","srcElement","str","./utils/classes","./utils/events","./utils/extend","./utils/fuzzy","./utils/get-by-class","./utils/to-string","5","naturalSort","indexOf","classes","getAttribute","toArray","id","init","self","this","Item","initPagination","start","sortClass","page","matchingItems","searched","searchColumns","updated","utils","parse","templater","pagination","handler","on","reIndex","toJSON","json","push","added","notCreate","show","remove","valueName","get","matchedItems","size","clear","event","off","index","matching","hide","./add-async","./filter","./fuzzy-search","./item","./pagination","./parse","./search","./sort","./templater","./utils/get-attribute","./utils/index-of","./utils/to-array","string-natural-compare","6","initValues","element","newValues","name","set","visible","elm","parentNode","7","List","refresh","pagingList","l","pages","Math","ceil","currentPage","innerWindow","left","outerWindow","right","className","number","dotted","addEvent","_left","_right","_innerWindow","currentPageItem","dottedLeft","dottedRight","paginationClass","./index","8","itemElements","parseComplete","itemsToIndex","parent","nodes","childNodes","getChildren","indexAsync","parseAsync","9","_list","customSearch","prepare","resetList","setOptions","args","Array","setColumns","setSearchString","s","tmpColumn","column","searchMethod","arguments","searchStart","searchComplete","10","buttons","els","getOrder","btn","predefinedOrder","has","getInSensitive","insensitive","setOrder","currentTarget","sortFunction","customSortFunction","multi","itemA","itemB","alphabet","caseInsensitive","sortStart","sortComplete","11","Templater","itemSource","clearSourceItem","el","setAttribute","attr","innerHTML","getItemSource","cloneNode","exec","tbody","createElement","firstChild","div","source","create","setValue","getValueName","v","newItem","removeAttribute","removeChild","appendChild","hasChildNodes","12","re","Object","prototype","ClassList","nodeType","classList","arr","array","join","toggle","force","shift","contains","./index-of","13","window","unbind","removeEventListener","prefix","fn","capture","./to-array","14","object","slice","property","15","pattern","Match_Location","Match_Distance","Match_Threshold","loc","q","charAt","match_bitapScore_","x","accuracy","proximity","abs","score_threshold","best_loc","min","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","d","floor","max","finish","rd","charMatch","score","16","result","attributes","nodeName","nodeValue","17","container","single","test","getElementsByClassName","querySelector","querySelectorAll","classElements","getElementsByTagName","elsLen","RegExp","polyfill","18","19","collection","Function","20","21","alphabetIndexMap","alphabetIndexMapLength","isNumberCode","naturalCompare","b","lengthA","lengthB","aIndex","bIndex","charCodeA","charCodeAt","charCodeB","numStartA","numStartB","numEndA","numEndB","difference","defineProperties","22","defineProperty","api","settings","defaults","classToggle","run","closest","_utility2","toggleClass","preventDefault","destroy","_utility","./utility.js","23","classTrigger","classModal","classDialog","classActive","focus","memoryTrigger","memoryTarget","open","addClass","_listener","close","modals","removeClass","modal","dialog","dataModal","dataset","24","_createClass","props","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","_class","instance","TypeError","_classCallCheck","every","forEach","parentElement","hasClass","string","isArray","_extend","apply","extended","deep","merge","prop"],"mappings":"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","file":"scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar _modal = require('modal.js');\n\nvar _modal2 = _interopRequireDefault(_modal);\n\nvar _dismissible = require('dismissible.js');\n\nvar _dismissible2 = _interopRequireDefault(_dismissible);\n\nvar _list = require('list.js');\n\nvar _list2 = _interopRequireDefault(_list);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar modal = new _modal2.default();\nvar dismissible = new _dismissible2.default();\n\nvar home = document.getElementById('vrembem-blocks');\n\nif (home) {\n\n  var blocksList = new _list2.default('vrembem-blocks', {\n    valueNames: ['jumbo-list__name', { data: ['type'] }],\n    listClass: 'jumbo-list'\n  });\n\n  var updateList = function updateList() {\n    var values_type = document.getElementById('jumbo-filter__type').value;\n    blocksList.filter(function (item) {\n      return values_type.includes(item.values().type) || !values_type;\n    });\n  };\n\n  document.addEventListener('DOMContentLoaded', function () {\n    var filter = document.getElementById('jumbo-filter__type');\n    if (filter) {\n      filter.onchange = updateList;\n    }\n  }, false);\n\n  blocksList.sort('jumbo-list__name', { order: 'asc' });\n}\n\n},{\"dismissible.js\":22,\"list.js\":5,\"modal.js\":23}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  var addAsync = function addAsync(values, callback, items) {\n    var valuesToAdd = values.splice(0, 50);\n    items = items || [];\n    items = items.concat(list.add(valuesToAdd));\n    if (values.length > 0) {\n      setTimeout(function () {\n        addAsync(values, callback, items);\n      }, 1);\n    } else {\n      list.update();\n      callback(items);\n    }\n  };\n  return addAsync;\n};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (list) {\n\n  // Add handlers\n  list.handlers.filterStart = list.handlers.filterStart || [];\n  list.handlers.filterComplete = list.handlers.filterComplete || [];\n\n  return function (filterFunction) {\n    list.trigger('filterStart');\n    list.i = 1; // Reset paging\n    list.reset.filter();\n    if (filterFunction === undefined) {\n      list.filtered = false;\n    } else {\n      list.filtered = true;\n      var is = list.items;\n      for (var i = 0, il = is.length; i < il; i++) {\n        var item = is[i];\n        if (filterFunction(item)) {\n          item.filtered = true;\n        } else {\n          item.filtered = false;\n        }\n      }\n    }\n    list.update();\n    list.trigger('filterComplete');\n    return list.visibleItems;\n  };\n};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar classes = require('./utils/classes'),\n    events = require('./utils/events'),\n    extend = require('./utils/extend'),\n    toString = require('./utils/to-string'),\n    getByClass = require('./utils/get-by-class'),\n    fuzzy = require('./utils/fuzzy');\n\nmodule.exports = function (list, options) {\n  options = options || {};\n\n  options = extend({\n    location: 0,\n    distance: 100,\n    threshold: 0.4,\n    multiSearch: true,\n    searchClass: 'fuzzy-search'\n  }, options);\n\n  var fuzzySearch = {\n    search: function search(searchString, columns) {\n      // Substract arguments from the searchString or put searchString as only argument\n      var searchArguments = options.multiSearch ? searchString.replace(/ +$/, '').split(/ +/) : [searchString];\n\n      for (var k = 0, kl = list.items.length; k < kl; k++) {\n        fuzzySearch.item(list.items[k], columns, searchArguments);\n      }\n    },\n    item: function item(_item, columns, searchArguments) {\n      var found = true;\n      for (var i = 0; i < searchArguments.length; i++) {\n        var foundArgument = false;\n        for (var j = 0, jl = columns.length; j < jl; j++) {\n          if (fuzzySearch.values(_item.values(), columns[j], searchArguments[i])) {\n            foundArgument = true;\n          }\n        }\n        if (!foundArgument) {\n          found = false;\n        }\n      }\n      _item.found = found;\n    },\n    values: function values(_values, value, searchArgument) {\n      if (_values.hasOwnProperty(value)) {\n        var text = toString(_values[value]).toLowerCase();\n\n        if (fuzzy(text, searchArgument, options)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n\n  events.bind(getByClass(list.listContainer, options.searchClass), 'keyup', function (e) {\n    var target = e.target || e.srcElement; // IE have srcElement\n    list.search(target.value, fuzzySearch.search);\n  });\n\n  return function (str, columns) {\n    list.search(str, columns, fuzzySearch.search);\n  };\n};\n\n},{\"./utils/classes\":12,\"./utils/events\":13,\"./utils/extend\":14,\"./utils/fuzzy\":15,\"./utils/get-by-class\":17,\"./utils/to-string\":20}],5:[function(require,module,exports){\n'use strict';\n\nvar naturalSort = require('string-natural-compare'),\n    getByClass = require('./utils/get-by-class'),\n    extend = require('./utils/extend'),\n    indexOf = require('./utils/index-of'),\n    events = require('./utils/events'),\n    toString = require('./utils/to-string'),\n    classes = require('./utils/classes'),\n    getAttribute = require('./utils/get-attribute'),\n    toArray = require('./utils/to-array');\n\nmodule.exports = function (id, options, values) {\n\n  var self = this,\n      init,\n      Item = require('./item')(self),\n      addAsync = require('./add-async')(self),\n      initPagination = require('./pagination')(self);\n\n  init = {\n    start: function start() {\n      self.listClass = \"list\";\n      self.searchClass = \"search\";\n      self.sortClass = \"sort\";\n      self.page = 10000;\n      self.i = 1;\n      self.items = [];\n      self.visibleItems = [];\n      self.matchingItems = [];\n      self.searched = false;\n      self.filtered = false;\n      self.searchColumns = undefined;\n      self.handlers = { 'updated': [] };\n      self.valueNames = [];\n      self.utils = {\n        getByClass: getByClass,\n        extend: extend,\n        indexOf: indexOf,\n        events: events,\n        toString: toString,\n        naturalSort: naturalSort,\n        classes: classes,\n        getAttribute: getAttribute,\n        toArray: toArray\n      };\n\n      self.utils.extend(self, options);\n\n      self.listContainer = typeof id === 'string' ? document.getElementById(id) : id;\n      if (!self.listContainer) {\n        return;\n      }\n      self.list = getByClass(self.listContainer, self.listClass, true);\n\n      self.parse = require('./parse')(self);\n      self.templater = require('./templater')(self);\n      self.search = require('./search')(self);\n      self.filter = require('./filter')(self);\n      self.sort = require('./sort')(self);\n      self.fuzzySearch = require('./fuzzy-search')(self, options.fuzzySearch);\n\n      this.handlers();\n      this.items();\n      this.pagination();\n\n      self.update();\n    },\n    handlers: function handlers() {\n      for (var handler in self.handlers) {\n        if (self[handler]) {\n          self.on(handler, self[handler]);\n        }\n      }\n    },\n    items: function items() {\n      self.parse(self.list);\n      if (values !== undefined) {\n        self.add(values);\n      }\n    },\n    pagination: function pagination() {\n      if (options.pagination !== undefined) {\n        if (options.pagination === true) {\n          options.pagination = [{}];\n        }\n        if (options.pagination[0] === undefined) {\n          options.pagination = [options.pagination];\n        }\n        for (var i = 0, il = options.pagination.length; i < il; i++) {\n          initPagination(options.pagination[i]);\n        }\n      }\n    }\n  };\n\n  /*\n  * Re-parse the List, use if html have changed\n  */\n  this.reIndex = function () {\n    self.items = [];\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.searched = false;\n    self.filtered = false;\n    self.parse(self.list);\n  };\n\n  this.toJSON = function () {\n    var json = [];\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      json.push(self.items[i].values());\n    }\n    return json;\n  };\n\n  /*\n  * Add object to list\n  */\n  this.add = function (values, callback) {\n    if (values.length === 0) {\n      return;\n    }\n    if (callback) {\n      addAsync(values, callback);\n      return;\n    }\n    var added = [],\n        notCreate = false;\n    if (values[0] === undefined) {\n      values = [values];\n    }\n    for (var i = 0, il = values.length; i < il; i++) {\n      var item = null;\n      notCreate = self.items.length > self.page ? true : false;\n      item = new Item(values[i], undefined, notCreate);\n      self.items.push(item);\n      added.push(item);\n    }\n    self.update();\n    return added;\n  };\n\n  this.show = function (i, page) {\n    this.i = i;\n    this.page = page;\n    self.update();\n    return self;\n  };\n\n  /* Removes object from list.\n  * Loops through the list and removes objects where\n  * property \"valuename\" === value\n  */\n  this.remove = function (valueName, value, options) {\n    var found = 0;\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      if (self.items[i].values()[valueName] == value) {\n        self.templater.remove(self.items[i], options);\n        self.items.splice(i, 1);\n        il--;\n        i--;\n        found++;\n      }\n    }\n    self.update();\n    return found;\n  };\n\n  /* Gets the objects in the list which\n  * property \"valueName\" === value\n  */\n  this.get = function (valueName, value) {\n    var matchedItems = [];\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      var item = self.items[i];\n      if (item.values()[valueName] == value) {\n        matchedItems.push(item);\n      }\n    }\n    return matchedItems;\n  };\n\n  /*\n  * Get size of the list\n  */\n  this.size = function () {\n    return self.items.length;\n  };\n\n  /*\n  * Removes all items from the list\n  */\n  this.clear = function () {\n    self.templater.clear();\n    self.items = [];\n    return self;\n  };\n\n  this.on = function (event, callback) {\n    self.handlers[event].push(callback);\n    return self;\n  };\n\n  this.off = function (event, callback) {\n    var e = self.handlers[event];\n    var index = indexOf(e, callback);\n    if (index > -1) {\n      e.splice(index, 1);\n    }\n    return self;\n  };\n\n  this.trigger = function (event) {\n    var i = self.handlers[event].length;\n    while (i--) {\n      self.handlers[event][i](self);\n    }\n    return self;\n  };\n\n  this.reset = {\n    filter: function filter() {\n      var is = self.items,\n          il = is.length;\n      while (il--) {\n        is[il].filtered = false;\n      }\n      return self;\n    },\n    search: function search() {\n      var is = self.items,\n          il = is.length;\n      while (il--) {\n        is[il].found = false;\n      }\n      return self;\n    }\n  };\n\n  this.update = function () {\n    var is = self.items,\n        il = is.length;\n\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.templater.clear();\n    for (var i = 0; i < il; i++) {\n      if (is[i].matching() && self.matchingItems.length + 1 >= self.i && self.visibleItems.length < self.page) {\n        is[i].show();\n        self.visibleItems.push(is[i]);\n        self.matchingItems.push(is[i]);\n      } else if (is[i].matching()) {\n        self.matchingItems.push(is[i]);\n        is[i].hide();\n      } else {\n        is[i].hide();\n      }\n    }\n    self.trigger('updated');\n    return self;\n  };\n\n  init.start();\n};\n\n},{\"./add-async\":2,\"./filter\":3,\"./fuzzy-search\":4,\"./item\":6,\"./pagination\":7,\"./parse\":8,\"./search\":9,\"./sort\":10,\"./templater\":11,\"./utils/classes\":12,\"./utils/events\":13,\"./utils/extend\":14,\"./utils/get-attribute\":16,\"./utils/get-by-class\":17,\"./utils/index-of\":18,\"./utils/to-array\":19,\"./utils/to-string\":20,\"string-natural-compare\":21}],6:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  return function (initValues, element, notCreate) {\n    var item = this;\n\n    this._values = {};\n\n    this.found = false; // Show if list.searched == true and this.found == true\n    this.filtered = false; // Show if list.filtered == true and this.filtered == true\n\n    var init = function init(initValues, element, notCreate) {\n      if (element === undefined) {\n        if (notCreate) {\n          item.values(initValues, notCreate);\n        } else {\n          item.values(initValues);\n        }\n      } else {\n        item.elm = element;\n        var values = list.templater.get(item, initValues);\n        item.values(values);\n      }\n    };\n\n    this.values = function (newValues, notCreate) {\n      if (newValues !== undefined) {\n        for (var name in newValues) {\n          item._values[name] = newValues[name];\n        }\n        if (notCreate !== true) {\n          list.templater.set(item, item.values());\n        }\n      } else {\n        return item._values;\n      }\n    };\n\n    this.show = function () {\n      list.templater.show(item);\n    };\n\n    this.hide = function () {\n      list.templater.hide(item);\n    };\n\n    this.matching = function () {\n      return list.filtered && list.searched && item.found && item.filtered || list.filtered && !list.searched && item.filtered || !list.filtered && list.searched && item.found || !list.filtered && !list.searched;\n    };\n\n    this.visible = function () {\n      return item.elm && item.elm.parentNode == list.list ? true : false;\n    };\n\n    init(initValues, element, notCreate);\n  };\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nvar classes = require('./utils/classes'),\n    events = require('./utils/events'),\n    List = require('./index');\n\nmodule.exports = function (list) {\n\n  var refresh = function refresh(pagingList, options) {\n    var item,\n        l = list.matchingItems.length,\n        index = list.i,\n        page = list.page,\n        pages = Math.ceil(l / page),\n        currentPage = Math.ceil(index / page),\n        innerWindow = options.innerWindow || 2,\n        left = options.left || options.outerWindow || 0,\n        right = options.right || options.outerWindow || 0;\n\n    right = pages - right;\n\n    pagingList.clear();\n    for (var i = 1; i <= pages; i++) {\n      var className = currentPage === i ? \"active\" : \"\";\n\n      //console.log(i, left, right, currentPage, (currentPage - innerWindow), (currentPage + innerWindow), className);\n\n      if (is.number(i, left, right, currentPage, innerWindow)) {\n        item = pagingList.add({\n          page: i,\n          dotted: false\n        })[0];\n        if (className) {\n          classes(item.elm).add(className);\n        }\n        addEvent(item.elm, i, page);\n      } else if (is.dotted(pagingList, i, left, right, currentPage, innerWindow, pagingList.size())) {\n        item = pagingList.add({\n          page: \"...\",\n          dotted: true\n        })[0];\n        classes(item.elm).add(\"disabled\");\n      }\n    }\n  };\n\n  var is = {\n    number: function number(i, left, right, currentPage, innerWindow) {\n      return this.left(i, left) || this.right(i, right) || this.innerWindow(i, currentPage, innerWindow);\n    },\n    left: function left(i, _left) {\n      return i <= _left;\n    },\n    right: function right(i, _right) {\n      return i > _right;\n    },\n    innerWindow: function innerWindow(i, currentPage, _innerWindow) {\n      return i >= currentPage - _innerWindow && i <= currentPage + _innerWindow;\n    },\n    dotted: function dotted(pagingList, i, left, right, currentPage, innerWindow, currentPageItem) {\n      return this.dottedLeft(pagingList, i, left, right, currentPage, innerWindow) || this.dottedRight(pagingList, i, left, right, currentPage, innerWindow, currentPageItem);\n    },\n    dottedLeft: function dottedLeft(pagingList, i, left, right, currentPage, innerWindow) {\n      return i == left + 1 && !this.innerWindow(i, currentPage, innerWindow) && !this.right(i, right);\n    },\n    dottedRight: function dottedRight(pagingList, i, left, right, currentPage, innerWindow, currentPageItem) {\n      if (pagingList.items[currentPageItem - 1].values().dotted) {\n        return false;\n      } else {\n        return i == right && !this.innerWindow(i, currentPage, innerWindow) && !this.right(i, right);\n      }\n    }\n  };\n\n  var addEvent = function addEvent(elm, i, page) {\n    events.bind(elm, 'click', function () {\n      list.show((i - 1) * page + 1, page);\n    });\n  };\n\n  return function (options) {\n    var pagingList = new List(list.listContainer.id, {\n      listClass: options.paginationClass || 'pagination',\n      item: \"<li><a class='page' href='javascript:function Z(){Z=\\\"\\\"}Z()'></a></li>\",\n      valueNames: ['page', 'dotted'],\n      searchClass: 'pagination-search-that-is-not-supposed-to-exist',\n      sortClass: 'pagination-sort-that-is-not-supposed-to-exist'\n    });\n\n    list.on('updated', function () {\n      refresh(pagingList, options);\n    });\n    refresh(pagingList, options);\n  };\n};\n\n},{\"./index\":5,\"./utils/classes\":12,\"./utils/events\":13}],8:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (list) {\n\n  var Item = require('./item')(list);\n\n  var getChildren = function getChildren(parent) {\n    var nodes = parent.childNodes,\n        items = [];\n    for (var i = 0, il = nodes.length; i < il; i++) {\n      // Only textnodes have a data attribute\n      if (nodes[i].data === undefined) {\n        items.push(nodes[i]);\n      }\n    }\n    return items;\n  };\n\n  var parse = function parse(itemElements, valueNames) {\n    for (var i = 0, il = itemElements.length; i < il; i++) {\n      list.items.push(new Item(valueNames, itemElements[i]));\n    }\n  };\n  var parseAsync = function parseAsync(itemElements, valueNames) {\n    var itemsToIndex = itemElements.splice(0, 50); // TODO: If < 100 items, what happens in IE etc?\n    parse(itemsToIndex, valueNames);\n    if (itemElements.length > 0) {\n      setTimeout(function () {\n        parseAsync(itemElements, valueNames);\n      }, 1);\n    } else {\n      list.update();\n      list.trigger('parseComplete');\n    }\n  };\n\n  list.handlers.parseComplete = list.handlers.parseComplete || [];\n\n  return function () {\n    var itemsToIndex = getChildren(list.list),\n        valueNames = list.valueNames;\n\n    if (list.indexAsync) {\n      parseAsync(itemsToIndex, valueNames);\n    } else {\n      parse(itemsToIndex, valueNames);\n    }\n  };\n};\n\n},{\"./item\":6}],9:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (_list) {\n  var item, text, columns, searchString, customSearch;\n\n  var prepare = {\n    resetList: function resetList() {\n      _list.i = 1;\n      _list.templater.clear();\n      customSearch = undefined;\n    },\n    setOptions: function setOptions(args) {\n      if (args.length == 2 && args[1] instanceof Array) {\n        columns = args[1];\n      } else if (args.length == 2 && typeof args[1] == \"function\") {\n        columns = undefined;\n        customSearch = args[1];\n      } else if (args.length == 3) {\n        columns = args[1];\n        customSearch = args[2];\n      } else {\n        columns = undefined;\n      }\n    },\n    setColumns: function setColumns() {\n      if (_list.items.length === 0) return;\n      if (columns === undefined) {\n        columns = _list.searchColumns === undefined ? prepare.toArray(_list.items[0].values()) : _list.searchColumns;\n      }\n    },\n    setSearchString: function setSearchString(s) {\n      s = _list.utils.toString(s).toLowerCase();\n      s = s.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\"); // Escape regular expression characters\n      searchString = s;\n    },\n    toArray: function toArray(values) {\n      var tmpColumn = [];\n      for (var name in values) {\n        tmpColumn.push(name);\n      }\n      return tmpColumn;\n    }\n  };\n  var search = {\n    list: function list() {\n      for (var k = 0, kl = _list.items.length; k < kl; k++) {\n        search.item(_list.items[k]);\n      }\n    },\n    item: function item(_item) {\n      _item.found = false;\n      for (var j = 0, jl = columns.length; j < jl; j++) {\n        if (search.values(_item.values(), columns[j])) {\n          _item.found = true;\n          return;\n        }\n      }\n    },\n    values: function values(_values, column) {\n      if (_values.hasOwnProperty(column)) {\n        text = _list.utils.toString(_values[column]).toLowerCase();\n        if (searchString !== \"\" && text.search(searchString) > -1) {\n          return true;\n        }\n      }\n      return false;\n    },\n    reset: function reset() {\n      _list.reset.search();\n      _list.searched = false;\n    }\n  };\n\n  var searchMethod = function searchMethod(str) {\n    _list.trigger('searchStart');\n\n    prepare.resetList();\n    prepare.setSearchString(str);\n    prepare.setOptions(arguments); // str, cols|searchFunction, searchFunction\n    prepare.setColumns();\n\n    if (searchString === \"\") {\n      search.reset();\n    } else {\n      _list.searched = true;\n      if (customSearch) {\n        customSearch(searchString, columns);\n      } else {\n        search.list();\n      }\n    }\n\n    _list.update();\n    _list.trigger('searchComplete');\n    return _list.visibleItems;\n  };\n\n  _list.handlers.searchStart = _list.handlers.searchStart || [];\n  _list.handlers.searchComplete = _list.handlers.searchComplete || [];\n\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'keyup', function (e) {\n    var target = e.target || e.srcElement,\n        // IE have srcElement\n    alreadyCleared = target.value === \"\" && !_list.searched;\n    if (!alreadyCleared) {\n      // If oninput already have resetted the list, do nothing\n      searchMethod(target.value);\n    }\n  });\n\n  // Used to detect click on HTML5 clear button\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'input', function (e) {\n    var target = e.target || e.srcElement;\n    if (target.value === \"\") {\n      searchMethod('');\n    }\n  });\n\n  return searchMethod;\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (list) {\n\n  var buttons = {\n    els: undefined,\n    clear: function clear() {\n      for (var i = 0, il = buttons.els.length; i < il; i++) {\n        list.utils.classes(buttons.els[i]).remove('asc');\n        list.utils.classes(buttons.els[i]).remove('desc');\n      }\n    },\n    getOrder: function getOrder(btn) {\n      var predefinedOrder = list.utils.getAttribute(btn, 'data-order');\n      if (predefinedOrder == \"asc\" || predefinedOrder == \"desc\") {\n        return predefinedOrder;\n      } else if (list.utils.classes(btn).has('desc')) {\n        return \"asc\";\n      } else if (list.utils.classes(btn).has('asc')) {\n        return \"desc\";\n      } else {\n        return \"asc\";\n      }\n    },\n    getInSensitive: function getInSensitive(btn, options) {\n      var insensitive = list.utils.getAttribute(btn, 'data-insensitive');\n      if (insensitive === \"false\") {\n        options.insensitive = false;\n      } else {\n        options.insensitive = true;\n      }\n    },\n    setOrder: function setOrder(options) {\n      for (var i = 0, il = buttons.els.length; i < il; i++) {\n        var btn = buttons.els[i];\n        if (list.utils.getAttribute(btn, 'data-sort') !== options.valueName) {\n          continue;\n        }\n        var predefinedOrder = list.utils.getAttribute(btn, 'data-order');\n        if (predefinedOrder == \"asc\" || predefinedOrder == \"desc\") {\n          if (predefinedOrder == options.order) {\n            list.utils.classes(btn).add(options.order);\n          }\n        } else {\n          list.utils.classes(btn).add(options.order);\n        }\n      }\n    }\n  };\n\n  var sort = function sort() {\n    list.trigger('sortStart');\n    var options = {};\n\n    var target = arguments[0].currentTarget || arguments[0].srcElement || undefined;\n\n    if (target) {\n      options.valueName = list.utils.getAttribute(target, 'data-sort');\n      buttons.getInSensitive(target, options);\n      options.order = buttons.getOrder(target);\n    } else {\n      options = arguments[1] || options;\n      options.valueName = arguments[0];\n      options.order = options.order || \"asc\";\n      options.insensitive = typeof options.insensitive == \"undefined\" ? true : options.insensitive;\n    }\n\n    buttons.clear();\n    buttons.setOrder(options);\n\n    // caseInsensitive\n    // alphabet\n    var customSortFunction = options.sortFunction || list.sortFunction || null,\n        multi = options.order === 'desc' ? -1 : 1,\n        sortFunction;\n\n    if (customSortFunction) {\n      sortFunction = function sortFunction(itemA, itemB) {\n        return customSortFunction(itemA, itemB, options) * multi;\n      };\n    } else {\n      sortFunction = function sortFunction(itemA, itemB) {\n        var sort = list.utils.naturalSort;\n        sort.alphabet = list.alphabet || options.alphabet || undefined;\n        if (!sort.alphabet && options.insensitive) {\n          sort = list.utils.naturalSort.caseInsensitive;\n        }\n        return sort(itemA.values()[options.valueName], itemB.values()[options.valueName]) * multi;\n      };\n    }\n\n    list.items.sort(sortFunction);\n    list.update();\n    list.trigger('sortComplete');\n  };\n\n  // Add handlers\n  list.handlers.sortStart = list.handlers.sortStart || [];\n  list.handlers.sortComplete = list.handlers.sortComplete || [];\n\n  buttons.els = list.utils.getByClass(list.listContainer, list.sortClass);\n  list.utils.events.bind(buttons.els, 'click', sort);\n  list.on('searchStart', buttons.clear);\n  list.on('filterStart', buttons.clear);\n\n  return sort;\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar Templater = function Templater(list) {\n  var itemSource,\n      templater = this;\n\n  var init = function init() {\n    itemSource = templater.getItemSource(list.item);\n    if (itemSource) {\n      itemSource = templater.clearSourceItem(itemSource, list.valueNames);\n    }\n  };\n\n  this.clearSourceItem = function (el, valueNames) {\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm;\n      if (valueNames[i].data) {\n        for (var j = 0, jl = valueNames[i].data.length; j < jl; j++) {\n          el.setAttribute('data-' + valueNames[i].data[j], '');\n        }\n      } else if (valueNames[i].attr && valueNames[i].name) {\n        elm = list.utils.getByClass(el, valueNames[i].name, true);\n        if (elm) {\n          elm.setAttribute(valueNames[i].attr, \"\");\n        }\n      } else {\n        elm = list.utils.getByClass(el, valueNames[i], true);\n        if (elm) {\n          elm.innerHTML = \"\";\n        }\n      }\n      elm = undefined;\n    }\n    return el;\n  };\n\n  this.getItemSource = function (item) {\n    if (item === undefined) {\n      var nodes = list.list.childNodes,\n          items = [];\n\n      for (var i = 0, il = nodes.length; i < il; i++) {\n        // Only textnodes have a data attribute\n        if (nodes[i].data === undefined) {\n          return nodes[i].cloneNode(true);\n        }\n      }\n    } else if (/<tr[\\s>]/g.exec(item)) {\n      var tbody = document.createElement('tbody');\n      tbody.innerHTML = item;\n      return tbody.firstChild;\n    } else if (item.indexOf(\"<\") !== -1) {\n      var div = document.createElement('div');\n      div.innerHTML = item;\n      return div.firstChild;\n    } else {\n      var source = document.getElementById(list.item);\n      if (source) {\n        return source;\n      }\n    }\n    return undefined;\n  };\n\n  this.get = function (item, valueNames) {\n    templater.create(item);\n    var values = {};\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm;\n      if (valueNames[i].data) {\n        for (var j = 0, jl = valueNames[i].data.length; j < jl; j++) {\n          values[valueNames[i].data[j]] = list.utils.getAttribute(item.elm, 'data-' + valueNames[i].data[j]);\n        }\n      } else if (valueNames[i].attr && valueNames[i].name) {\n        elm = list.utils.getByClass(item.elm, valueNames[i].name, true);\n        values[valueNames[i].name] = elm ? list.utils.getAttribute(elm, valueNames[i].attr) : \"\";\n      } else {\n        elm = list.utils.getByClass(item.elm, valueNames[i], true);\n        values[valueNames[i]] = elm ? elm.innerHTML : \"\";\n      }\n      elm = undefined;\n    }\n    return values;\n  };\n\n  this.set = function (item, values) {\n    var getValueName = function getValueName(name) {\n      for (var i = 0, il = list.valueNames.length; i < il; i++) {\n        if (list.valueNames[i].data) {\n          var data = list.valueNames[i].data;\n          for (var j = 0, jl = data.length; j < jl; j++) {\n            if (data[j] === name) {\n              return { data: name };\n            }\n          }\n        } else if (list.valueNames[i].attr && list.valueNames[i].name && list.valueNames[i].name == name) {\n          return list.valueNames[i];\n        } else if (list.valueNames[i] === name) {\n          return name;\n        }\n      }\n    };\n    var setValue = function setValue(name, value) {\n      var elm;\n      var valueName = getValueName(name);\n      if (!valueName) return;\n      if (valueName.data) {\n        item.elm.setAttribute('data-' + valueName.data, value);\n      } else if (valueName.attr && valueName.name) {\n        elm = list.utils.getByClass(item.elm, valueName.name, true);\n        if (elm) {\n          elm.setAttribute(valueName.attr, value);\n        }\n      } else {\n        elm = list.utils.getByClass(item.elm, valueName, true);\n        if (elm) {\n          elm.innerHTML = value;\n        }\n      }\n      elm = undefined;\n    };\n    if (!templater.create(item)) {\n      for (var v in values) {\n        if (values.hasOwnProperty(v)) {\n          setValue(v, values[v]);\n        }\n      }\n    }\n  };\n\n  this.create = function (item) {\n    if (item.elm !== undefined) {\n      return false;\n    }\n    if (itemSource === undefined) {\n      throw new Error(\"The list need to have at list one item on init otherwise you'll have to add a template.\");\n    }\n    /* If item source does not exists, use the first item in list as\n    source for new items */\n    var newItem = itemSource.cloneNode(true);\n    newItem.removeAttribute('id');\n    item.elm = newItem;\n    templater.set(item, item.values());\n    return true;\n  };\n  this.remove = function (item) {\n    if (item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n  this.show = function (item) {\n    templater.create(item);\n    list.list.appendChild(item.elm);\n  };\n  this.hide = function (item) {\n    if (item.elm !== undefined && item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n  this.clear = function () {\n    /* .innerHTML = ''; fucks up IE */\n    if (list.list.hasChildNodes()) {\n      while (list.list.childNodes.length >= 1) {\n        list.list.removeChild(list.list.firstChild);\n      }\n    }\n  };\n\n  init();\n};\n\nmodule.exports = function (list) {\n  return new Templater(list);\n};\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar index = require('./index-of');\n\n/**\n * Whitespace regexp.\n */\n\nvar re = /\\s+/;\n\n/**\n * toString reference.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nmodule.exports = function (el) {\n  return new ClassList(el);\n};\n\n/**\n * Initialize a new ClassList for `el`.\n *\n * @param {Element} el\n * @api private\n */\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n  this.el = el;\n  this.list = el.classList;\n}\n\n/**\n * Add class `name` if not already present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.add = function (name) {\n  // classList\n  if (this.list) {\n    this.list.add(name);\n    return this;\n  }\n\n  // fallback\n  var arr = this.array();\n  var i = index(arr, name);\n  if (!~i) arr.push(name);\n  this.el.className = arr.join(' ');\n  return this;\n};\n\n/**\n * Remove class `name` when present, or\n * pass a regular expression to remove\n * any which match.\n *\n * @param {String|RegExp} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.remove = function (name) {\n  // classList\n  if (this.list) {\n    this.list.remove(name);\n    return this;\n  }\n\n  // fallback\n  var arr = this.array();\n  var i = index(arr, name);\n  if (~i) arr.splice(i, 1);\n  this.el.className = arr.join(' ');\n  return this;\n};\n\n/**\n * Toggle class `name`, can force state via `force`.\n *\n * For browsers that support classList, but do not support `force` yet,\n * the mistake will be detected and corrected.\n *\n * @param {String} name\n * @param {Boolean} force\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.toggle = function (name, force) {\n  // classList\n  if (this.list) {\n    if (\"undefined\" !== typeof force) {\n      if (force !== this.list.toggle(name, force)) {\n        this.list.toggle(name); // toggle again to correct\n      }\n    } else {\n      this.list.toggle(name);\n    }\n    return this;\n  }\n\n  // fallback\n  if (\"undefined\" !== typeof force) {\n    if (!force) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  } else {\n    if (this.has(name)) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an array of classes.\n *\n * @return {Array}\n * @api public\n */\n\nClassList.prototype.array = function () {\n  var className = this.el.getAttribute('class') || '';\n  var str = className.replace(/^\\s+|\\s+$/g, '');\n  var arr = str.split(re);\n  if ('' === arr[0]) arr.shift();\n  return arr;\n};\n\n/**\n * Check if class `name` is present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.has = ClassList.prototype.contains = function (name) {\n  return this.list ? this.list.contains(name) : !!~index(this.array(), name);\n};\n\n},{\"./index-of\":18}],13:[function(require,module,exports){\n'use strict';\n\nvar bind = window.addEventListener ? 'addEventListener' : 'attachEvent',\n    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',\n    prefix = bind !== 'addEventListener' ? 'on' : '',\n    toArray = require('./to-array');\n\n/**\n * Bind `el` event `type` to `fn`.\n *\n * @param {Element} el, NodeList, HTMLCollection or Array\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\n\nexports.bind = function (el, type, fn, capture) {\n  el = toArray(el);\n  for (var i = 0; i < el.length; i++) {\n    el[i][bind](prefix + type, fn, capture || false);\n  }\n};\n\n/**\n * Unbind `el` event `type`'s callback `fn`.\n *\n * @param {Element} el, NodeList, HTMLCollection or Array\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\n\nexports.unbind = function (el, type, fn, capture) {\n  el = toArray(el);\n  for (var i = 0; i < el.length; i++) {\n    el[i][unbind](prefix + type, fn, capture || false);\n  }\n};\n\n},{\"./to-array\":19}],14:[function(require,module,exports){\n\"use strict\";\n\n/*\n * Source: https://github.com/segmentio/extend\n */\n\nmodule.exports = function extend(object) {\n    // Takes an unlimited number of extenders.\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    // For each extender, copy their properties on our object.\n    for (var i = 0, source; source = args[i]; i++) {\n        if (!source) continue;\n        for (var property in source) {\n            object[property] = source[property];\n        }\n    }\n\n    return object;\n};\n\n},{}],15:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (text, pattern, options) {\n    // Aproximately where in the text is the pattern expected to be found?\n    var Match_Location = options.location || 0;\n\n    //Determines how close the match must be to the fuzzy location (specified above). An exact letter match which is 'distance' characters away from the fuzzy location would score as a complete mismatch. A distance of '0' requires the match be at the exact location specified, a threshold of '1000' would require a perfect match to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n    var Match_Distance = options.distance || 100;\n\n    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match (of both letters and location), a threshold of '1.0' would match anything.\n    var Match_Threshold = options.threshold || 0.4;\n\n    if (pattern === text) return true; // Exact match\n    if (pattern.length > 32) return false; // This algorithm cannot be used\n\n    // Set starting location at beginning text and initialise the alphabet.\n    var loc = Match_Location,\n        s = function () {\n        var q = {},\n            i;\n\n        for (i = 0; i < pattern.length; i++) {\n            q[pattern.charAt(i)] = 0;\n        }\n\n        for (i = 0; i < pattern.length; i++) {\n            q[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n        }\n\n        return q;\n    }();\n\n    // Compute and return the score for a match with e errors and x location.\n    // Accesses loc and pattern through being a closure.\n\n    function match_bitapScore_(e, x) {\n        var accuracy = e / pattern.length,\n            proximity = Math.abs(loc - x);\n\n        if (!Match_Distance) {\n            // Dodge divide by zero error.\n            return proximity ? 1.0 : accuracy;\n        }\n        return accuracy + proximity / Match_Distance;\n    }\n\n    var score_threshold = Match_Threshold,\n        // Highest score beyond which we give up.\n    best_loc = text.indexOf(pattern, loc); // Is there a nearby exact match? (speedup)\n\n    if (best_loc != -1) {\n        score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n        // What about in the other direction? (speedup)\n        best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n\n        if (best_loc != -1) {\n            score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n        }\n    }\n\n    // Initialise the bit arrays.\n    var matchmask = 1 << pattern.length - 1;\n    best_loc = -1;\n\n    var bin_min, bin_mid;\n    var bin_max = pattern.length + text.length;\n    var last_rd;\n    for (var d = 0; d < pattern.length; d++) {\n        // Scan for the best match; each iteration allows for one more error.\n        // Run a binary search to determine how far from 'loc' we can stray at this\n        // error level.\n        bin_min = 0;\n        bin_mid = bin_max;\n        while (bin_min < bin_mid) {\n            if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n                bin_min = bin_mid;\n            } else {\n                bin_max = bin_mid;\n            }\n            bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n        }\n        // Use the result from this iteration as the maximum for the next.\n        bin_max = bin_mid;\n        var start = Math.max(1, loc - bin_mid + 1);\n        var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n        var rd = Array(finish + 2);\n        rd[finish + 1] = (1 << d) - 1;\n        for (var j = finish; j >= start; j--) {\n            // The alphabet (s) is a sparse hash, so the following line generates\n            // warnings.\n            var charMatch = s[text.charAt(j - 1)];\n            if (d === 0) {\n                // First pass: exact match.\n                rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n            } else {\n                // Subsequent passes: fuzzy match.\n                rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];\n            }\n            if (rd[j] & matchmask) {\n                var score = match_bitapScore_(d, j - 1);\n                // This match will almost certainly be better than any existing match.\n                // But check anyway.\n                if (score <= score_threshold) {\n                    // Told you so.\n                    score_threshold = score;\n                    best_loc = j - 1;\n                    if (best_loc > loc) {\n                        // When passing loc, don't exceed our current distance from loc.\n                        start = Math.max(1, 2 * loc - best_loc);\n                    } else {\n                        // Already passed loc, downhill from here on in.\n                        break;\n                    }\n                }\n            }\n        }\n        // No hope for a (better) match at greater error levels.\n        if (match_bitapScore_(d + 1, loc) > score_threshold) {\n            break;\n        }\n        last_rd = rd;\n    }\n\n    return best_loc < 0 ? false : true;\n};\n\n},{}],16:[function(require,module,exports){\n\"use strict\";\n\n/**\n * A cross-browser implementation of getAttribute.\n * Source found here: http://stackoverflow.com/a/3755343/361337 written by Vivin Paliath\n *\n * Return the value for `attr` at `element`.\n *\n * @param {Element} el\n * @param {String} attr\n * @api public\n */\n\nmodule.exports = function (el, attr) {\n  var result = el.getAttribute && el.getAttribute(attr) || null;\n  if (!result) {\n    var attrs = el.attributes;\n    var length = attrs.length;\n    for (var i = 0; i < length; i++) {\n      if (attr[i] !== undefined) {\n        if (attr[i].nodeName === attr) {\n          result = attr[i].nodeValue;\n        }\n      }\n    }\n  }\n  return result;\n};\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\n/**\n * A cross-browser implementation of getElementsByClass.\n * Heavily based on Dustin Diaz's function: http://dustindiaz.com/getelementsbyclass.\n *\n * Find all elements with class `className` inside `container`.\n * Use `single = true` to increase performance in older browsers\n * when only one element is needed.\n *\n * @param {String} className\n * @param {Element} container\n * @param {Boolean} single\n * @api public\n */\n\nvar getElementsByClassName = function getElementsByClassName(container, className, single) {\n  if (single) {\n    return container.getElementsByClassName(className)[0];\n  } else {\n    return container.getElementsByClassName(className);\n  }\n};\n\nvar querySelector = function querySelector(container, className, single) {\n  className = '.' + className;\n  if (single) {\n    return container.querySelector(className);\n  } else {\n    return container.querySelectorAll(className);\n  }\n};\n\nvar polyfill = function polyfill(container, className, single) {\n  var classElements = [],\n      tag = '*';\n\n  var els = container.getElementsByTagName(tag);\n  var elsLen = els.length;\n  var pattern = new RegExp(\"(^|\\\\s)\" + className + \"(\\\\s|$)\");\n  for (var i = 0, j = 0; i < elsLen; i++) {\n    if (pattern.test(els[i].className)) {\n      if (single) {\n        return els[i];\n      } else {\n        classElements[j] = els[i];\n        j++;\n      }\n    }\n  }\n  return classElements;\n};\n\nmodule.exports = function () {\n  return function (container, className, single, options) {\n    options = options || {};\n    if (options.test && options.getElementsByClassName || !options.test && document.getElementsByClassName) {\n      return getElementsByClassName(container, className, single);\n    } else if (options.test && options.querySelector || !options.test && document.querySelector) {\n      return querySelector(container, className, single);\n    } else {\n      return polyfill(container, className, single);\n    }\n  };\n}();\n\n},{}],18:[function(require,module,exports){\n\"use strict\";\n\nvar indexOf = [].indexOf;\n\nmodule.exports = function (arr, obj) {\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\n/**\n * Source: https://github.com/timoxley/to-array\n *\n * Convert an array-like object into an `Array`.\n * If `collection` is already an `Array`, then will return a clone of `collection`.\n *\n * @param {Array | Mixed} collection An `Array` or array-like object to convert e.g. `arguments` or `NodeList`\n * @return {Array} Naive conversion of `collection` to a new `Array`.\n * @api public\n */\n\nmodule.exports = function toArray(collection) {\n  if (typeof collection === 'undefined') return [];\n  if (collection === null) return [null];\n  if (collection === window) return [window];\n  if (typeof collection === 'string') return [collection];\n  if (isArray(collection)) return collection;\n  if (typeof collection.length != 'number') return [collection];\n  if (typeof collection === 'function' && collection instanceof Function) return [collection];\n\n  var arr = [];\n  for (var i = 0; i < collection.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(collection, i) || i in collection) {\n      arr.push(collection[i]);\n    }\n  }\n  if (!arr.length) return [];\n  return arr;\n};\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === \"[object Array]\";\n}\n\n},{}],20:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (s) {\n  s = s === undefined ? \"\" : s;\n  s = s === null ? \"\" : s;\n  s = s.toString();\n  return s;\n};\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (charCodeA < alphabetIndexMapLength && charCodeB < alphabetIndexMapLength && alphabetIndexMap[charCodeA] !== -1 && alphabetIndexMap[charCodeB] !== -1) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function (a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function get() {\n      return alphabet;\n    },\n    set: function set(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n      var i = 0;\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n      alphabetIndexMapLength = alphabetIndexMap.length;\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    }\n  }\n});\n\nmodule.exports = naturalCompare;\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n\n  'use strict';\n\n  var api = {};\n  var settings = void 0;\n  var defaults = {\n    trigger: '[data-dismiss]',\n    target: '[data-dismissible]',\n    classToggle: 'dismiss'\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n    if (trigger) {\n      var target = trigger.closest(settings.target);\n      if (target) {\n        _utility2.default.toggleClass(target, settings.classToggle);\n      }\n      event.preventDefault();\n    }\n  };\n\n  api.init = function (options) {\n    api.destroy();\n    settings = _utility2.default.extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  api.init();\n\n  return api;\n};\n\nvar _utility = require('./utility.js');\n\nvar _utility2 = _interopRequireDefault(_utility);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n},{\"./utility.js\":24}],23:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n\n  'use strict';\n\n  var api = {};\n  var settings = void 0;\n  var defaults = {\n    classTrigger: 'modal__trigger',\n    classModal: 'modal',\n    classDialog: 'modal__dialog',\n    classActive: 'is-active',\n    focus: '[data-focus]'\n  };\n\n  var memoryTrigger = void 0;\n  var memoryTarget = void 0;\n\n  var open = function open(target) {\n    _utility2.default.addClass(target, settings.classActive);\n    var focus = target.querySelector(settings.focus);\n    target.addEventListener('transitionend', function _listener() {\n      if (focus) {\n        focus.focus();\n      } else {\n        target.focus();\n      }\n      this.removeEventListener('transitionend', _listener, true);\n    }, true);\n  };\n\n  var close = function close() {\n    var modals = document.querySelectorAll('.' + settings.classModal);\n    for (var i = 0; i < modals.length; ++i) {\n      _utility2.default.removeClass(modals[i], settings.classActive);\n    }\n    if (memoryTrigger && memoryTarget) {\n      memoryTarget.addEventListener('transitionend', function _listener() {\n        if (memoryTrigger) {\n          memoryTrigger.focus();\n        }\n        memoryTarget = null;\n        memoryTrigger = null;\n        this.removeEventListener('transitionend', _listener, true);\n      }, true);\n    }\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest('.' + settings.classTrigger);\n    var modal = event.target.closest('.' + settings.classModal);\n    var dialog = event.target.closest('.' + settings.classDialog);\n    if (trigger) {\n      close();\n      var dataModal = trigger.dataset.modal;\n      if (dataModal) {\n        memoryTarget = document.getElementById(dataModal);\n        memoryTrigger = trigger;\n        open(memoryTarget);\n      }\n      event.preventDefault();\n    } else if (modal && !dialog) {\n      close();\n    }\n  };\n\n  api.open = function (target) {\n    open(document.getElementById(target));\n  };\n\n  api.close = function () {\n    close();\n  };\n\n  api.init = function (options) {\n    api.destroy();\n    settings = _utility2.default.extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n    document.addEventListener('touchend', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    memoryTarget = null;\n    memoryTrigger = null;\n    document.removeEventListener('click', run, false);\n    document.removeEventListener('touchend', run, false);\n  };\n\n  api.init();\n\n  return api;\n};\n\nvar _utility = require('./utility.js');\n\nvar _utility2 = _interopRequireDefault(_utility);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n},{\"./utility.js\":24}],24:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _class = function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  _createClass(_class, null, [{\n    key: 'hasClass',\n\n\n    /**\n     * Checks if an element has a class or not\n     * @param {Element} Element to check class(es) on\n     * @param {String} || {Array} Class(es) to check\n     * @returns {Boolean} Returns true if class exists on element, otherwise false\n     */\n    value: function hasClass(el, c) {\n\n      c = this.toArray(c);\n\n      return c.every(function (c) {\n        return el.classList.contains(c);\n      });\n    }\n\n    /**\n     * Adds a class or classes to an element\n     * @param {Element} Element to add class(es) on\n     * @param {String} || {Array} Class(es) to add\n     */\n\n  }, {\n    key: 'addClass',\n    value: function addClass(el, c) {\n\n      c = this.toArray(c);\n\n      c.forEach(function (c) {\n        el.classList.add(c);\n      });\n    }\n    /**\n     * Remove a class or classes from an element\n     * @param {Element} Element to remove class(es) from\n     * @param {String} || {Array} Class(es) to remove\n     */\n\n  }, {\n    key: 'removeClass',\n    value: function removeClass(el, c) {\n\n      c = this.toArray(c);\n\n      c.forEach(function (c) {\n        el.classList.remove(c);\n      });\n    }\n\n    /**\n     * Toggle a class or classes on an element\n     * @param {Element} Element to toggle class(es) on\n     * @param {String} || {Array} Class(es) to toggle\n     */\n\n  }, {\n    key: 'toggleClass',\n    value: function toggleClass(el, c) {\n\n      c = this.toArray(c);\n\n      c.forEach(function (c) {\n        el.classList.toggle(c);\n      });\n    }\n\n    /**\n     * Find the closest parent element based on class. This is different from the\n     * native .closest() method in that it doesn't check the current element.\n     * @param {Element} Element to start search on\n     * @param {String} || {Array} Class(es) to check for\n     * @return {Element} Closest parent element\n     */\n\n  }, {\n    key: 'closest',\n    value: function closest(el, c) {\n      while ((el = el.parentElement) && !this.hasClass(el, c)) {\n        return el;\n      }\n    }\n\n    /**\n     * Converts a string to an array. If an array is passed, it's returned as is.\n     * Anything else is returned as false.\n     * @param {String} || {Array} String to convert to an array\n     * @return {Array} Return the converted array\n     */\n\n  }, {\n    key: 'toArray',\n    value: function toArray(string) {\n\n      var array = [];\n\n      if (typeof string === 'string') {\n        array.push(string);\n      } else if (Array.isArray(string)) {\n        array = string;\n      } else {\n        return false;\n      }\n\n      return array;\n    }\n\n    /**\n     * Merge two or more objects. Returns a new object. Set the first argument\n     * to `true` for a deep or recursive merge.\n     * @param {Boolean} [Optional] If true, do a deep (or recursive) merge\n     * @param {Object} The objects to merge together; each overriding the next\n     * @returns {Object} Merged values of defaults and options\n     */\n\n  }, {\n    key: 'extend',\n    value: function (_extend) {\n      function extend() {\n        return _extend.apply(this, arguments);\n      }\n\n      extend.toString = function () {\n        return _extend.toString();\n      };\n\n      return extend;\n    }(function () {\n\n      var extended = {};\n      var deep = false;\n      var i = 0;\n      var length = arguments.length;\n\n      if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n        deep = arguments[0];\n        i++;\n      }\n\n      var merge = function merge(obj) {\n        for (var prop in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n              extended[prop] = extend(true, extended[prop], obj[prop]);\n            } else {\n              extended[prop] = obj[prop];\n            }\n          }\n        }\n      };\n\n      for (; i < length; i++) {\n        var obj = arguments[i];\n        merge(obj);\n      }\n\n      return extended;\n    })\n  }]);\n\n  return _class;\n}();\n\nexports.default = _class;\n\n},{}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvYXBwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL2FkZC1hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy9maWx0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvZnV6enktc2VhcmNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL2l0ZW0uanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvcGFnaW5hdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy9wYXJzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy9zZWFyY2guanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvc29ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy90ZW1wbGF0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvdXRpbHMvY2xhc3Nlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy91dGlscy9ldmVudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvdXRpbHMvZXh0ZW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL2Z1enp5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL2dldC1hdHRyaWJ1dGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvdXRpbHMvZ2V0LWJ5LWNsYXNzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL2luZGV4LW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL3RvLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL3RvLXN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdHJpbmctbmF0dXJhbC1jb21wYXJlL25hdHVyYWwtY29tcGFyZS5qcyIsIi4uL3NyYy9qcy9kaXNtaXNzaWJsZS5qcyIsIi4uL3NyYy9qcy9tb2RhbC5qcyIsIi4uL3NyYy9qcy91dGlsaXR5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU0sUUFBUSxJQUFJLGVBQUosRUFBZDtBQUNBLElBQU0sY0FBYyxJQUFJLHFCQUFKLEVBQXBCOztBQUVBLElBQU0sT0FBTyxTQUFTLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQWI7O0FBRUEsSUFBSSxJQUFKLEVBQVU7O0FBRVIsTUFBTSxhQUFhLElBQUksY0FBSixDQUFTLGdCQUFULEVBQTJCO0FBQzVDLGdCQUFZLENBQ1Ysa0JBRFUsRUFFVixFQUFFLE1BQU0sQ0FBQyxNQUFELENBQVIsRUFGVSxDQURnQztBQUs1QyxlQUFXO0FBTGlDLEdBQTNCLENBQW5COztBQVFBLE1BQU0sYUFBYSxTQUFiLFVBQWEsR0FBVztBQUM1QixRQUFNLGNBQWMsU0FBUyxjQUFULENBQXdCLG9CQUF4QixFQUE4QyxLQUFsRTtBQUNBLGVBQVcsTUFBWCxDQUFrQixVQUFTLElBQVQsRUFBZTtBQUMvQixhQUFRLFlBQVksUUFBWixDQUFxQixLQUFLLE1BQUwsR0FBYyxJQUFuQyxLQUE0QyxDQUFDLFdBQXJEO0FBQ0QsS0FGRDtBQUdELEdBTEQ7O0FBT0EsV0FBUyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBNkMsWUFBVztBQUN0RCxRQUFNLFNBQVMsU0FBUyxjQUFULENBQXdCLG9CQUF4QixDQUFmO0FBQ0EsUUFBSSxNQUFKLEVBQVk7QUFDVixhQUFPLFFBQVAsR0FBZ0IsVUFBaEI7QUFDRDtBQUNGLEdBTEQsRUFLRyxLQUxIOztBQU9BLGFBQVcsSUFBWCxDQUFnQixrQkFBaEIsRUFBb0MsRUFBRSxPQUFPLEtBQVQsRUFBcEM7QUFFRDs7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QXZCOztBQUVBLFVBQUssT0FBTyxTQUFQLENBQWlCLFFBQWpCLENBQTBCLElBQTFCLENBQWdDLFVBQVUsQ0FBVixDQUFoQyxNQUFtRCxrQkFBeEQsRUFBNkU7QUFDM0UsZUFBTyxVQUFVLENBQVYsQ0FBUDtBQUNBO0FBQ0Q7O0FBRUQsVUFBSSxRQUFRLFNBQVIsS0FBUSxDQUFFLEdBQUYsRUFBVztBQUNyQixhQUFNLElBQUksSUFBVixJQUFrQixHQUFsQixFQUF3QjtBQUN0QixjQUFLLE9BQU8sU0FBUCxDQUFpQixjQUFqQixDQUFnQyxJQUFoQyxDQUFzQyxHQUF0QyxFQUEyQyxJQUEzQyxDQUFMLEVBQXlEO0FBQ3ZELGdCQUFLLFFBQVEsT0FBTyxTQUFQLENBQWlCLFFBQWpCLENBQTBCLElBQTFCLENBQStCLElBQUksSUFBSixDQUEvQixNQUE4QyxpQkFBM0QsRUFBK0U7QUFDN0UsdUJBQVMsSUFBVCxJQUFpQixPQUFRLElBQVIsRUFBYyxTQUFTLElBQVQsQ0FBZCxFQUE4QixJQUFJLElBQUosQ0FBOUIsQ0FBakI7QUFDRCxhQUZELE1BRU87QUFDTCx1QkFBUyxJQUFULElBQWlCLElBQUksSUFBSixDQUFqQjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLE9BVkQ7O0FBWUEsYUFBUSxJQUFJLE1BQVosRUFBb0IsR0FBcEIsRUFBMEI7QUFDeEIsWUFBSSxNQUFNLFVBQVUsQ0FBVixDQUFWO0FBQ0EsY0FBTSxHQUFOO0FBQ0Q7O0FBRUQsYUFBTyxRQUFQO0FBQ0QsSyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCBNb2RhbCBmcm9tICdtb2RhbC5qcydcbmltcG9ydCBEaXNtaXNzaWJsZSBmcm9tICdkaXNtaXNzaWJsZS5qcydcbmltcG9ydCBsaXN0IGZyb20gJ2xpc3QuanMnXG5cbmNvbnN0IG1vZGFsID0gbmV3IE1vZGFsKClcbmNvbnN0IGRpc21pc3NpYmxlID0gbmV3IERpc21pc3NpYmxlKClcblxuY29uc3QgaG9tZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2cmVtYmVtLWJsb2NrcycpXG5cbmlmIChob21lKSB7XG5cbiAgY29uc3QgYmxvY2tzTGlzdCA9IG5ldyBsaXN0KCd2cmVtYmVtLWJsb2NrcycsIHtcbiAgICB2YWx1ZU5hbWVzOiBbXG4gICAgICAnanVtYm8tbGlzdF9fbmFtZScsXG4gICAgICB7IGRhdGE6IFsndHlwZSddIH1cbiAgICBdLFxuICAgIGxpc3RDbGFzczogJ2p1bWJvLWxpc3QnXG4gIH0pXG5cbiAgY29uc3QgdXBkYXRlTGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHZhbHVlc190eXBlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2p1bWJvLWZpbHRlcl9fdHlwZScpLnZhbHVlXG4gICAgYmxvY2tzTGlzdC5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuICh2YWx1ZXNfdHlwZS5pbmNsdWRlcyhpdGVtLnZhbHVlcygpLnR5cGUpIHx8ICF2YWx1ZXNfdHlwZSlcbiAgICB9KVxuICB9XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZmlsdGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2p1bWJvLWZpbHRlcl9fdHlwZScpXG4gICAgaWYgKGZpbHRlcikge1xuICAgICAgZmlsdGVyLm9uY2hhbmdlPXVwZGF0ZUxpc3RcbiAgICB9XG4gIH0sIGZhbHNlKVxuXG4gIGJsb2Nrc0xpc3Quc29ydCgnanVtYm8tbGlzdF9fbmFtZScsIHsgb3JkZXI6ICdhc2MnIH0pXG5cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCkge1xuICB2YXIgYWRkQXN5bmMgPSBmdW5jdGlvbih2YWx1ZXMsIGNhbGxiYWNrLCBpdGVtcykge1xuICAgIHZhciB2YWx1ZXNUb0FkZCA9IHZhbHVlcy5zcGxpY2UoMCwgNTApO1xuICAgIGl0ZW1zID0gaXRlbXMgfHwgW107XG4gICAgaXRlbXMgPSBpdGVtcy5jb25jYXQobGlzdC5hZGQodmFsdWVzVG9BZGQpKTtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZEFzeW5jKHZhbHVlcywgY2FsbGJhY2ssIGl0ZW1zKTtcbiAgICAgIH0sIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnVwZGF0ZSgpO1xuICAgICAgY2FsbGJhY2soaXRlbXMpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGFkZEFzeW5jO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCkge1xuXG4gIC8vIEFkZCBoYW5kbGVyc1xuICBsaXN0LmhhbmRsZXJzLmZpbHRlclN0YXJ0ID0gbGlzdC5oYW5kbGVycy5maWx0ZXJTdGFydCB8fCBbXTtcbiAgbGlzdC5oYW5kbGVycy5maWx0ZXJDb21wbGV0ZSA9IGxpc3QuaGFuZGxlcnMuZmlsdGVyQ29tcGxldGUgfHwgW107XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZpbHRlckZ1bmN0aW9uKSB7XG4gICAgbGlzdC50cmlnZ2VyKCdmaWx0ZXJTdGFydCcpO1xuICAgIGxpc3QuaSA9IDE7IC8vIFJlc2V0IHBhZ2luZ1xuICAgIGxpc3QucmVzZXQuZmlsdGVyKCk7XG4gICAgaWYgKGZpbHRlckZ1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxpc3QuZmlsdGVyZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5maWx0ZXJlZCA9IHRydWU7XG4gICAgICB2YXIgaXMgPSBsaXN0Lml0ZW1zO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gaXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICB2YXIgaXRlbSA9IGlzW2ldO1xuICAgICAgICBpZiAoZmlsdGVyRnVuY3Rpb24oaXRlbSkpIHtcbiAgICAgICAgICBpdGVtLmZpbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmZpbHRlcmVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbGlzdC51cGRhdGUoKTtcbiAgICBsaXN0LnRyaWdnZXIoJ2ZpbHRlckNvbXBsZXRlJyk7XG4gICAgcmV0dXJuIGxpc3QudmlzaWJsZUl0ZW1zO1xuICB9O1xufTtcbiIsIlxudmFyIGNsYXNzZXMgPSByZXF1aXJlKCcuL3V0aWxzL2NsYXNzZXMnKSxcbiAgZXZlbnRzID0gcmVxdWlyZSgnLi91dGlscy9ldmVudHMnKSxcbiAgZXh0ZW5kID0gcmVxdWlyZSgnLi91dGlscy9leHRlbmQnKSxcbiAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3V0aWxzL3RvLXN0cmluZycpLFxuICBnZXRCeUNsYXNzID0gcmVxdWlyZSgnLi91dGlscy9nZXQtYnktY2xhc3MnKSxcbiAgZnV6enkgPSByZXF1aXJlKCcuL3V0aWxzL2Z1enp5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICBsb2NhdGlvbjogMCxcbiAgICBkaXN0YW5jZTogMTAwLFxuICAgIHRocmVzaG9sZDogMC40LFxuICAgIG11bHRpU2VhcmNoOiB0cnVlLFxuICAgIHNlYXJjaENsYXNzOiAnZnV6enktc2VhcmNoJ1xuICB9LCBvcHRpb25zKTtcblxuXG5cbiAgdmFyIGZ1enp5U2VhcmNoID0ge1xuICAgIHNlYXJjaDogZnVuY3Rpb24oc2VhcmNoU3RyaW5nLCBjb2x1bW5zKSB7XG4gICAgICAvLyBTdWJzdHJhY3QgYXJndW1lbnRzIGZyb20gdGhlIHNlYXJjaFN0cmluZyBvciBwdXQgc2VhcmNoU3RyaW5nIGFzIG9ubHkgYXJndW1lbnRcbiAgICAgIHZhciBzZWFyY2hBcmd1bWVudHMgPSBvcHRpb25zLm11bHRpU2VhcmNoID8gc2VhcmNoU3RyaW5nLnJlcGxhY2UoLyArJC8sICcnKS5zcGxpdCgvICsvKSA6IFtzZWFyY2hTdHJpbmddO1xuXG4gICAgICBmb3IgKHZhciBrID0gMCwga2wgPSBsaXN0Lml0ZW1zLmxlbmd0aDsgayA8IGtsOyBrKyspIHtcbiAgICAgICAgZnV6enlTZWFyY2guaXRlbShsaXN0Lml0ZW1zW2tdLCBjb2x1bW5zLCBzZWFyY2hBcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXRlbTogZnVuY3Rpb24oaXRlbSwgY29sdW1ucywgc2VhcmNoQXJndW1lbnRzKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNlYXJjaEFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZm91bmRBcmd1bWVudCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSBjb2x1bW5zLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICBpZiAoZnV6enlTZWFyY2gudmFsdWVzKGl0ZW0udmFsdWVzKCksIGNvbHVtbnNbal0sIHNlYXJjaEFyZ3VtZW50c1tpXSkpIHtcbiAgICAgICAgICAgIGZvdW5kQXJndW1lbnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZighZm91bmRBcmd1bWVudCkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZW0uZm91bmQgPSBmb3VuZDtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24odmFsdWVzLCB2YWx1ZSwgc2VhcmNoQXJndW1lbnQpIHtcbiAgICAgIGlmICh2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gdG9TdHJpbmcodmFsdWVzW3ZhbHVlXSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoZnV6enkodGV4dCwgc2VhcmNoQXJndW1lbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cblxuICBldmVudHMuYmluZChnZXRCeUNsYXNzKGxpc3QubGlzdENvbnRhaW5lciwgb3B0aW9ucy5zZWFyY2hDbGFzcyksICdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50OyAvLyBJRSBoYXZlIHNyY0VsZW1lbnRcbiAgICBsaXN0LnNlYXJjaCh0YXJnZXQudmFsdWUsIGZ1enp5U2VhcmNoLnNlYXJjaCk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihzdHIsIGNvbHVtbnMpIHtcbiAgICBsaXN0LnNlYXJjaChzdHIsIGNvbHVtbnMsIGZ1enp5U2VhcmNoLnNlYXJjaCk7XG4gIH07XG59O1xuIiwidmFyIG5hdHVyYWxTb3J0ID0gcmVxdWlyZSgnc3RyaW5nLW5hdHVyYWwtY29tcGFyZScpLFxuICBnZXRCeUNsYXNzID0gcmVxdWlyZSgnLi91dGlscy9nZXQtYnktY2xhc3MnKSxcbiAgZXh0ZW5kID0gcmVxdWlyZSgnLi91dGlscy9leHRlbmQnKSxcbiAgaW5kZXhPZiA9IHJlcXVpcmUoJy4vdXRpbHMvaW5kZXgtb2YnKSxcbiAgZXZlbnRzID0gcmVxdWlyZSgnLi91dGlscy9ldmVudHMnKSxcbiAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3V0aWxzL3RvLXN0cmluZycpLFxuICBjbGFzc2VzID0gcmVxdWlyZSgnLi91dGlscy9jbGFzc2VzJyksXG4gIGdldEF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0LWF0dHJpYnV0ZScpLFxuICB0b0FycmF5ID0gcmVxdWlyZSgnLi91dGlscy90by1hcnJheScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlkLCBvcHRpb25zLCB2YWx1ZXMpIHtcblxuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgaW5pdCxcbiAgICBJdGVtID0gcmVxdWlyZSgnLi9pdGVtJykoc2VsZiksXG4gICAgYWRkQXN5bmMgPSByZXF1aXJlKCcuL2FkZC1hc3luYycpKHNlbGYpLFxuICAgIGluaXRQYWdpbmF0aW9uID0gcmVxdWlyZSgnLi9wYWdpbmF0aW9uJykoc2VsZik7XG5cbiAgaW5pdCA9IHtcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmxpc3RDbGFzcyAgICAgID0gXCJsaXN0XCI7XG4gICAgICBzZWxmLnNlYXJjaENsYXNzICAgID0gXCJzZWFyY2hcIjtcbiAgICAgIHNlbGYuc29ydENsYXNzICAgICAgPSBcInNvcnRcIjtcbiAgICAgIHNlbGYucGFnZSAgICAgICAgICAgPSAxMDAwMDtcbiAgICAgIHNlbGYuaSAgICAgICAgICAgICAgPSAxO1xuICAgICAgc2VsZi5pdGVtcyAgICAgICAgICA9IFtdO1xuICAgICAgc2VsZi52aXNpYmxlSXRlbXMgICA9IFtdO1xuICAgICAgc2VsZi5tYXRjaGluZ0l0ZW1zICA9IFtdO1xuICAgICAgc2VsZi5zZWFyY2hlZCAgICAgICA9IGZhbHNlO1xuICAgICAgc2VsZi5maWx0ZXJlZCAgICAgICA9IGZhbHNlO1xuICAgICAgc2VsZi5zZWFyY2hDb2x1bW5zICA9IHVuZGVmaW5lZDtcbiAgICAgIHNlbGYuaGFuZGxlcnMgICAgICAgPSB7ICd1cGRhdGVkJzogW10gfTtcbiAgICAgIHNlbGYudmFsdWVOYW1lcyAgICAgPSBbXTtcbiAgICAgIHNlbGYudXRpbHMgICAgICAgICAgPSB7XG4gICAgICAgIGdldEJ5Q2xhc3M6IGdldEJ5Q2xhc3MsXG4gICAgICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgICAgICBpbmRleE9mOiBpbmRleE9mLFxuICAgICAgICBldmVudHM6IGV2ZW50cyxcbiAgICAgICAgdG9TdHJpbmc6IHRvU3RyaW5nLFxuICAgICAgICBuYXR1cmFsU29ydDogbmF0dXJhbFNvcnQsXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIGdldEF0dHJpYnV0ZTogZ2V0QXR0cmlidXRlLFxuICAgICAgICB0b0FycmF5OiB0b0FycmF5XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnV0aWxzLmV4dGVuZChzZWxmLCBvcHRpb25zKTtcblxuICAgICAgc2VsZi5saXN0Q29udGFpbmVyID0gKHR5cGVvZihpZCkgPT09ICdzdHJpbmcnKSA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSA6IGlkO1xuICAgICAgaWYgKCFzZWxmLmxpc3RDb250YWluZXIpIHsgcmV0dXJuOyB9XG4gICAgICBzZWxmLmxpc3QgICAgICAgPSBnZXRCeUNsYXNzKHNlbGYubGlzdENvbnRhaW5lciwgc2VsZi5saXN0Q2xhc3MsIHRydWUpO1xuXG4gICAgICBzZWxmLnBhcnNlICAgICAgICA9IHJlcXVpcmUoJy4vcGFyc2UnKShzZWxmKTtcbiAgICAgIHNlbGYudGVtcGxhdGVyICAgID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXInKShzZWxmKTtcbiAgICAgIHNlbGYuc2VhcmNoICAgICAgID0gcmVxdWlyZSgnLi9zZWFyY2gnKShzZWxmKTtcbiAgICAgIHNlbGYuZmlsdGVyICAgICAgID0gcmVxdWlyZSgnLi9maWx0ZXInKShzZWxmKTtcbiAgICAgIHNlbGYuc29ydCAgICAgICAgID0gcmVxdWlyZSgnLi9zb3J0Jykoc2VsZik7XG4gICAgICBzZWxmLmZ1enp5U2VhcmNoICA9IHJlcXVpcmUoJy4vZnV6enktc2VhcmNoJykoc2VsZiwgb3B0aW9ucy5mdXp6eVNlYXJjaCk7XG5cbiAgICAgIHRoaXMuaGFuZGxlcnMoKTtcbiAgICAgIHRoaXMuaXRlbXMoKTtcbiAgICAgIHRoaXMucGFnaW5hdGlvbigpO1xuXG4gICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgaGFuZGxlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgaGFuZGxlciBpbiBzZWxmLmhhbmRsZXJzKSB7XG4gICAgICAgIGlmIChzZWxmW2hhbmRsZXJdKSB7XG4gICAgICAgICAgc2VsZi5vbihoYW5kbGVyLCBzZWxmW2hhbmRsZXJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaXRlbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5wYXJzZShzZWxmLmxpc3QpO1xuICAgICAgaWYgKHZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlbGYuYWRkKHZhbHVlcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYWdpbmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChvcHRpb25zLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgb3B0aW9ucy5wYWdpbmF0aW9uID0gW3t9XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uWzBdID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgIG9wdGlvbnMucGFnaW5hdGlvbiA9IFtvcHRpb25zLnBhZ2luYXRpb25dO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG9wdGlvbnMucGFnaW5hdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgaW5pdFBhZ2luYXRpb24ob3B0aW9ucy5wYWdpbmF0aW9uW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKlxuICAqIFJlLXBhcnNlIHRoZSBMaXN0LCB1c2UgaWYgaHRtbCBoYXZlIGNoYW5nZWRcbiAgKi9cbiAgdGhpcy5yZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5pdGVtcyAgICAgICAgICA9IFtdO1xuICAgIHNlbGYudmlzaWJsZUl0ZW1zICAgPSBbXTtcbiAgICBzZWxmLm1hdGNoaW5nSXRlbXMgID0gW107XG4gICAgc2VsZi5zZWFyY2hlZCAgICAgICA9IGZhbHNlO1xuICAgIHNlbGYuZmlsdGVyZWQgICAgICAgPSBmYWxzZTtcbiAgICBzZWxmLnBhcnNlKHNlbGYubGlzdCk7XG4gIH07XG5cbiAgdGhpcy50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIganNvbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHNlbGYuaXRlbXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAganNvbi5wdXNoKHNlbGYuaXRlbXNbaV0udmFsdWVzKCkpO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfTtcblxuXG4gIC8qXG4gICogQWRkIG9iamVjdCB0byBsaXN0XG4gICovXG4gIHRoaXMuYWRkID0gZnVuY3Rpb24odmFsdWVzLCBjYWxsYmFjaykge1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgYWRkQXN5bmModmFsdWVzLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBhZGRlZCA9IFtdLFxuICAgICAgbm90Q3JlYXRlID0gZmFsc2U7XG4gICAgaWYgKHZhbHVlc1swXSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHZhbHVlcyA9IFt2YWx1ZXNdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB2YWx1ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBudWxsO1xuICAgICAgbm90Q3JlYXRlID0gKHNlbGYuaXRlbXMubGVuZ3RoID4gc2VsZi5wYWdlKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIGl0ZW0gPSBuZXcgSXRlbSh2YWx1ZXNbaV0sIHVuZGVmaW5lZCwgbm90Q3JlYXRlKTtcbiAgICAgIHNlbGYuaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIGFkZGVkLnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHNlbGYudXBkYXRlKCk7XG4gICAgcmV0dXJuIGFkZGVkO1xuICB9O1xuXG5cdHRoaXMuc2hvdyA9IGZ1bmN0aW9uKGksIHBhZ2UpIHtcblx0XHR0aGlzLmkgPSBpO1xuXHRcdHRoaXMucGFnZSA9IHBhZ2U7XG5cdFx0c2VsZi51cGRhdGUoKTtcbiAgICByZXR1cm4gc2VsZjtcblx0fTtcblxuICAvKiBSZW1vdmVzIG9iamVjdCBmcm9tIGxpc3QuXG4gICogTG9vcHMgdGhyb3VnaCB0aGUgbGlzdCBhbmQgcmVtb3ZlcyBvYmplY3RzIHdoZXJlXG4gICogcHJvcGVydHkgXCJ2YWx1ZW5hbWVcIiA9PT0gdmFsdWVcbiAgKi9cbiAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbih2YWx1ZU5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIGZvdW5kID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBzZWxmLml0ZW1zLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGlmIChzZWxmLml0ZW1zW2ldLnZhbHVlcygpW3ZhbHVlTmFtZV0gPT0gdmFsdWUpIHtcbiAgICAgICAgc2VsZi50ZW1wbGF0ZXIucmVtb3ZlKHNlbGYuaXRlbXNbaV0sIG9wdGlvbnMpO1xuICAgICAgICBzZWxmLml0ZW1zLnNwbGljZShpLDEpO1xuICAgICAgICBpbC0tO1xuICAgICAgICBpLS07XG4gICAgICAgIGZvdW5kKys7XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYudXBkYXRlKCk7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9O1xuXG4gIC8qIEdldHMgdGhlIG9iamVjdHMgaW4gdGhlIGxpc3Qgd2hpY2hcbiAgKiBwcm9wZXJ0eSBcInZhbHVlTmFtZVwiID09PSB2YWx1ZVxuICAqL1xuICB0aGlzLmdldCA9IGZ1bmN0aW9uKHZhbHVlTmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbWF0Y2hlZEl0ZW1zID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gc2VsZi5pdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXNbaV07XG4gICAgICBpZiAoaXRlbS52YWx1ZXMoKVt2YWx1ZU5hbWVdID09IHZhbHVlKSB7XG4gICAgICAgIG1hdGNoZWRJdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlZEl0ZW1zO1xuICB9O1xuXG4gIC8qXG4gICogR2V0IHNpemUgb2YgdGhlIGxpc3RcbiAgKi9cbiAgdGhpcy5zaXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuaXRlbXMubGVuZ3RoO1xuICB9O1xuXG4gIC8qXG4gICogUmVtb3ZlcyBhbGwgaXRlbXMgZnJvbSB0aGUgbGlzdFxuICAqL1xuICB0aGlzLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi50ZW1wbGF0ZXIuY2xlYXIoKTtcbiAgICBzZWxmLml0ZW1zID0gW107XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgdGhpcy5vbiA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHNlbGYuaGFuZGxlcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIHRoaXMub2ZmID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSBzZWxmLmhhbmRsZXJzW2V2ZW50XTtcbiAgICB2YXIgaW5kZXggPSBpbmRleE9mKGUsIGNhbGxiYWNrKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICB0aGlzLnRyaWdnZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpID0gc2VsZi5oYW5kbGVyc1tldmVudF0ubGVuZ3RoO1xuICAgIHdoaWxlKGktLSkge1xuICAgICAgc2VsZi5oYW5kbGVyc1tldmVudF1baV0oc2VsZik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIHRoaXMucmVzZXQgPSB7XG4gICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpcyA9IHNlbGYuaXRlbXMsXG4gICAgICAgIGlsID0gaXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGlsLS0pIHtcbiAgICAgICAgaXNbaWxdLmZpbHRlcmVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuICAgIHNlYXJjaDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaXMgPSBzZWxmLml0ZW1zLFxuICAgICAgICBpbCA9IGlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpbC0tKSB7XG4gICAgICAgIGlzW2lsXS5mb3VuZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlzID0gc2VsZi5pdGVtcyxcblx0XHRcdGlsID0gaXMubGVuZ3RoO1xuXG4gICAgc2VsZi52aXNpYmxlSXRlbXMgPSBbXTtcbiAgICBzZWxmLm1hdGNoaW5nSXRlbXMgPSBbXTtcbiAgICBzZWxmLnRlbXBsYXRlci5jbGVhcigpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWw7IGkrKykge1xuICAgICAgaWYgKGlzW2ldLm1hdGNoaW5nKCkgJiYgKChzZWxmLm1hdGNoaW5nSXRlbXMubGVuZ3RoKzEpID49IHNlbGYuaSAmJiBzZWxmLnZpc2libGVJdGVtcy5sZW5ndGggPCBzZWxmLnBhZ2UpKSB7XG4gICAgICAgIGlzW2ldLnNob3coKTtcbiAgICAgICAgc2VsZi52aXNpYmxlSXRlbXMucHVzaChpc1tpXSk7XG4gICAgICAgIHNlbGYubWF0Y2hpbmdJdGVtcy5wdXNoKGlzW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNbaV0ubWF0Y2hpbmcoKSkge1xuICAgICAgICBzZWxmLm1hdGNoaW5nSXRlbXMucHVzaChpc1tpXSk7XG4gICAgICAgIGlzW2ldLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzW2ldLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZi50cmlnZ2VyKCd1cGRhdGVkJyk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgaW5pdC5zdGFydCgpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5pdFZhbHVlcywgZWxlbWVudCwgbm90Q3JlYXRlKSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzO1xuXG4gICAgdGhpcy5fdmFsdWVzID0ge307XG5cbiAgICB0aGlzLmZvdW5kID0gZmFsc2U7IC8vIFNob3cgaWYgbGlzdC5zZWFyY2hlZCA9PSB0cnVlIGFuZCB0aGlzLmZvdW5kID09IHRydWVcbiAgICB0aGlzLmZpbHRlcmVkID0gZmFsc2U7Ly8gU2hvdyBpZiBsaXN0LmZpbHRlcmVkID09IHRydWUgYW5kIHRoaXMuZmlsdGVyZWQgPT0gdHJ1ZVxuXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbihpbml0VmFsdWVzLCBlbGVtZW50LCBub3RDcmVhdGUpIHtcbiAgICAgIGlmIChlbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG5vdENyZWF0ZSkge1xuICAgICAgICAgIGl0ZW0udmFsdWVzKGluaXRWYWx1ZXMsIG5vdENyZWF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbS52YWx1ZXMoaW5pdFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW0uZWxtID0gZWxlbWVudDtcbiAgICAgICAgdmFyIHZhbHVlcyA9IGxpc3QudGVtcGxhdGVyLmdldChpdGVtLCBpbml0VmFsdWVzKTtcbiAgICAgICAgaXRlbS52YWx1ZXModmFsdWVzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy52YWx1ZXMgPSBmdW5jdGlvbihuZXdWYWx1ZXMsIG5vdENyZWF0ZSkge1xuICAgICAgaWYgKG5ld1ZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvcih2YXIgbmFtZSBpbiBuZXdWYWx1ZXMpIHtcbiAgICAgICAgICBpdGVtLl92YWx1ZXNbbmFtZV0gPSBuZXdWYWx1ZXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdENyZWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGxpc3QudGVtcGxhdGVyLnNldChpdGVtLCBpdGVtLnZhbHVlcygpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uX3ZhbHVlcztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICBsaXN0LnRlbXBsYXRlci5zaG93KGl0ZW0pO1xuICAgIH07XG5cbiAgICB0aGlzLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxpc3QudGVtcGxhdGVyLmhpZGUoaXRlbSk7XG4gICAgfTtcblxuICAgIHRoaXMubWF0Y2hpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChsaXN0LmZpbHRlcmVkICYmIGxpc3Quc2VhcmNoZWQgJiYgaXRlbS5mb3VuZCAmJiBpdGVtLmZpbHRlcmVkKSB8fFxuICAgICAgICAobGlzdC5maWx0ZXJlZCAmJiAhbGlzdC5zZWFyY2hlZCAmJiBpdGVtLmZpbHRlcmVkKSB8fFxuICAgICAgICAoIWxpc3QuZmlsdGVyZWQgJiYgbGlzdC5zZWFyY2hlZCAmJiBpdGVtLmZvdW5kKSB8fFxuICAgICAgICAoIWxpc3QuZmlsdGVyZWQgJiYgIWxpc3Quc2VhcmNoZWQpXG4gICAgICApO1xuICAgIH07XG5cbiAgICB0aGlzLnZpc2libGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoaXRlbS5lbG0gJiYgKGl0ZW0uZWxtLnBhcmVudE5vZGUgPT0gbGlzdC5saXN0KSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfTtcblxuICAgIGluaXQoaW5pdFZhbHVlcywgZWxlbWVudCwgbm90Q3JlYXRlKTtcbiAgfTtcbn07XG4iLCJ2YXIgY2xhc3NlcyA9IHJlcXVpcmUoJy4vdXRpbHMvY2xhc3NlcycpLFxuICBldmVudHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50cycpLFxuICBMaXN0ID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcblxuICB2YXIgcmVmcmVzaCA9IGZ1bmN0aW9uKHBhZ2luZ0xpc3QsIG9wdGlvbnMpIHtcbiAgICB2YXIgaXRlbSxcbiAgICAgIGwgPSBsaXN0Lm1hdGNoaW5nSXRlbXMubGVuZ3RoLFxuICAgICAgaW5kZXggPSBsaXN0LmksXG4gICAgICBwYWdlID0gbGlzdC5wYWdlLFxuICAgICAgcGFnZXMgPSBNYXRoLmNlaWwobCAvIHBhZ2UpLFxuICAgICAgY3VycmVudFBhZ2UgPSBNYXRoLmNlaWwoKGluZGV4IC8gcGFnZSkpLFxuICAgICAgaW5uZXJXaW5kb3cgPSBvcHRpb25zLmlubmVyV2luZG93IHx8IDIsXG4gICAgICBsZWZ0ID0gb3B0aW9ucy5sZWZ0IHx8IG9wdGlvbnMub3V0ZXJXaW5kb3cgfHwgMCxcbiAgICAgIHJpZ2h0ID0gb3B0aW9ucy5yaWdodCB8fCBvcHRpb25zLm91dGVyV2luZG93IHx8IDA7XG5cbiAgICByaWdodCA9IHBhZ2VzIC0gcmlnaHQ7XG5cbiAgICBwYWdpbmdMaXN0LmNsZWFyKCk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gcGFnZXM7IGkrKykge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IChjdXJyZW50UGFnZSA9PT0gaSkgPyBcImFjdGl2ZVwiIDogXCJcIjtcblxuICAgICAgLy9jb25zb2xlLmxvZyhpLCBsZWZ0LCByaWdodCwgY3VycmVudFBhZ2UsIChjdXJyZW50UGFnZSAtIGlubmVyV2luZG93KSwgKGN1cnJlbnRQYWdlICsgaW5uZXJXaW5kb3cpLCBjbGFzc05hbWUpO1xuXG4gICAgICBpZiAoaXMubnVtYmVyKGksIGxlZnQsIHJpZ2h0LCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpKSB7XG4gICAgICAgIGl0ZW0gPSBwYWdpbmdMaXN0LmFkZCh7XG4gICAgICAgICAgcGFnZTogaSxcbiAgICAgICAgICBkb3R0ZWQ6IGZhbHNlXG4gICAgICAgIH0pWzBdO1xuICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgY2xhc3NlcyhpdGVtLmVsbSkuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkRXZlbnQoaXRlbS5lbG0sIGksIHBhZ2UpO1xuICAgICAgfSBlbHNlIGlmIChpcy5kb3R0ZWQocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdywgcGFnaW5nTGlzdC5zaXplKCkpKSB7XG4gICAgICAgIGl0ZW0gPSBwYWdpbmdMaXN0LmFkZCh7XG4gICAgICAgICAgcGFnZTogXCIuLi5cIixcbiAgICAgICAgICBkb3R0ZWQ6IHRydWVcbiAgICAgICAgfSlbMF07XG4gICAgICAgIGNsYXNzZXMoaXRlbS5lbG0pLmFkZChcImRpc2FibGVkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgaXMgPSB7XG4gICAgbnVtYmVyOiBmdW5jdGlvbihpLCBsZWZ0LCByaWdodCwgY3VycmVudFBhZ2UsIGlubmVyV2luZG93KSB7XG4gICAgICAgcmV0dXJuIHRoaXMubGVmdChpLCBsZWZ0KSB8fCB0aGlzLnJpZ2h0KGksIHJpZ2h0KSB8fCB0aGlzLmlubmVyV2luZG93KGksIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdyk7XG4gICAgfSxcbiAgICBsZWZ0OiBmdW5jdGlvbihpLCBsZWZ0KSB7XG4gICAgICByZXR1cm4gKGkgPD0gbGVmdCk7XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oaSwgcmlnaHQpIHtcbiAgICAgIHJldHVybiAoaSA+IHJpZ2h0KTtcbiAgICB9LFxuICAgIGlubmVyV2luZG93OiBmdW5jdGlvbihpLCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpIHtcbiAgICAgIHJldHVybiAoIGkgPj0gKGN1cnJlbnRQYWdlIC0gaW5uZXJXaW5kb3cpICYmIGkgPD0gKGN1cnJlbnRQYWdlICsgaW5uZXJXaW5kb3cpKTtcbiAgICB9LFxuICAgIGRvdHRlZDogZnVuY3Rpb24ocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdywgY3VycmVudFBhZ2VJdGVtKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3R0ZWRMZWZ0KHBhZ2luZ0xpc3QsIGksIGxlZnQsIHJpZ2h0LCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpIHx8ICh0aGlzLmRvdHRlZFJpZ2h0KHBhZ2luZ0xpc3QsIGksIGxlZnQsIHJpZ2h0LCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3csIGN1cnJlbnRQYWdlSXRlbSkpO1xuICAgIH0sXG4gICAgZG90dGVkTGVmdDogZnVuY3Rpb24ocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdykge1xuICAgICAgcmV0dXJuICgoaSA9PSAobGVmdCArIDEpKSAmJiAhdGhpcy5pbm5lcldpbmRvdyhpLCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpICYmICF0aGlzLnJpZ2h0KGksIHJpZ2h0KSk7XG4gICAgfSxcbiAgICBkb3R0ZWRSaWdodDogZnVuY3Rpb24ocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdywgY3VycmVudFBhZ2VJdGVtKSB7XG4gICAgICBpZiAocGFnaW5nTGlzdC5pdGVtc1tjdXJyZW50UGFnZUl0ZW0tMV0udmFsdWVzKCkuZG90dGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoKGkgPT0gKHJpZ2h0KSkgJiYgIXRoaXMuaW5uZXJXaW5kb3coaSwgY3VycmVudFBhZ2UsIGlubmVyV2luZG93KSAmJiAhdGhpcy5yaWdodChpLCByaWdodCkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgYWRkRXZlbnQgPSBmdW5jdGlvbihlbG0sIGksIHBhZ2UpIHtcbiAgICAgZXZlbnRzLmJpbmQoZWxtLCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICBsaXN0LnNob3coKGktMSkqcGFnZSArIDEsIHBhZ2UpO1xuICAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBwYWdpbmdMaXN0ID0gbmV3IExpc3QobGlzdC5saXN0Q29udGFpbmVyLmlkLCB7XG4gICAgICBsaXN0Q2xhc3M6IG9wdGlvbnMucGFnaW5hdGlvbkNsYXNzIHx8ICdwYWdpbmF0aW9uJyxcbiAgICAgIGl0ZW06IFwiPGxpPjxhIGNsYXNzPSdwYWdlJyBocmVmPSdqYXZhc2NyaXB0OmZ1bmN0aW9uIFooKXtaPVxcXCJcXFwifVooKSc+PC9hPjwvbGk+XCIsXG4gICAgICB2YWx1ZU5hbWVzOiBbJ3BhZ2UnLCAnZG90dGVkJ10sXG4gICAgICBzZWFyY2hDbGFzczogJ3BhZ2luYXRpb24tc2VhcmNoLXRoYXQtaXMtbm90LXN1cHBvc2VkLXRvLWV4aXN0JyxcbiAgICAgIHNvcnRDbGFzczogJ3BhZ2luYXRpb24tc29ydC10aGF0LWlzLW5vdC1zdXBwb3NlZC10by1leGlzdCdcbiAgICB9KTtcblxuICAgIGxpc3Qub24oJ3VwZGF0ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJlZnJlc2gocGFnaW5nTGlzdCwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgcmVmcmVzaChwYWdpbmdMaXN0LCBvcHRpb25zKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcblxuICB2YXIgSXRlbSA9IHJlcXVpcmUoJy4vaXRlbScpKGxpc3QpO1xuXG4gIHZhciBnZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKHBhcmVudCkge1xuICAgIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZE5vZGVzLFxuICAgICAgaXRlbXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBub2Rlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAvLyBPbmx5IHRleHRub2RlcyBoYXZlIGEgZGF0YSBhdHRyaWJ1dGVcbiAgICAgIGlmIChub2Rlc1tpXS5kYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaXRlbXMucHVzaChub2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICB2YXIgcGFyc2UgPSBmdW5jdGlvbihpdGVtRWxlbWVudHMsIHZhbHVlTmFtZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBpdGVtRWxlbWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgbGlzdC5pdGVtcy5wdXNoKG5ldyBJdGVtKHZhbHVlTmFtZXMsIGl0ZW1FbGVtZW50c1tpXSkpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHBhcnNlQXN5bmMgPSBmdW5jdGlvbihpdGVtRWxlbWVudHMsIHZhbHVlTmFtZXMpIHtcbiAgICB2YXIgaXRlbXNUb0luZGV4ID0gaXRlbUVsZW1lbnRzLnNwbGljZSgwLCA1MCk7IC8vIFRPRE86IElmIDwgMTAwIGl0ZW1zLCB3aGF0IGhhcHBlbnMgaW4gSUUgZXRjP1xuICAgIHBhcnNlKGl0ZW1zVG9JbmRleCwgdmFsdWVOYW1lcyk7XG4gICAgaWYgKGl0ZW1FbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBwYXJzZUFzeW5jKGl0ZW1FbGVtZW50cywgdmFsdWVOYW1lcyk7XG4gICAgICB9LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC51cGRhdGUoKTtcbiAgICAgIGxpc3QudHJpZ2dlcigncGFyc2VDb21wbGV0ZScpO1xuICAgIH1cbiAgfTtcblxuICBsaXN0LmhhbmRsZXJzLnBhcnNlQ29tcGxldGUgPSBsaXN0LmhhbmRsZXJzLnBhcnNlQ29tcGxldGUgfHwgW107XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtc1RvSW5kZXggPSBnZXRDaGlsZHJlbihsaXN0Lmxpc3QpLFxuICAgICAgdmFsdWVOYW1lcyA9IGxpc3QudmFsdWVOYW1lcztcblxuICAgIGlmIChsaXN0LmluZGV4QXN5bmMpIHtcbiAgICAgIHBhcnNlQXN5bmMoaXRlbXNUb0luZGV4LCB2YWx1ZU5hbWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2UoaXRlbXNUb0luZGV4LCB2YWx1ZU5hbWVzKTtcbiAgICB9XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0KSB7XG4gIHZhciBpdGVtLFxuICAgIHRleHQsXG4gICAgY29sdW1ucyxcbiAgICBzZWFyY2hTdHJpbmcsXG4gICAgY3VzdG9tU2VhcmNoO1xuXG4gIHZhciBwcmVwYXJlID0ge1xuICAgIHJlc2V0TGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICBsaXN0LmkgPSAxO1xuICAgICAgbGlzdC50ZW1wbGF0ZXIuY2xlYXIoKTtcbiAgICAgIGN1c3RvbVNlYXJjaCA9IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAyICYmIGFyZ3NbMV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBjb2x1bW5zID0gYXJnc1sxXTtcbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT0gMiAmJiB0eXBlb2YoYXJnc1sxXSkgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbHVtbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGN1c3RvbVNlYXJjaCA9IGFyZ3NbMV07XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09IDMpIHtcbiAgICAgICAgY29sdW1ucyA9IGFyZ3NbMV07XG4gICAgICAgIGN1c3RvbVNlYXJjaCA9IGFyZ3NbMl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2x1bW5zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0Q29sdW1uczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGlzdC5pdGVtcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGlmIChjb2x1bW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29sdW1ucyA9IChsaXN0LnNlYXJjaENvbHVtbnMgPT09IHVuZGVmaW5lZCkgPyBwcmVwYXJlLnRvQXJyYXkobGlzdC5pdGVtc1swXS52YWx1ZXMoKSkgOiBsaXN0LnNlYXJjaENvbHVtbnM7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRTZWFyY2hTdHJpbmc6IGZ1bmN0aW9uKHMpIHtcbiAgICAgIHMgPSBsaXN0LnV0aWxzLnRvU3RyaW5nKHMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBzID0gcy5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I10vZywgXCJcXFxcJCZcIik7IC8vIEVzY2FwZSByZWd1bGFyIGV4cHJlc3Npb24gY2hhcmFjdGVyc1xuICAgICAgc2VhcmNoU3RyaW5nID0gcztcbiAgICB9LFxuICAgIHRvQXJyYXk6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgdmFyIHRtcENvbHVtbiA9IFtdO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgdG1wQ29sdW1uLnB1c2gobmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG1wQ29sdW1uO1xuICAgIH1cbiAgfTtcbiAgdmFyIHNlYXJjaCA9IHtcbiAgICBsaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwLCBrbCA9IGxpc3QuaXRlbXMubGVuZ3RoOyBrIDwga2w7IGsrKykge1xuICAgICAgICBzZWFyY2guaXRlbShsaXN0Lml0ZW1zW2tdKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGl0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uZm91bmQgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IGNvbHVtbnMubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICBpZiAoc2VhcmNoLnZhbHVlcyhpdGVtLnZhbHVlcygpLCBjb2x1bW5zW2pdKSkge1xuICAgICAgICAgIGl0ZW0uZm91bmQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbih2YWx1ZXMsIGNvbHVtbikge1xuICAgICAgaWYgKHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShjb2x1bW4pKSB7XG4gICAgICAgIHRleHQgPSBsaXN0LnV0aWxzLnRvU3RyaW5nKHZhbHVlc1tjb2x1bW5dKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoKHNlYXJjaFN0cmluZyAhPT0gXCJcIikgJiYgKHRleHQuc2VhcmNoKHNlYXJjaFN0cmluZykgPiAtMSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGlzdC5yZXNldC5zZWFyY2goKTtcbiAgICAgIGxpc3Quc2VhcmNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNlYXJjaE1ldGhvZCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGxpc3QudHJpZ2dlcignc2VhcmNoU3RhcnQnKTtcblxuICAgIHByZXBhcmUucmVzZXRMaXN0KCk7XG4gICAgcHJlcGFyZS5zZXRTZWFyY2hTdHJpbmcoc3RyKTtcbiAgICBwcmVwYXJlLnNldE9wdGlvbnMoYXJndW1lbnRzKTsgLy8gc3RyLCBjb2xzfHNlYXJjaEZ1bmN0aW9uLCBzZWFyY2hGdW5jdGlvblxuICAgIHByZXBhcmUuc2V0Q29sdW1ucygpO1xuXG4gICAgaWYgKHNlYXJjaFN0cmluZyA9PT0gXCJcIiApIHtcbiAgICAgIHNlYXJjaC5yZXNldCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNlYXJjaGVkID0gdHJ1ZTtcbiAgICAgIGlmIChjdXN0b21TZWFyY2gpIHtcbiAgICAgICAgY3VzdG9tU2VhcmNoKHNlYXJjaFN0cmluZywgY29sdW1ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWFyY2gubGlzdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxpc3QudXBkYXRlKCk7XG4gICAgbGlzdC50cmlnZ2VyKCdzZWFyY2hDb21wbGV0ZScpO1xuICAgIHJldHVybiBsaXN0LnZpc2libGVJdGVtcztcbiAgfTtcblxuICBsaXN0LmhhbmRsZXJzLnNlYXJjaFN0YXJ0ID0gbGlzdC5oYW5kbGVycy5zZWFyY2hTdGFydCB8fCBbXTtcbiAgbGlzdC5oYW5kbGVycy5zZWFyY2hDb21wbGV0ZSA9IGxpc3QuaGFuZGxlcnMuc2VhcmNoQ29tcGxldGUgfHwgW107XG5cbiAgbGlzdC51dGlscy5ldmVudHMuYmluZChsaXN0LnV0aWxzLmdldEJ5Q2xhc3MobGlzdC5saXN0Q29udGFpbmVyLCBsaXN0LnNlYXJjaENsYXNzKSwgJ2tleXVwJywgZnVuY3Rpb24oZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsIC8vIElFIGhhdmUgc3JjRWxlbWVudFxuICAgICAgYWxyZWFkeUNsZWFyZWQgPSAodGFyZ2V0LnZhbHVlID09PSBcIlwiICYmICFsaXN0LnNlYXJjaGVkKTtcbiAgICBpZiAoIWFscmVhZHlDbGVhcmVkKSB7IC8vIElmIG9uaW5wdXQgYWxyZWFkeSBoYXZlIHJlc2V0dGVkIHRoZSBsaXN0LCBkbyBub3RoaW5nXG4gICAgICBzZWFyY2hNZXRob2QodGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVzZWQgdG8gZGV0ZWN0IGNsaWNrIG9uIEhUTUw1IGNsZWFyIGJ1dHRvblxuICBsaXN0LnV0aWxzLmV2ZW50cy5iaW5kKGxpc3QudXRpbHMuZ2V0QnlDbGFzcyhsaXN0Lmxpc3RDb250YWluZXIsIGxpc3Quc2VhcmNoQ2xhc3MpLCAnaW5wdXQnLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcbiAgICBpZiAodGFyZ2V0LnZhbHVlID09PSBcIlwiKSB7XG4gICAgICBzZWFyY2hNZXRob2QoJycpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHNlYXJjaE1ldGhvZDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcblxuICB2YXIgYnV0dG9ucyA9IHtcbiAgICBlbHM6IHVuZGVmaW5lZCxcbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBidXR0b25zLmVscy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGxpc3QudXRpbHMuY2xhc3NlcyhidXR0b25zLmVsc1tpXSkucmVtb3ZlKCdhc2MnKTtcbiAgICAgICAgbGlzdC51dGlscy5jbGFzc2VzKGJ1dHRvbnMuZWxzW2ldKS5yZW1vdmUoJ2Rlc2MnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldE9yZGVyOiBmdW5jdGlvbihidG4pIHtcbiAgICAgIHZhciBwcmVkZWZpbmVkT3JkZXIgPSBsaXN0LnV0aWxzLmdldEF0dHJpYnV0ZShidG4sICdkYXRhLW9yZGVyJyk7XG4gICAgICBpZiAocHJlZGVmaW5lZE9yZGVyID09IFwiYXNjXCIgfHwgcHJlZGVmaW5lZE9yZGVyID09IFwiZGVzY1wiKSB7XG4gICAgICAgIHJldHVybiBwcmVkZWZpbmVkT3JkZXI7XG4gICAgICB9IGVsc2UgaWYgKGxpc3QudXRpbHMuY2xhc3NlcyhidG4pLmhhcygnZGVzYycpKSB7XG4gICAgICAgIHJldHVybiBcImFzY1wiO1xuICAgICAgfSBlbHNlIGlmIChsaXN0LnV0aWxzLmNsYXNzZXMoYnRuKS5oYXMoJ2FzYycpKSB7XG4gICAgICAgIHJldHVybiBcImRlc2NcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImFzY1wiO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0SW5TZW5zaXRpdmU6IGZ1bmN0aW9uKGJ0biwgb3B0aW9ucykge1xuICAgICAgdmFyIGluc2Vuc2l0aXZlID0gbGlzdC51dGlscy5nZXRBdHRyaWJ1dGUoYnRuLCAnZGF0YS1pbnNlbnNpdGl2ZScpO1xuICAgICAgaWYgKGluc2Vuc2l0aXZlID09PSBcImZhbHNlXCIpIHtcbiAgICAgICAgb3B0aW9ucy5pbnNlbnNpdGl2ZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5pbnNlbnNpdGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRPcmRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gYnV0dG9ucy5lbHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICB2YXIgYnRuID0gYnV0dG9ucy5lbHNbaV07XG4gICAgICAgIGlmIChsaXN0LnV0aWxzLmdldEF0dHJpYnV0ZShidG4sICdkYXRhLXNvcnQnKSAhPT0gb3B0aW9ucy52YWx1ZU5hbWUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlZGVmaW5lZE9yZGVyID0gbGlzdC51dGlscy5nZXRBdHRyaWJ1dGUoYnRuLCAnZGF0YS1vcmRlcicpO1xuICAgICAgICBpZiAocHJlZGVmaW5lZE9yZGVyID09IFwiYXNjXCIgfHwgcHJlZGVmaW5lZE9yZGVyID09IFwiZGVzY1wiKSB7XG4gICAgICAgICAgaWYgKHByZWRlZmluZWRPcmRlciA9PSBvcHRpb25zLm9yZGVyKSB7XG4gICAgICAgICAgICBsaXN0LnV0aWxzLmNsYXNzZXMoYnRuKS5hZGQob3B0aW9ucy5vcmRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3QudXRpbHMuY2xhc3NlcyhidG4pLmFkZChvcHRpb25zLm9yZGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydCA9IGZ1bmN0aW9uKCkge1xuICAgIGxpc3QudHJpZ2dlcignc29ydFN0YXJ0Jyk7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICAgIHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF0uY3VycmVudFRhcmdldCB8fCBhcmd1bWVudHNbMF0uc3JjRWxlbWVudCB8fCB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICBvcHRpb25zLnZhbHVlTmFtZSA9IGxpc3QudXRpbHMuZ2V0QXR0cmlidXRlKHRhcmdldCwgJ2RhdGEtc29ydCcpO1xuICAgICAgYnV0dG9ucy5nZXRJblNlbnNpdGl2ZSh0YXJnZXQsIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5vcmRlciA9IGJ1dHRvbnMuZ2V0T3JkZXIodGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1sxXSB8fCBvcHRpb25zO1xuICAgICAgb3B0aW9ucy52YWx1ZU5hbWUgPSBhcmd1bWVudHNbMF07XG4gICAgICBvcHRpb25zLm9yZGVyID0gb3B0aW9ucy5vcmRlciB8fCBcImFzY1wiO1xuICAgICAgb3B0aW9ucy5pbnNlbnNpdGl2ZSA9ICh0eXBlb2Ygb3B0aW9ucy5pbnNlbnNpdGl2ZSA9PSBcInVuZGVmaW5lZFwiKSA/IHRydWUgOiBvcHRpb25zLmluc2Vuc2l0aXZlO1xuICAgIH1cblxuICAgIGJ1dHRvbnMuY2xlYXIoKTtcbiAgICBidXR0b25zLnNldE9yZGVyKG9wdGlvbnMpO1xuXG5cbiAgICAvLyBjYXNlSW5zZW5zaXRpdmVcbiAgICAvLyBhbHBoYWJldFxuICAgIHZhciBjdXN0b21Tb3J0RnVuY3Rpb24gPSAob3B0aW9ucy5zb3J0RnVuY3Rpb24gfHwgbGlzdC5zb3J0RnVuY3Rpb24gfHwgbnVsbCksXG4gICAgICAgIG11bHRpID0gKChvcHRpb25zLm9yZGVyID09PSAnZGVzYycpID8gLTEgOiAxKSxcbiAgICAgICAgc29ydEZ1bmN0aW9uO1xuXG4gICAgaWYgKGN1c3RvbVNvcnRGdW5jdGlvbikge1xuICAgICAgc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24oaXRlbUEsIGl0ZW1CKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21Tb3J0RnVuY3Rpb24oaXRlbUEsIGl0ZW1CLCBvcHRpb25zKSAqIG11bHRpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24oaXRlbUEsIGl0ZW1CKSB7XG4gICAgICAgIHZhciBzb3J0ID0gbGlzdC51dGlscy5uYXR1cmFsU29ydDtcbiAgICAgICAgc29ydC5hbHBoYWJldCA9IGxpc3QuYWxwaGFiZXQgfHwgb3B0aW9ucy5hbHBoYWJldCB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghc29ydC5hbHBoYWJldCAmJiBvcHRpb25zLmluc2Vuc2l0aXZlKSB7XG4gICAgICAgICAgc29ydCA9IGxpc3QudXRpbHMubmF0dXJhbFNvcnQuY2FzZUluc2Vuc2l0aXZlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3J0KGl0ZW1BLnZhbHVlcygpW29wdGlvbnMudmFsdWVOYW1lXSwgaXRlbUIudmFsdWVzKClbb3B0aW9ucy52YWx1ZU5hbWVdKSAqIG11bHRpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBsaXN0Lml0ZW1zLnNvcnQoc29ydEZ1bmN0aW9uKTtcbiAgICBsaXN0LnVwZGF0ZSgpO1xuICAgIGxpc3QudHJpZ2dlcignc29ydENvbXBsZXRlJyk7XG4gIH07XG5cbiAgLy8gQWRkIGhhbmRsZXJzXG4gIGxpc3QuaGFuZGxlcnMuc29ydFN0YXJ0ID0gbGlzdC5oYW5kbGVycy5zb3J0U3RhcnQgfHwgW107XG4gIGxpc3QuaGFuZGxlcnMuc29ydENvbXBsZXRlID0gbGlzdC5oYW5kbGVycy5zb3J0Q29tcGxldGUgfHwgW107XG5cbiAgYnV0dG9ucy5lbHMgPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MobGlzdC5saXN0Q29udGFpbmVyLCBsaXN0LnNvcnRDbGFzcyk7XG4gIGxpc3QudXRpbHMuZXZlbnRzLmJpbmQoYnV0dG9ucy5lbHMsICdjbGljaycsIHNvcnQpO1xuICBsaXN0Lm9uKCdzZWFyY2hTdGFydCcsIGJ1dHRvbnMuY2xlYXIpO1xuICBsaXN0Lm9uKCdmaWx0ZXJTdGFydCcsIGJ1dHRvbnMuY2xlYXIpO1xuXG4gIHJldHVybiBzb3J0O1xufTtcbiIsInZhciBUZW1wbGF0ZXIgPSBmdW5jdGlvbihsaXN0KSB7XG4gIHZhciBpdGVtU291cmNlLFxuICAgIHRlbXBsYXRlciA9IHRoaXM7XG5cbiAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBpdGVtU291cmNlID0gdGVtcGxhdGVyLmdldEl0ZW1Tb3VyY2UobGlzdC5pdGVtKTtcbiAgICBpZiAoaXRlbVNvdXJjZSkge1xuICAgICAgaXRlbVNvdXJjZSA9IHRlbXBsYXRlci5jbGVhclNvdXJjZUl0ZW0oaXRlbVNvdXJjZSwgbGlzdC52YWx1ZU5hbWVzKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jbGVhclNvdXJjZUl0ZW0gPSBmdW5jdGlvbihlbCwgdmFsdWVOYW1lcykge1xuICAgIGZvcih2YXIgaSA9IDAsIGlsID0gdmFsdWVOYW1lcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICB2YXIgZWxtO1xuICAgICAgaWYgKHZhbHVlTmFtZXNbaV0uZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSB2YWx1ZU5hbWVzW2ldLmRhdGEubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS0nK3ZhbHVlTmFtZXNbaV0uZGF0YVtqXSwgJycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlTmFtZXNbaV0uYXR0ciAmJiB2YWx1ZU5hbWVzW2ldLm5hbWUpIHtcbiAgICAgICAgZWxtID0gbGlzdC51dGlscy5nZXRCeUNsYXNzKGVsLCB2YWx1ZU5hbWVzW2ldLm5hbWUsIHRydWUpO1xuICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSh2YWx1ZU5hbWVzW2ldLmF0dHIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbG0gPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MoZWwsIHZhbHVlTmFtZXNbaV0sIHRydWUpO1xuICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgZWxtLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsbSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIHRoaXMuZ2V0SXRlbVNvdXJjZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbm9kZXMgPSBsaXN0Lmxpc3QuY2hpbGROb2RlcyxcbiAgICAgICAgaXRlbXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbm9kZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAvLyBPbmx5IHRleHRub2RlcyBoYXZlIGEgZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgaWYgKG5vZGVzW2ldLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBub2Rlc1tpXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKC88dHJbXFxzPl0vZy5leGVjKGl0ZW0pKSB7XG4gICAgICB2YXIgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICAgdGJvZHkuaW5uZXJIVE1MID0gaXRlbTtcbiAgICAgIHJldHVybiB0Ym9keS5maXJzdENoaWxkO1xuICAgIH0gZWxzZSBpZiAoaXRlbS5pbmRleE9mKFwiPFwiKSAhPT0gLTEpIHtcbiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBpdGVtO1xuICAgICAgcmV0dXJuIGRpdi5maXJzdENoaWxkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobGlzdC5pdGVtKTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmdldCA9IGZ1bmN0aW9uKGl0ZW0sIHZhbHVlTmFtZXMpIHtcbiAgICB0ZW1wbGF0ZXIuY3JlYXRlKGl0ZW0pO1xuICAgIHZhciB2YWx1ZXMgPSB7fTtcbiAgICBmb3IodmFyIGkgPSAwLCBpbCA9IHZhbHVlTmFtZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgdmFyIGVsbTtcbiAgICAgIGlmICh2YWx1ZU5hbWVzW2ldLmRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsID0gdmFsdWVOYW1lc1tpXS5kYXRhLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICB2YWx1ZXNbdmFsdWVOYW1lc1tpXS5kYXRhW2pdXSA9IGxpc3QudXRpbHMuZ2V0QXR0cmlidXRlKGl0ZW0uZWxtLCAnZGF0YS0nK3ZhbHVlTmFtZXNbaV0uZGF0YVtqXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodmFsdWVOYW1lc1tpXS5hdHRyICYmIHZhbHVlTmFtZXNbaV0ubmFtZSkge1xuICAgICAgICBlbG0gPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MoaXRlbS5lbG0sIHZhbHVlTmFtZXNbaV0ubmFtZSwgdHJ1ZSk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZU5hbWVzW2ldLm5hbWVdID0gZWxtID8gbGlzdC51dGlscy5nZXRBdHRyaWJ1dGUoZWxtLCB2YWx1ZU5hbWVzW2ldLmF0dHIpIDogXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsbSA9IGxpc3QudXRpbHMuZ2V0QnlDbGFzcyhpdGVtLmVsbSwgdmFsdWVOYW1lc1tpXSwgdHJ1ZSk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZU5hbWVzW2ldXSA9IGVsbSA/IGVsbS5pbm5lckhUTUwgOiBcIlwiO1xuICAgICAgfVxuICAgICAgZWxtID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIHRoaXMuc2V0ID0gZnVuY3Rpb24oaXRlbSwgdmFsdWVzKSB7XG4gICAgdmFyIGdldFZhbHVlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGxpc3QudmFsdWVOYW1lcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGlmIChsaXN0LnZhbHVlTmFtZXNbaV0uZGF0YSkge1xuICAgICAgICAgIHZhciBkYXRhID0gbGlzdC52YWx1ZU5hbWVzW2ldLmRhdGE7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsID0gZGF0YS5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtqXSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBuYW1lIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxpc3QudmFsdWVOYW1lc1tpXS5hdHRyICYmIGxpc3QudmFsdWVOYW1lc1tpXS5uYW1lICYmIGxpc3QudmFsdWVOYW1lc1tpXS5uYW1lID09IG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdC52YWx1ZU5hbWVzW2ldO1xuICAgICAgICB9IGVsc2UgaWYgKGxpc3QudmFsdWVOYW1lc1tpXSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc2V0VmFsdWUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGVsbTtcbiAgICAgIHZhciB2YWx1ZU5hbWUgPSBnZXRWYWx1ZU5hbWUobmFtZSk7XG4gICAgICBpZiAoIXZhbHVlTmFtZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHZhbHVlTmFtZS5kYXRhKSB7XG4gICAgICAgIGl0ZW0uZWxtLnNldEF0dHJpYnV0ZSgnZGF0YS0nK3ZhbHVlTmFtZS5kYXRhLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlTmFtZS5hdHRyICYmIHZhbHVlTmFtZS5uYW1lKSB7XG4gICAgICAgIGVsbSA9IGxpc3QudXRpbHMuZ2V0QnlDbGFzcyhpdGVtLmVsbSwgdmFsdWVOYW1lLm5hbWUsIHRydWUpO1xuICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSh2YWx1ZU5hbWUuYXR0ciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbG0gPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MoaXRlbS5lbG0sIHZhbHVlTmFtZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChlbG0pIHtcbiAgICAgICAgICBlbG0uaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsbSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIGlmICghdGVtcGxhdGVyLmNyZWF0ZShpdGVtKSkge1xuICAgICAgZm9yKHZhciB2IGluIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KHYpKSB7XG4gICAgICAgICAgc2V0VmFsdWUodiwgdmFsdWVzW3ZdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5lbG0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXRlbVNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgbGlzdCBuZWVkIHRvIGhhdmUgYXQgbGlzdCBvbmUgaXRlbSBvbiBpbml0IG90aGVyd2lzZSB5b3UnbGwgaGF2ZSB0byBhZGQgYSB0ZW1wbGF0ZS5cIik7XG4gICAgfVxuICAgIC8qIElmIGl0ZW0gc291cmNlIGRvZXMgbm90IGV4aXN0cywgdXNlIHRoZSBmaXJzdCBpdGVtIGluIGxpc3QgYXNcbiAgICBzb3VyY2UgZm9yIG5ldyBpdGVtcyAqL1xuICAgIHZhciBuZXdJdGVtID0gaXRlbVNvdXJjZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgbmV3SXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgaXRlbS5lbG0gPSBuZXdJdGVtO1xuICAgIHRlbXBsYXRlci5zZXQoaXRlbSwgaXRlbS52YWx1ZXMoKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmIChpdGVtLmVsbS5wYXJlbnROb2RlID09PSBsaXN0Lmxpc3QpIHtcbiAgICAgIGxpc3QubGlzdC5yZW1vdmVDaGlsZChpdGVtLmVsbSk7XG4gICAgfVxuICB9O1xuICB0aGlzLnNob3cgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGVtcGxhdGVyLmNyZWF0ZShpdGVtKTtcbiAgICBsaXN0Lmxpc3QuYXBwZW5kQ2hpbGQoaXRlbS5lbG0pO1xuICB9O1xuICB0aGlzLmhpZGUgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKGl0ZW0uZWxtICE9PSB1bmRlZmluZWQgJiYgaXRlbS5lbG0ucGFyZW50Tm9kZSA9PT0gbGlzdC5saXN0KSB7XG4gICAgICBsaXN0Lmxpc3QucmVtb3ZlQ2hpbGQoaXRlbS5lbG0pO1xuICAgIH1cbiAgfTtcbiAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIC8qIC5pbm5lckhUTUwgPSAnJzsgZnVja3MgdXAgSUUgKi9cbiAgICBpZiAobGlzdC5saXN0Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgd2hpbGUgKGxpc3QubGlzdC5jaGlsZE5vZGVzLmxlbmd0aCA+PSAxKVxuICAgICAge1xuICAgICAgICBsaXN0Lmxpc3QucmVtb3ZlQ2hpbGQobGlzdC5saXN0LmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpbml0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgcmV0dXJuIG5ldyBUZW1wbGF0ZXIobGlzdCk7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBpbmRleCA9IHJlcXVpcmUoJy4vaW5kZXgtb2YnKTtcblxuLyoqXG4gKiBXaGl0ZXNwYWNlIHJlZ2V4cC5cbiAqL1xuXG52YXIgcmUgPSAvXFxzKy87XG5cbi8qKlxuICogdG9TdHJpbmcgcmVmZXJlbmNlLlxuICovXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogV3JhcCBgZWxgIGluIGEgYENsYXNzTGlzdGAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHJldHVybiB7Q2xhc3NMaXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVsKXtcbiAgcmV0dXJuIG5ldyBDbGFzc0xpc3QoZWwpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IENsYXNzTGlzdCBmb3IgYGVsYC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBDbGFzc0xpc3QoZWwpIHtcbiAgaWYgKCFlbCB8fCAhZWwubm9kZVR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgRE9NIGVsZW1lbnQgcmVmZXJlbmNlIGlzIHJlcXVpcmVkJyk7XG4gIH1cbiAgdGhpcy5lbCA9IGVsO1xuICB0aGlzLmxpc3QgPSBlbC5jbGFzc0xpc3Q7XG59XG5cbi8qKlxuICogQWRkIGNsYXNzIGBuYW1lYCBpZiBub3QgYWxyZWFkeSBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtDbGFzc0xpc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNsYXNzTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24obmFtZSl7XG4gIC8vIGNsYXNzTGlzdFxuICBpZiAodGhpcy5saXN0KSB7XG4gICAgdGhpcy5saXN0LmFkZChuYW1lKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGZhbGxiYWNrXG4gIHZhciBhcnIgPSB0aGlzLmFycmF5KCk7XG4gIHZhciBpID0gaW5kZXgoYXJyLCBuYW1lKTtcbiAgaWYgKCF+aSkgYXJyLnB1c2gobmFtZSk7XG4gIHRoaXMuZWwuY2xhc3NOYW1lID0gYXJyLmpvaW4oJyAnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyBgbmFtZWAgd2hlbiBwcmVzZW50LCBvclxuICogcGFzcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byByZW1vdmVcbiAqIGFueSB3aGljaCBtYXRjaC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IG5hbWVcbiAqIEByZXR1cm4ge0NsYXNzTGlzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ2xhc3NMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihuYW1lKXtcbiAgLy8gY2xhc3NMaXN0XG4gIGlmICh0aGlzLmxpc3QpIHtcbiAgICB0aGlzLmxpc3QucmVtb3ZlKG5hbWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZmFsbGJhY2tcbiAgdmFyIGFyciA9IHRoaXMuYXJyYXkoKTtcbiAgdmFyIGkgPSBpbmRleChhcnIsIG5hbWUpO1xuICBpZiAofmkpIGFyci5zcGxpY2UoaSwgMSk7XG4gIHRoaXMuZWwuY2xhc3NOYW1lID0gYXJyLmpvaW4oJyAnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogVG9nZ2xlIGNsYXNzIGBuYW1lYCwgY2FuIGZvcmNlIHN0YXRlIHZpYSBgZm9yY2VgLlxuICpcbiAqIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgY2xhc3NMaXN0LCBidXQgZG8gbm90IHN1cHBvcnQgYGZvcmNlYCB5ZXQsXG4gKiB0aGUgbWlzdGFrZSB3aWxsIGJlIGRldGVjdGVkIGFuZCBjb3JyZWN0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZm9yY2VcbiAqIEByZXR1cm4ge0NsYXNzTGlzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ2xhc3NMaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbihuYW1lLCBmb3JjZSl7XG4gIC8vIGNsYXNzTGlzdFxuICBpZiAodGhpcy5saXN0KSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBmb3JjZSkge1xuICAgICAgaWYgKGZvcmNlICE9PSB0aGlzLmxpc3QudG9nZ2xlKG5hbWUsIGZvcmNlKSkge1xuICAgICAgICB0aGlzLmxpc3QudG9nZ2xlKG5hbWUpOyAvLyB0b2dnbGUgYWdhaW4gdG8gY29ycmVjdFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxpc3QudG9nZ2xlKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGZhbGxiYWNrXG4gIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZm9yY2UpIHtcbiAgICBpZiAoIWZvcmNlKSB7XG4gICAgICB0aGlzLnJlbW92ZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGQobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmhhcyhuYW1lKSkge1xuICAgICAgdGhpcy5yZW1vdmUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkKG5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgb2YgY2xhc3Nlcy5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ2xhc3NMaXN0LnByb3RvdHlwZS5hcnJheSA9IGZ1bmN0aW9uKCl7XG4gIHZhciBjbGFzc05hbWUgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcbiAgdmFyIHN0ciA9IGNsYXNzTmFtZS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gIHZhciBhcnIgPSBzdHIuc3BsaXQocmUpO1xuICBpZiAoJycgPT09IGFyclswXSkgYXJyLnNoaWZ0KCk7XG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGNsYXNzIGBuYW1lYCBpcyBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtDbGFzc0xpc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNsYXNzTGlzdC5wcm90b3R5cGUuaGFzID1cbkNsYXNzTGlzdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHRoaXMubGlzdCA/IHRoaXMubGlzdC5jb250YWlucyhuYW1lKSA6ICEhIH5pbmRleCh0aGlzLmFycmF5KCksIG5hbWUpO1xufTtcbiIsInZhciBiaW5kID0gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnYXR0YWNoRXZlbnQnLFxuICAgIHVuYmluZCA9IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ2RldGFjaEV2ZW50JyxcbiAgICBwcmVmaXggPSBiaW5kICE9PSAnYWRkRXZlbnRMaXN0ZW5lcicgPyAnb24nIDogJycsXG4gICAgdG9BcnJheSA9IHJlcXVpcmUoJy4vdG8tYXJyYXknKTtcblxuLyoqXG4gKiBCaW5kIGBlbGAgZXZlbnQgYHR5cGVgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCwgTm9kZUxpc3QsIEhUTUxDb2xsZWN0aW9uIG9yIEFycmF5XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gY2FwdHVyZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmJpbmQgPSBmdW5jdGlvbihlbCwgdHlwZSwgZm4sIGNhcHR1cmUpe1xuICBlbCA9IHRvQXJyYXkoZWwpO1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbC5sZW5ndGg7IGkrKyApIHtcbiAgICBlbFtpXVtiaW5kXShwcmVmaXggKyB0eXBlLCBmbiwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVW5iaW5kIGBlbGAgZXZlbnQgYHR5cGVgJ3MgY2FsbGJhY2sgYGZuYC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsLCBOb2RlTGlzdCwgSFRNTENvbGxlY3Rpb24gb3IgQXJyYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtCb29sZWFufSBjYXB0dXJlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudW5iaW5kID0gZnVuY3Rpb24oZWwsIHR5cGUsIGZuLCBjYXB0dXJlKXtcbiAgZWwgPSB0b0FycmF5KGVsKTtcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgZWwubGVuZ3RoOyBpKysgKSB7XG4gICAgZWxbaV1bdW5iaW5kXShwcmVmaXggKyB0eXBlLCBmbiwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gIH1cbn07XG4iLCIvKlxuICogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vc2VnbWVudGlvL2V4dGVuZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kIChvYmplY3QpIHtcbiAgICAvLyBUYWtlcyBhbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIGV4dGVuZGVycy5cbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICAvLyBGb3IgZWFjaCBleHRlbmRlciwgY29weSB0aGVpciBwcm9wZXJ0aWVzIG9uIG91ciBvYmplY3QuXG4gICAgZm9yICh2YXIgaSA9IDAsIHNvdXJjZTsgc291cmNlID0gYXJnc1tpXTsgaSsrKSB7XG4gICAgICAgIGlmICghc291cmNlKSBjb250aW51ZTtcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBvYmplY3RbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0ZXh0LCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgLy8gQXByb3hpbWF0ZWx5IHdoZXJlIGluIHRoZSB0ZXh0IGlzIHRoZSBwYXR0ZXJuIGV4cGVjdGVkIHRvIGJlIGZvdW5kP1xuICAgIHZhciBNYXRjaF9Mb2NhdGlvbiA9IG9wdGlvbnMubG9jYXRpb24gfHwgMDtcblxuICAgIC8vRGV0ZXJtaW5lcyBob3cgY2xvc2UgdGhlIG1hdGNoIG11c3QgYmUgdG8gdGhlIGZ1enp5IGxvY2F0aW9uIChzcGVjaWZpZWQgYWJvdmUpLiBBbiBleGFjdCBsZXR0ZXIgbWF0Y2ggd2hpY2ggaXMgJ2Rpc3RhbmNlJyBjaGFyYWN0ZXJzIGF3YXkgZnJvbSB0aGUgZnV6enkgbG9jYXRpb24gd291bGQgc2NvcmUgYXMgYSBjb21wbGV0ZSBtaXNtYXRjaC4gQSBkaXN0YW5jZSBvZiAnMCcgcmVxdWlyZXMgdGhlIG1hdGNoIGJlIGF0IHRoZSBleGFjdCBsb2NhdGlvbiBzcGVjaWZpZWQsIGEgdGhyZXNob2xkIG9mICcxMDAwJyB3b3VsZCByZXF1aXJlIGEgcGVyZmVjdCBtYXRjaCB0byBiZSB3aXRoaW4gODAwIGNoYXJhY3RlcnMgb2YgdGhlIGZ1enp5IGxvY2F0aW9uIHRvIGJlIGZvdW5kIHVzaW5nIGEgMC44IHRocmVzaG9sZC5cbiAgICB2YXIgTWF0Y2hfRGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlIHx8IDEwMDtcblxuICAgIC8vIEF0IHdoYXQgcG9pbnQgZG9lcyB0aGUgbWF0Y2ggYWxnb3JpdGhtIGdpdmUgdXAuIEEgdGhyZXNob2xkIG9mICcwLjAnIHJlcXVpcmVzIGEgcGVyZmVjdCBtYXRjaCAob2YgYm90aCBsZXR0ZXJzIGFuZCBsb2NhdGlvbiksIGEgdGhyZXNob2xkIG9mICcxLjAnIHdvdWxkIG1hdGNoIGFueXRoaW5nLlxuICAgIHZhciBNYXRjaF9UaHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZCB8fCAwLjQ7XG5cbiAgICBpZiAocGF0dGVybiA9PT0gdGV4dCkgcmV0dXJuIHRydWU7IC8vIEV4YWN0IG1hdGNoXG4gICAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gMzIpIHJldHVybiBmYWxzZTsgLy8gVGhpcyBhbGdvcml0aG0gY2Fubm90IGJlIHVzZWRcblxuICAgIC8vIFNldCBzdGFydGluZyBsb2NhdGlvbiBhdCBiZWdpbm5pbmcgdGV4dCBhbmQgaW5pdGlhbGlzZSB0aGUgYWxwaGFiZXQuXG4gICAgdmFyIGxvYyA9IE1hdGNoX0xvY2F0aW9uLFxuICAgICAgICBzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHEgPSB7fSxcbiAgICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHFbcGF0dGVybi5jaGFyQXQoaSldID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBxW3BhdHRlcm4uY2hhckF0KGkpXSB8PSAxIDw8IChwYXR0ZXJuLmxlbmd0aCAtIGkgLSAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHE7XG4gICAgICAgIH0oKSk7XG5cbiAgICAvLyBDb21wdXRlIGFuZCByZXR1cm4gdGhlIHNjb3JlIGZvciBhIG1hdGNoIHdpdGggZSBlcnJvcnMgYW5kIHggbG9jYXRpb24uXG4gICAgLy8gQWNjZXNzZXMgbG9jIGFuZCBwYXR0ZXJuIHRocm91Z2ggYmVpbmcgYSBjbG9zdXJlLlxuXG4gICAgZnVuY3Rpb24gbWF0Y2hfYml0YXBTY29yZV8oZSwgeCkge1xuICAgICAgICB2YXIgYWNjdXJhY3kgPSBlIC8gcGF0dGVybi5sZW5ndGgsXG4gICAgICAgICAgICBwcm94aW1pdHkgPSBNYXRoLmFicyhsb2MgLSB4KTtcblxuICAgICAgICBpZiAoIU1hdGNoX0Rpc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBEb2RnZSBkaXZpZGUgYnkgemVybyBlcnJvci5cbiAgICAgICAgICAgIHJldHVybiBwcm94aW1pdHkgPyAxLjAgOiBhY2N1cmFjeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjdXJhY3kgKyAocHJveGltaXR5IC8gTWF0Y2hfRGlzdGFuY2UpO1xuICAgIH1cblxuICAgIHZhciBzY29yZV90aHJlc2hvbGQgPSBNYXRjaF9UaHJlc2hvbGQsIC8vIEhpZ2hlc3Qgc2NvcmUgYmV5b25kIHdoaWNoIHdlIGdpdmUgdXAuXG4gICAgICAgIGJlc3RfbG9jID0gdGV4dC5pbmRleE9mKHBhdHRlcm4sIGxvYyk7IC8vIElzIHRoZXJlIGEgbmVhcmJ5IGV4YWN0IG1hdGNoPyAoc3BlZWR1cClcblxuICAgIGlmIChiZXN0X2xvYyAhPSAtMSkge1xuICAgICAgICBzY29yZV90aHJlc2hvbGQgPSBNYXRoLm1pbihtYXRjaF9iaXRhcFNjb3JlXygwLCBiZXN0X2xvYyksIHNjb3JlX3RocmVzaG9sZCk7XG4gICAgICAgIC8vIFdoYXQgYWJvdXQgaW4gdGhlIG90aGVyIGRpcmVjdGlvbj8gKHNwZWVkdXApXG4gICAgICAgIGJlc3RfbG9jID0gdGV4dC5sYXN0SW5kZXhPZihwYXR0ZXJuLCBsb2MgKyBwYXR0ZXJuLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKGJlc3RfbG9jICE9IC0xKSB7XG4gICAgICAgICAgICBzY29yZV90aHJlc2hvbGQgPSBNYXRoLm1pbihtYXRjaF9iaXRhcFNjb3JlXygwLCBiZXN0X2xvYyksIHNjb3JlX3RocmVzaG9sZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXNlIHRoZSBiaXQgYXJyYXlzLlxuICAgIHZhciBtYXRjaG1hc2sgPSAxIDw8IChwYXR0ZXJuLmxlbmd0aCAtIDEpO1xuICAgIGJlc3RfbG9jID0gLTE7XG5cbiAgICB2YXIgYmluX21pbiwgYmluX21pZDtcbiAgICB2YXIgYmluX21heCA9IHBhdHRlcm4ubGVuZ3RoICsgdGV4dC5sZW5ndGg7XG4gICAgdmFyIGxhc3RfcmQ7XG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBwYXR0ZXJuLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgIC8vIFNjYW4gZm9yIHRoZSBiZXN0IG1hdGNoOyBlYWNoIGl0ZXJhdGlvbiBhbGxvd3MgZm9yIG9uZSBtb3JlIGVycm9yLlxuICAgICAgICAvLyBSdW4gYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSBob3cgZmFyIGZyb20gJ2xvYycgd2UgY2FuIHN0cmF5IGF0IHRoaXNcbiAgICAgICAgLy8gZXJyb3IgbGV2ZWwuXG4gICAgICAgIGJpbl9taW4gPSAwO1xuICAgICAgICBiaW5fbWlkID0gYmluX21heDtcbiAgICAgICAgd2hpbGUgKGJpbl9taW4gPCBiaW5fbWlkKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hfYml0YXBTY29yZV8oZCwgbG9jICsgYmluX21pZCkgPD0gc2NvcmVfdGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgYmluX21pbiA9IGJpbl9taWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJpbl9tYXggPSBiaW5fbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmluX21pZCA9IE1hdGguZmxvb3IoKGJpbl9tYXggLSBiaW5fbWluKSAvIDIgKyBiaW5fbWluKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2UgdGhlIHJlc3VsdCBmcm9tIHRoaXMgaXRlcmF0aW9uIGFzIHRoZSBtYXhpbXVtIGZvciB0aGUgbmV4dC5cbiAgICAgICAgYmluX21heCA9IGJpbl9taWQ7XG4gICAgICAgIHZhciBzdGFydCA9IE1hdGgubWF4KDEsIGxvYyAtIGJpbl9taWQgKyAxKTtcbiAgICAgICAgdmFyIGZpbmlzaCA9IE1hdGgubWluKGxvYyArIGJpbl9taWQsIHRleHQubGVuZ3RoKSArIHBhdHRlcm4ubGVuZ3RoO1xuXG4gICAgICAgIHZhciByZCA9IEFycmF5KGZpbmlzaCArIDIpO1xuICAgICAgICByZFtmaW5pc2ggKyAxXSA9ICgxIDw8IGQpIC0gMTtcbiAgICAgICAgZm9yICh2YXIgaiA9IGZpbmlzaDsgaiA+PSBzdGFydDsgai0tKSB7XG4gICAgICAgICAgICAvLyBUaGUgYWxwaGFiZXQgKHMpIGlzIGEgc3BhcnNlIGhhc2gsIHNvIHRoZSBmb2xsb3dpbmcgbGluZSBnZW5lcmF0ZXNcbiAgICAgICAgICAgIC8vIHdhcm5pbmdzLlxuICAgICAgICAgICAgdmFyIGNoYXJNYXRjaCA9IHNbdGV4dC5jaGFyQXQoaiAtIDEpXTtcbiAgICAgICAgICAgIGlmIChkID09PSAwKSB7ICAgIC8vIEZpcnN0IHBhc3M6IGV4YWN0IG1hdGNoLlxuICAgICAgICAgICAgICAgIHJkW2pdID0gKChyZFtqICsgMV0gPDwgMSkgfCAxKSAmIGNoYXJNYXRjaDtcbiAgICAgICAgICAgIH0gZWxzZSB7ICAgIC8vIFN1YnNlcXVlbnQgcGFzc2VzOiBmdXp6eSBtYXRjaC5cbiAgICAgICAgICAgICAgICByZFtqXSA9ICgoKHJkW2ogKyAxXSA8PCAxKSB8IDEpICYgY2hhck1hdGNoKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoKGxhc3RfcmRbaiArIDFdIHwgbGFzdF9yZFtqXSkgPDwgMSkgfCAxKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfcmRbaiArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJkW2pdICYgbWF0Y2htYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3JlID0gbWF0Y2hfYml0YXBTY29yZV8oZCwgaiAtIDEpO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWF0Y2ggd2lsbCBhbG1vc3QgY2VydGFpbmx5IGJlIGJldHRlciB0aGFuIGFueSBleGlzdGluZyBtYXRjaC5cbiAgICAgICAgICAgICAgICAvLyBCdXQgY2hlY2sgYW55d2F5LlxuICAgICAgICAgICAgICAgIGlmIChzY29yZSA8PSBzY29yZV90aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9sZCB5b3Ugc28uXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlX3RocmVzaG9sZCA9IHNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0X2xvYyA9IGogLSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmVzdF9sb2MgPiBsb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gcGFzc2luZyBsb2MsIGRvbid0IGV4Y2VlZCBvdXIgY3VycmVudCBkaXN0YW5jZSBmcm9tIGxvYy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gTWF0aC5tYXgoMSwgMiAqIGxvYyAtIGJlc3RfbG9jKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgcGFzc2VkIGxvYywgZG93bmhpbGwgZnJvbSBoZXJlIG9uIGluLlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gaG9wZSBmb3IgYSAoYmV0dGVyKSBtYXRjaCBhdCBncmVhdGVyIGVycm9yIGxldmVscy5cbiAgICAgICAgaWYgKG1hdGNoX2JpdGFwU2NvcmVfKGQgKyAxLCBsb2MpID4gc2NvcmVfdGhyZXNob2xkKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBsYXN0X3JkID0gcmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIChiZXN0X2xvYyA8IDApID8gZmFsc2UgOiB0cnVlO1xufTtcbiIsIi8qKlxuICogQSBjcm9zcy1icm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGdldEF0dHJpYnV0ZS5cbiAqIFNvdXJjZSBmb3VuZCBoZXJlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNzU1MzQzLzM2MTMzNyB3cml0dGVuIGJ5IFZpdmluIFBhbGlhdGhcbiAqXG4gKiBSZXR1cm4gdGhlIHZhbHVlIGZvciBgYXR0cmAgYXQgYGVsZW1lbnRgLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZWwsIGF0dHIpIHtcbiAgdmFyIHJlc3VsdCA9IChlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKGF0dHIpKSB8fCBudWxsO1xuICBpZiggIXJlc3VsdCApIHtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRyaWJ1dGVzO1xuICAgIHZhciBsZW5ndGggPSBhdHRycy5sZW5ndGg7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXR0cltpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmKGF0dHJbaV0ubm9kZU5hbWUgPT09IGF0dHIpIHtcbiAgICAgICAgICByZXN1bHQgPSBhdHRyW2ldLm5vZGVWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qKlxuICogQSBjcm9zcy1icm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGdldEVsZW1lbnRzQnlDbGFzcy5cbiAqIEhlYXZpbHkgYmFzZWQgb24gRHVzdGluIERpYXoncyBmdW5jdGlvbjogaHR0cDovL2R1c3RpbmRpYXouY29tL2dldGVsZW1lbnRzYnljbGFzcy5cbiAqXG4gKiBGaW5kIGFsbCBlbGVtZW50cyB3aXRoIGNsYXNzIGBjbGFzc05hbWVgIGluc2lkZSBgY29udGFpbmVyYC5cbiAqIFVzZSBgc2luZ2xlID0gdHJ1ZWAgdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2UgaW4gb2xkZXIgYnJvd3NlcnNcbiAqIHdoZW4gb25seSBvbmUgZWxlbWVudCBpcyBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250YWluZXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2luZ2xlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnZhciBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gZnVuY3Rpb24oY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSkge1xuICBpZiAoc2luZ2xlKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSlbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG4gIH1cbn07XG5cbnZhciBxdWVyeVNlbGVjdG9yID0gZnVuY3Rpb24oY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSkge1xuICBjbGFzc05hbWUgPSAnLicgKyBjbGFzc05hbWU7XG4gIGlmIChzaW5nbGUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3NOYW1lKTtcbiAgfVxufTtcblxudmFyIHBvbHlmaWxsID0gZnVuY3Rpb24oY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSkge1xuICB2YXIgY2xhc3NFbGVtZW50cyA9IFtdLFxuICAgIHRhZyA9ICcqJztcblxuICB2YXIgZWxzID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7XG4gIHZhciBlbHNMZW4gPSBlbHMubGVuZ3RoO1xuICB2YXIgcGF0dGVybiA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIitjbGFzc05hbWUrXCIoXFxcXHN8JClcIik7XG4gIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IGVsc0xlbjsgaSsrKSB7XG4gICAgaWYgKCBwYXR0ZXJuLnRlc3QoZWxzW2ldLmNsYXNzTmFtZSkgKSB7XG4gICAgICBpZiAoc2luZ2xlKSB7XG4gICAgICAgIHJldHVybiBlbHNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGFzc0VsZW1lbnRzW2pdID0gZWxzW2ldO1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGFzc0VsZW1lbnRzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb250YWluZXIsIGNsYXNzTmFtZSwgc2luZ2xlLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKChvcHRpb25zLnRlc3QgJiYgb3B0aW9ucy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB8fCAoIW9wdGlvbnMudGVzdCAmJiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuIGdldEVsZW1lbnRzQnlDbGFzc05hbWUoY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSk7XG4gICAgfSBlbHNlIGlmICgob3B0aW9ucy50ZXN0ICYmIG9wdGlvbnMucXVlcnlTZWxlY3RvcikgfHwgKCFvcHRpb25zLnRlc3QgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcikpIHtcbiAgICAgIHJldHVybiBxdWVyeVNlbGVjdG9yKGNvbnRhaW5lciwgY2xhc3NOYW1lLCBzaW5nbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcG9seWZpbGwoY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSk7XG4gICAgfVxuICB9O1xufSkoKTtcbiIsInZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07XG4iLCIvKipcbiAqIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL3RpbW94bGV5L3RvLWFycmF5XG4gKlxuICogQ29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCBpbnRvIGFuIGBBcnJheWAuXG4gKiBJZiBgY29sbGVjdGlvbmAgaXMgYWxyZWFkeSBhbiBgQXJyYXlgLCB0aGVuIHdpbGwgcmV0dXJuIGEgY2xvbmUgb2YgYGNvbGxlY3Rpb25gLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkgfCBNaXhlZH0gY29sbGVjdGlvbiBBbiBgQXJyYXlgIG9yIGFycmF5LWxpa2Ugb2JqZWN0IHRvIGNvbnZlcnQgZS5nLiBgYXJndW1lbnRzYCBvciBgTm9kZUxpc3RgXG4gKiBAcmV0dXJuIHtBcnJheX0gTmFpdmUgY29udmVyc2lvbiBvZiBgY29sbGVjdGlvbmAgdG8gYSBuZXcgYEFycmF5YC5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0b0FycmF5KGNvbGxlY3Rpb24pIHtcbiAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uID09PSAndW5kZWZpbmVkJykgcmV0dXJuIFtdO1xuICBpZiAoY29sbGVjdGlvbiA9PT0gbnVsbCkgcmV0dXJuIFtudWxsXTtcbiAgaWYgKGNvbGxlY3Rpb24gPT09IHdpbmRvdykgcmV0dXJuIFt3aW5kb3ddO1xuICBpZiAodHlwZW9mIGNvbGxlY3Rpb24gPT09ICdzdHJpbmcnKSByZXR1cm4gW2NvbGxlY3Rpb25dO1xuICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkgcmV0dXJuIGNvbGxlY3Rpb247XG4gIGlmICh0eXBlb2YgY29sbGVjdGlvbi5sZW5ndGggIT0gJ251bWJlcicpIHJldHVybiBbY29sbGVjdGlvbl07XG4gIGlmICh0eXBlb2YgY29sbGVjdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJiBjb2xsZWN0aW9uIGluc3RhbmNlb2YgRnVuY3Rpb24pIHJldHVybiBbY29sbGVjdGlvbl07XG5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbGxlY3Rpb24sIGkpIHx8IGkgaW4gY29sbGVjdGlvbikge1xuICAgICAgYXJyLnB1c2goY29sbGVjdGlvbltpXSk7XG4gICAgfVxuICB9XG4gIGlmICghYXJyLmxlbmd0aCkgcmV0dXJuIFtdO1xuICByZXR1cm4gYXJyO1xufTtcblxuZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHMpIHtcbiAgcyA9IChzID09PSB1bmRlZmluZWQpID8gXCJcIiA6IHM7XG4gIHMgPSAocyA9PT0gbnVsbCkgPyBcIlwiIDogcztcbiAgcyA9IHMudG9TdHJpbmcoKTtcbiAgcmV0dXJuIHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQ7XG52YXIgYWxwaGFiZXRJbmRleE1hcDtcbnZhciBhbHBoYWJldEluZGV4TWFwTGVuZ3RoID0gMDtcblxuZnVuY3Rpb24gaXNOdW1iZXJDb2RlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nztcbn1cblxuZnVuY3Rpb24gbmF0dXJhbENvbXBhcmUoYSwgYikge1xuICB2YXIgbGVuZ3RoQSA9IChhICs9ICcnKS5sZW5ndGg7XG4gIHZhciBsZW5ndGhCID0gKGIgKz0gJycpLmxlbmd0aDtcbiAgdmFyIGFJbmRleCA9IDA7XG4gIHZhciBiSW5kZXggPSAwO1xuXG4gIHdoaWxlIChhSW5kZXggPCBsZW5ndGhBICYmIGJJbmRleCA8IGxlbmd0aEIpIHtcbiAgICB2YXIgY2hhckNvZGVBID0gYS5jaGFyQ29kZUF0KGFJbmRleCk7XG4gICAgdmFyIGNoYXJDb2RlQiA9IGIuY2hhckNvZGVBdChiSW5kZXgpO1xuXG4gICAgaWYgKGlzTnVtYmVyQ29kZShjaGFyQ29kZUEpKSB7XG4gICAgICBpZiAoIWlzTnVtYmVyQ29kZShjaGFyQ29kZUIpKSB7XG4gICAgICAgIHJldHVybiBjaGFyQ29kZUEgLSBjaGFyQ29kZUI7XG4gICAgICB9XG5cbiAgICAgIHZhciBudW1TdGFydEEgPSBhSW5kZXg7XG4gICAgICB2YXIgbnVtU3RhcnRCID0gYkluZGV4O1xuXG4gICAgICB3aGlsZSAoY2hhckNvZGVBID09PSA0OCAmJiArK251bVN0YXJ0QSA8IGxlbmd0aEEpIHtcbiAgICAgICAgY2hhckNvZGVBID0gYS5jaGFyQ29kZUF0KG51bVN0YXJ0QSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoY2hhckNvZGVCID09PSA0OCAmJiArK251bVN0YXJ0QiA8IGxlbmd0aEIpIHtcbiAgICAgICAgY2hhckNvZGVCID0gYi5jaGFyQ29kZUF0KG51bVN0YXJ0Qik7XG4gICAgICB9XG5cbiAgICAgIHZhciBudW1FbmRBID0gbnVtU3RhcnRBO1xuICAgICAgdmFyIG51bUVuZEIgPSBudW1TdGFydEI7XG5cbiAgICAgIHdoaWxlIChudW1FbmRBIDwgbGVuZ3RoQSAmJiBpc051bWJlckNvZGUoYS5jaGFyQ29kZUF0KG51bUVuZEEpKSkge1xuICAgICAgICArK251bUVuZEE7XG4gICAgICB9XG4gICAgICB3aGlsZSAobnVtRW5kQiA8IGxlbmd0aEIgJiYgaXNOdW1iZXJDb2RlKGIuY2hhckNvZGVBdChudW1FbmRCKSkpIHtcbiAgICAgICAgKytudW1FbmRCO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlmZmVyZW5jZSA9IG51bUVuZEEgLSBudW1TdGFydEEgLSBudW1FbmRCICsgbnVtU3RhcnRCOyAvLyBudW1BIGxlbmd0aCAtIG51bUIgbGVuZ3RoXG4gICAgICBpZiAoZGlmZmVyZW5jZSkge1xuICAgICAgICByZXR1cm4gZGlmZmVyZW5jZTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKG51bVN0YXJ0QSA8IG51bUVuZEEpIHtcbiAgICAgICAgZGlmZmVyZW5jZSA9IGEuY2hhckNvZGVBdChudW1TdGFydEErKykgLSBiLmNoYXJDb2RlQXQobnVtU3RhcnRCKyspO1xuICAgICAgICBpZiAoZGlmZmVyZW5jZSkge1xuICAgICAgICAgIHJldHVybiBkaWZmZXJlbmNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFJbmRleCA9IG51bUVuZEE7XG4gICAgICBiSW5kZXggPSBudW1FbmRCO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJDb2RlQSAhPT0gY2hhckNvZGVCKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNoYXJDb2RlQSA8IGFscGhhYmV0SW5kZXhNYXBMZW5ndGggJiZcbiAgICAgICAgY2hhckNvZGVCIDwgYWxwaGFiZXRJbmRleE1hcExlbmd0aCAmJlxuICAgICAgICBhbHBoYWJldEluZGV4TWFwW2NoYXJDb2RlQV0gIT09IC0xICYmXG4gICAgICAgIGFscGhhYmV0SW5kZXhNYXBbY2hhckNvZGVCXSAhPT0gLTFcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gYWxwaGFiZXRJbmRleE1hcFtjaGFyQ29kZUFdIC0gYWxwaGFiZXRJbmRleE1hcFtjaGFyQ29kZUJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhckNvZGVBIC0gY2hhckNvZGVCO1xuICAgIH1cblxuICAgICsrYUluZGV4O1xuICAgICsrYkluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGxlbmd0aEEgLSBsZW5ndGhCO1xufVxuXG5uYXR1cmFsQ29tcGFyZS5jYXNlSW5zZW5zaXRpdmUgPSBuYXR1cmFsQ29tcGFyZS5pID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gbmF0dXJhbENvbXBhcmUoKCcnICsgYSkudG9Mb3dlckNhc2UoKSwgKCcnICsgYikudG9Mb3dlckNhc2UoKSk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhuYXR1cmFsQ29tcGFyZSwge1xuICBhbHBoYWJldDoge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWxwaGFiZXQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBhbHBoYWJldCA9IHZhbHVlO1xuICAgICAgYWxwaGFiZXRJbmRleE1hcCA9IFtdO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgaWYgKGFscGhhYmV0KSB7XG4gICAgICAgIGZvciAoOyBpIDwgYWxwaGFiZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhbHBoYWJldEluZGV4TWFwW2FscGhhYmV0LmNoYXJDb2RlQXQoaSldID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWxwaGFiZXRJbmRleE1hcExlbmd0aCA9IGFscGhhYmV0SW5kZXhNYXAubGVuZ3RoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFscGhhYmV0SW5kZXhNYXBMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYWxwaGFiZXRJbmRleE1hcFtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWxwaGFiZXRJbmRleE1hcFtpXSA9IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdHVyYWxDb21wYXJlO1xuIiwiaW1wb3J0IHUgZnJvbSAnLi91dGlsaXR5LmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCdcblxuICBsZXQgYXBpID0ge31cbiAgbGV0IHNldHRpbmdzXG4gIGxldCBkZWZhdWx0cyA9IHtcbiAgICB0cmlnZ2VyOiAnW2RhdGEtZGlzbWlzc10nLFxuICAgIHRhcmdldDogJ1tkYXRhLWRpc21pc3NpYmxlXScsXG4gICAgY2xhc3NUb2dnbGU6ICdkaXNtaXNzJ1xuICB9XG5cbiAgbGV0IHJ1biA9ICgpID0+IHtcbiAgICBsZXQgdHJpZ2dlciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KHNldHRpbmdzLnRyaWdnZXIpXG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIGxldCB0YXJnZXQgPSB0cmlnZ2VyLmNsb3Nlc3Qoc2V0dGluZ3MudGFyZ2V0KVxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB1LnRvZ2dsZUNsYXNzKHRhcmdldCwgc2V0dGluZ3MuY2xhc3NUb2dnbGUpXG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuICB9XG5cbiAgYXBpLmluaXQgPSAob3B0aW9ucykgPT4ge1xuICAgIGFwaS5kZXN0cm95KClcbiAgICBzZXR0aW5ncyA9IHUuZXh0ZW5kKCBkZWZhdWx0cywgb3B0aW9ucyB8fCB7fSApXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBydW4sIGZhbHNlKVxuICB9XG5cbiAgYXBpLmRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgc2V0dGluZ3MgPSBudWxsXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBydW4sIGZhbHNlKVxuICB9XG5cbiAgYXBpLmluaXQoKVxuXG4gIHJldHVybiBhcGlcbn1cbiIsImltcG9ydCB1IGZyb20gJy4vdXRpbGl0eS5qcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnXG5cbiAgbGV0IGFwaSA9IHt9XG4gIGxldCBzZXR0aW5nc1xuICBsZXQgZGVmYXVsdHMgPSB7XG4gICAgY2xhc3NUcmlnZ2VyOiAnbW9kYWxfX3RyaWdnZXInLFxuICAgIGNsYXNzTW9kYWw6ICdtb2RhbCcsXG4gICAgY2xhc3NEaWFsb2c6ICdtb2RhbF9fZGlhbG9nJyxcbiAgICBjbGFzc0FjdGl2ZTogJ2lzLWFjdGl2ZScsXG4gICAgZm9jdXM6ICdbZGF0YS1mb2N1c10nXG4gIH1cblxuICBsZXQgbWVtb3J5VHJpZ2dlclxuICBsZXQgbWVtb3J5VGFyZ2V0XG5cbiAgbGV0IG9wZW4gPSAodGFyZ2V0KSA9PiB7XG4gICAgdS5hZGRDbGFzcyh0YXJnZXQsIHNldHRpbmdzLmNsYXNzQWN0aXZlKVxuICAgIGxldCBmb2N1cyA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKHNldHRpbmdzLmZvY3VzKVxuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gX2xpc3RlbmVyKCkge1xuICAgICAgaWYgKGZvY3VzKSB7XG4gICAgICAgIGZvY3VzLmZvY3VzKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5mb2N1cygpXG4gICAgICB9XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBfbGlzdGVuZXIsIHRydWUpXG4gICAgfSwgdHJ1ZSk7XG4gIH1cblxuICBsZXQgY2xvc2UgPSAoKSA9PiB7XG4gICAgbGV0IG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgc2V0dGluZ3MuY2xhc3NNb2RhbClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGFscy5sZW5ndGg7ICsraSkge1xuICAgICAgdS5yZW1vdmVDbGFzcyhtb2RhbHNbaV0sIHNldHRpbmdzLmNsYXNzQWN0aXZlKVxuICAgIH1cbiAgICBpZiAobWVtb3J5VHJpZ2dlciAmJiBtZW1vcnlUYXJnZXQpIHtcbiAgICAgIG1lbW9yeVRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gX2xpc3RlbmVyKCkge1xuICAgICAgICBpZiAobWVtb3J5VHJpZ2dlcikge1xuICAgICAgICAgIG1lbW9yeVRyaWdnZXIuZm9jdXMoKVxuICAgICAgICB9XG4gICAgICAgIG1lbW9yeVRhcmdldCA9IG51bGxcbiAgICAgICAgbWVtb3J5VHJpZ2dlciA9IG51bGxcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgX2xpc3RlbmVyLCB0cnVlKVxuICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHJ1biA9ICgpID0+IHtcbiAgICBsZXQgdHJpZ2dlciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuJyArIHNldHRpbmdzLmNsYXNzVHJpZ2dlcilcbiAgICBsZXQgbW9kYWwgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy5jbGFzc01vZGFsKVxuICAgIGxldCBkaWFsb2cgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy5jbGFzc0RpYWxvZylcbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgY2xvc2UoKVxuICAgICAgbGV0IGRhdGFNb2RhbCA9IHRyaWdnZXIuZGF0YXNldC5tb2RhbFxuICAgICAgaWYgKGRhdGFNb2RhbCkge1xuICAgICAgICBtZW1vcnlUYXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhTW9kYWwpXG4gICAgICAgIG1lbW9yeVRyaWdnZXIgPSB0cmlnZ2VyXG4gICAgICAgIG9wZW4obWVtb3J5VGFyZ2V0KVxuICAgICAgfVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH0gZWxzZSBpZiAobW9kYWwgJiYgIWRpYWxvZykge1xuICAgICAgY2xvc2UoKVxuICAgIH1cbiAgfVxuXG4gIGFwaS5vcGVuID0gKHRhcmdldCkgPT4ge1xuICAgIG9wZW4oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0KSlcbiAgfVxuXG4gIGFwaS5jbG9zZSA9ICgpID0+IHtcbiAgICBjbG9zZSgpXG4gIH1cblxuICBhcGkuaW5pdCA9IChvcHRpb25zKSA9PiB7XG4gICAgYXBpLmRlc3Ryb3koKVxuICAgIHNldHRpbmdzID0gdS5leHRlbmQoIGRlZmF1bHRzLCBvcHRpb25zIHx8IHt9IClcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJ1biwgZmFsc2UpXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBydW4sIGZhbHNlKVxuICB9XG5cbiAgYXBpLmRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgc2V0dGluZ3MgPSBudWxsXG4gICAgbWVtb3J5VGFyZ2V0ID0gbnVsbFxuICAgIG1lbW9yeVRyaWdnZXIgPSBudWxsXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBydW4sIGZhbHNlKVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgcnVuLCBmYWxzZSlcbiAgfVxuXG4gIGFwaS5pbml0KClcblxuICByZXR1cm4gYXBpXG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhbiBlbGVtZW50IGhhcyBhIGNsYXNzIG9yIG5vdFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IEVsZW1lbnQgdG8gY2hlY2sgY2xhc3MoZXMpIG9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB8fCB7QXJyYXl9IENsYXNzKGVzKSB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGNsYXNzIGV4aXN0cyBvbiBlbGVtZW50LCBvdGhlcndpc2UgZmFsc2VcbiAgICovXG4gIHN0YXRpYyBoYXNDbGFzcyggZWwsIGMgKSB7XG5cbiAgICBjID0gdGhpcy50b0FycmF5KGMpXG5cbiAgICByZXR1cm4gYy5ldmVyeSggZnVuY3Rpb24gKCBjICkge1xuICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGNsYXNzIG9yIGNsYXNzZXMgdG8gYW4gZWxlbWVudFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IEVsZW1lbnQgdG8gYWRkIGNsYXNzKGVzKSBvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gfHwge0FycmF5fSBDbGFzcyhlcykgdG8gYWRkXG4gICAqL1xuICBzdGF0aWMgYWRkQ2xhc3MoIGVsLCBjICkge1xuXG4gICAgYyA9IHRoaXMudG9BcnJheShjKVxuXG4gICAgYy5mb3JFYWNoKCBmdW5jdGlvbiAoIGMgKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCBjIClcbiAgICB9KVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBjbGFzcyBvciBjbGFzc2VzIGZyb20gYW4gZWxlbWVudFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IEVsZW1lbnQgdG8gcmVtb3ZlIGNsYXNzKGVzKSBmcm9tXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB8fCB7QXJyYXl9IENsYXNzKGVzKSB0byByZW1vdmVcbiAgICovXG4gIHN0YXRpYyByZW1vdmVDbGFzcyggZWwsIGMgKSB7XG5cbiAgICBjID0gdGhpcy50b0FycmF5KGMpXG5cbiAgICBjLmZvckVhY2goIGZ1bmN0aW9uICggYyApIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoIGMgKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIGEgY2xhc3Mgb3IgY2xhc3NlcyBvbiBhbiBlbGVtZW50XG4gICAqIEBwYXJhbSB7RWxlbWVudH0gRWxlbWVudCB0byB0b2dnbGUgY2xhc3MoZXMpIG9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB8fCB7QXJyYXl9IENsYXNzKGVzKSB0byB0b2dnbGVcbiAgICovXG4gIHN0YXRpYyB0b2dnbGVDbGFzcyggZWwsIGMgKSB7XG5cbiAgICBjID0gdGhpcy50b0FycmF5KGMpXG5cbiAgICBjLmZvckVhY2goIGZ1bmN0aW9uICggYyApIHtcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoYylcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgdGhlIGNsb3Nlc3QgcGFyZW50IGVsZW1lbnQgYmFzZWQgb24gY2xhc3MuIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gdGhlXG4gICAqIG5hdGl2ZSAuY2xvc2VzdCgpIG1ldGhvZCBpbiB0aGF0IGl0IGRvZXNuJ3QgY2hlY2sgdGhlIGN1cnJlbnQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBFbGVtZW50IHRvIHN0YXJ0IHNlYXJjaCBvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gfHwge0FycmF5fSBDbGFzcyhlcykgdG8gY2hlY2sgZm9yXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9IENsb3Nlc3QgcGFyZW50IGVsZW1lbnRcbiAgICovXG4gIHN0YXRpYyBjbG9zZXN0KCBlbCwgYyApIHtcbiAgICB3aGlsZSAoKGVsID0gZWwucGFyZW50RWxlbWVudCkgJiYgIXRoaXMuaGFzQ2xhc3MoZWwsIGMpKVxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIGFuIGFycmF5LiBJZiBhbiBhcnJheSBpcyBwYXNzZWQsIGl0J3MgcmV0dXJuZWQgYXMgaXMuXG4gICAqIEFueXRoaW5nIGVsc2UgaXMgcmV0dXJuZWQgYXMgZmFsc2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB8fCB7QXJyYXl9IFN0cmluZyB0byBjb252ZXJ0IHRvIGFuIGFycmF5XG4gICAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm4gdGhlIGNvbnZlcnRlZCBhcnJheVxuICAgKi9cbiAgc3RhdGljIHRvQXJyYXkoc3RyaW5nKSB7XG5cbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhcnJheS5wdXNoKHN0cmluZylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc3RyaW5nKSkge1xuICAgICAgYXJyYXkgPSBzdHJpbmdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdHdvIG9yIG1vcmUgb2JqZWN0cy4gUmV0dXJucyBhIG5ldyBvYmplY3QuIFNldCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICogdG8gYHRydWVgIGZvciBhIGRlZXAgb3IgcmVjdXJzaXZlIG1lcmdlLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtPcHRpb25hbF0gSWYgdHJ1ZSwgZG8gYSBkZWVwIChvciByZWN1cnNpdmUpIG1lcmdlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBUaGUgb2JqZWN0cyB0byBtZXJnZSB0b2dldGhlcjsgZWFjaCBvdmVycmlkaW5nIHRoZSBuZXh0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9IE1lcmdlZCB2YWx1ZXMgb2YgZGVmYXVsdHMgYW5kIG9wdGlvbnNcbiAgICovXG4gIHN0YXRpYyBleHRlbmQoKSB7XG5cbiAgICB2YXIgZXh0ZW5kZWQgPSB7fVxuICAgIHZhciBkZWVwID0gZmFsc2VcbiAgICB2YXIgaSA9IDBcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuXG4gICAgaWYgKCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIGFyZ3VtZW50c1swXSApID09PSAnW29iamVjdCBCb29sZWFuXScgKSB7XG4gICAgICBkZWVwID0gYXJndW1lbnRzWzBdXG4gICAgICBpKytcbiAgICB9XG5cbiAgICBsZXQgbWVyZ2UgPSAoIG9iaiApID0+IHtcbiAgICAgIGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcbiAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIG9iaiwgcHJvcCApICkge1xuICAgICAgICAgIGlmICggZGVlcCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqW3Byb3BdKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgKSB7XG4gICAgICAgICAgICBleHRlbmRlZFtwcm9wXSA9IGV4dGVuZCggdHJ1ZSwgZXh0ZW5kZWRbcHJvcF0sIG9ialtwcm9wXSApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuZGVkW3Byb3BdID0gb2JqW3Byb3BdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgICB2YXIgb2JqID0gYXJndW1lbnRzW2ldXG4gICAgICBtZXJnZShvYmopXG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dGVuZGVkXG4gIH1cblxufVxuIl19\n"]}