{"version":3,"sources":["src/js/app.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_utility","_interopRequireDefault","_dismissible","_drawer","_modal","_toggle","_list","obj","__esModule","default","drawer","document","addEventListener","trigger","event","target","hasClass","console","log","open","close","toggle","switchDrawer","switchModal","stateReset","stateSave","getElementById","list","fuzzySearch","searchClass","location","distance","threshold","multiSearch","valueNames","data","listClass","notice_empty","querySelector","notice_empty_text","filter","search","search_clear","on","value","innerHTML","addClass","removeClass","visibleItems","trigger_search_clear","closest","trigger_search_cat","preventDefault","dataset","category","dismissible","list.js","modal","utility","2","addAsync","values","callback","items","valuesToAdd","splice","concat","add","setTimeout","update","3","handlers","filterStart","filterComplete","filterFunction","reset","undefined","filtered","is","il","item","4","events","extend","toString","getByClass","fuzzy","options","searchString","columns","searchArguments","replace","split","k","kl","_item","found","foundArgument","j","jl","_values","searchArgument","hasOwnProperty","text","toLowerCase","bind","listContainer","srcElement","str","./utils/classes","./utils/events","./utils/extend","./utils/fuzzy","./utils/get-by-class","./utils/to-string","5","naturalSort","indexOf","classes","getAttribute","toArray","id","init","self","this","Item","initPagination","start","sortClass","page","matchingItems","searched","searchColumns","updated","utils","parse","templater","sort","pagination","handler","reIndex","toJSON","json","push","added","notCreate","show","remove","valueName","get","matchedItems","size","clear","off","index","matching","hide","./add-async","./filter","./fuzzy-search","./item","./pagination","./parse","./search","./sort","./templater","./utils/get-attribute","./utils/index-of","./utils/to-array","string-natural-compare","6","initValues","element","newValues","name","set","visible","elm","parentNode","7","List","refresh","pagingList","l","pages","Math","ceil","currentPage","innerWindow","left","outerWindow","right","className","number","dotted","addEvent","_left","_right","_innerWindow","currentPageItem","dottedLeft","dottedRight","paginationClass","./index","8","itemElements","parseComplete","itemsToIndex","parent","nodes","childNodes","getChildren","indexAsync","parseAsync","9","searchMethod","prepare","resetList","setSearchString","setOptions","arguments","setColumns","customSearch","args","Array","s","tmpColumn","column","searchStart","searchComplete","10","currentTarget","buttons","getInSensitive","order","getOrder","insensitive","setOrder","sortFunction","customSortFunction","multi","itemA","itemB","alphabet","caseInsensitive","els","btn","predefinedOrder","has","sortStart","sortComplete","11","Templater","itemSource","clearSourceItem","el","setAttribute","attr","getItemSource","cloneNode","exec","tbody","createElement","firstChild","div","source","create","setValue","getValueName","v","newItem","removeAttribute","removeChild","appendChild","hasChildNodes","12","re","Object","prototype","ClassList","nodeType","classList","arr","array","join","force","shift","contains","./index-of","13","window","unbind","removeEventListener","prefix","type","fn","capture","./to-array","14","object","slice","property","15","pattern","Match_Location","Match_Distance","Match_Threshold","loc","q","charAt","match_bitapScore_","x","accuracy","proximity","abs","score_threshold","best_loc","min","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","d","floor","max","finish","rd","charMatch","score","16","result","attributes","nodeName","nodeValue","17","container","single","test","getElementsByClassName","querySelectorAll","classElements","getElementsByTagName","elsLen","RegExp","polyfill","18","19","collection","isArray","Function","20","21","alphabetIndexMap","alphabetIndexMapLength","isNumberCode","naturalCompare","b","lengthA","lengthB","aIndex","bIndex","charCodeA","charCodeAt","charCodeB","numStartA","numStartB","numEndA","numEndB","difference","defineProperties","22","breakpoints","xs","sm","md","lg","xl","23","defineProperty","settings","api","defaults","classToggle","run","destroy","toggleClass","./utility.js","24","drawers","classDrawer","classTrigger","classDialog","classActive","classSwitch","dialog","switch","switchBreakpoint","saveState","transitionDuration","drawerState","initSaveState","initSwitch","localStorage","removeItem","selector","forEach","state","dataDrawer","getItem","JSON","transitionDelay","setItem","stringify","cleanSelector","g","toUpperCase","bp","getBreakpoint","mq","matchMedia","addListener","switchCheck","matches","triggers","25","memoryTrigger","memoryTarget","classModal","focus","escape","_listener","modals","keyCode","dataModal","26","targets","class","toggleTarget","27","_config","_defineProperties","props","descriptor","enumerable","configurable","writable","key","_default","instance","Constructor","TypeError","_classCallCheck","_extend","apply","protoProps","staticProps","_createClass","some","parentElement","extended","deep","merge","prop","config"],"mappings":"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","file":"scripts.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _utility = _interopRequireDefault(require(\"utility\"));\n\nvar _dismissible = _interopRequireDefault(require(\"dismissible\"));\n\nvar _drawer = _interopRequireDefault(require(\"drawer\"));\n\nvar _modal = _interopRequireDefault(require(\"modal\"));\n\nvar _toggle = _interopRequireDefault(require(\"toggle\"));\n\nvar _list = _interopRequireDefault(require(\"list.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar dismissible = new _dismissible[\"default\"]();\nvar drawer = new _drawer[\"default\"]();\nvar modal = new _modal[\"default\"]();\nvar toggle = new _toggle[\"default\"]();\n/**\n * General event trigger for testing\n */\n\ndocument.addEventListener('click', function () {\n  // Get the element that triggered the event\n  var trigger = event.target;\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--open')) {\n    console.log('drawer.open()');\n    drawer.open();\n  }\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--close')) {\n    console.log('drawer.close()');\n    drawer.close();\n  }\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--toggle')) {\n    console.log('drawer.toggle()');\n    drawer.toggle();\n  }\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--toggle-example')) {\n    console.log('drawer.toggle(\"#drawer-example\")');\n    drawer.toggle('#drawer-example');\n  }\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--switch-drawer')) {\n    console.log('drawer.switchDrawer()');\n    drawer.switchDrawer();\n  }\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--switch-modal')) {\n    console.log('drawer.switchModal()');\n    drawer.switchModal();\n  }\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--reset')) {\n    console.log('drawer.stateReset()');\n    drawer.stateReset();\n  }\n\n  if (_utility[\"default\"].hasClass(trigger, 'drawer--save')) {\n    console.log('drawer.stateSave()');\n    drawer.stateSave();\n  }\n});\n/**\n * List.js\n * ---\n * Adds list functionality along with search.\n * list.js docs: http://listjs.com/\n */\n\nif (document.getElementById('listjs')) {\n  // Init our list.js component\n  var list = new _list[\"default\"]('listjs', {\n    fuzzySearch: {\n      searchClass: 'search',\n      location: 0,\n      distance: 100,\n      threshold: 0.4,\n      multiSearch: true\n    },\n    valueNames: ['name', {\n      data: ['category']\n    }],\n    listClass: 'menu'\n  }); // Empty Notice\n  // Displayed when the search returns no results\n\n  var notice_empty = document.querySelector('.notice_empty');\n  var notice_empty_text = notice_empty.querySelector('.search_text'); // Clear search button\n\n  var filter = document.querySelector('.filter');\n  var search = document.querySelector('.filter .search');\n  var search_clear = document.querySelector('.filter .search_clear'); // On search complete callback\n\n  list.on('searchComplete', function () {\n    // Update the search text in empty notice\n    var value = search.value;\n    notice_empty_text.innerHTML = value; // Show clear search button if a value there is something in search\n\n    if (value) {\n      _utility[\"default\"].addClass(filter, 'is-active');\n\n      _utility[\"default\"].addClass(search, 'is-active');\n\n      _utility[\"default\"].removeClass(search_clear, 'd_none');\n    } else {\n      _utility[\"default\"].removeClass(filter, 'is-active');\n\n      _utility[\"default\"].removeClass(search, 'is-active');\n\n      _utility[\"default\"].addClass(search_clear, 'd_none');\n    } // Toggle notice depending on the number of visible items\n\n\n    if (list.visibleItems.length > 0) {\n      _utility[\"default\"].addClass(notice_empty, 'd_none');\n    } else {\n      _utility[\"default\"].removeClass(notice_empty, 'd_none');\n    }\n  }); // Click events for category and clears\n\n  document.addEventListener('click', function () {\n    var trigger_search_clear = event.target.closest('.search_clear');\n    var trigger_search_cat = event.target.closest('.category');\n\n    if (trigger_search_clear) {\n      search.value = '';\n      list.search();\n      event.preventDefault();\n    }\n\n    if (trigger_search_cat) {\n      search.value = trigger_search_cat.dataset.category;\n      list.search(search.value);\n      event.preventDefault();\n    }\n  }, false);\n}\n\n},{\"dismissible\":23,\"drawer\":24,\"list.js\":5,\"modal\":25,\"toggle\":26,\"utility\":27}],2:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  var addAsync = function addAsync(values, callback, items) {\n    var valuesToAdd = values.splice(0, 50);\n    items = items || [];\n    items = items.concat(list.add(valuesToAdd));\n\n    if (values.length > 0) {\n      setTimeout(function () {\n        addAsync(values, callback, items);\n      }, 1);\n    } else {\n      list.update();\n      callback(items);\n    }\n  };\n\n  return addAsync;\n};\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  // Add handlers\n  list.handlers.filterStart = list.handlers.filterStart || [];\n  list.handlers.filterComplete = list.handlers.filterComplete || [];\n  return function (filterFunction) {\n    list.trigger('filterStart');\n    list.i = 1; // Reset paging\n\n    list.reset.filter();\n\n    if (filterFunction === undefined) {\n      list.filtered = false;\n    } else {\n      list.filtered = true;\n      var is = list.items;\n\n      for (var i = 0, il = is.length; i < il; i++) {\n        var item = is[i];\n\n        if (filterFunction(item)) {\n          item.filtered = true;\n        } else {\n          item.filtered = false;\n        }\n      }\n    }\n\n    list.update();\n    list.trigger('filterComplete');\n    return list.visibleItems;\n  };\n};\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nvar classes = require('./utils/classes'),\n    events = require('./utils/events'),\n    extend = require('./utils/extend'),\n    toString = require('./utils/to-string'),\n    getByClass = require('./utils/get-by-class'),\n    fuzzy = require('./utils/fuzzy');\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options = extend({\n    location: 0,\n    distance: 100,\n    threshold: 0.4,\n    multiSearch: true,\n    searchClass: 'fuzzy-search'\n  }, options);\n  var fuzzySearch = {\n    search: function search(searchString, columns) {\n      // Substract arguments from the searchString or put searchString as only argument\n      var searchArguments = options.multiSearch ? searchString.replace(/ +$/, '').split(/ +/) : [searchString];\n\n      for (var k = 0, kl = list.items.length; k < kl; k++) {\n        fuzzySearch.item(list.items[k], columns, searchArguments);\n      }\n    },\n    item: function item(_item, columns, searchArguments) {\n      var found = true;\n\n      for (var i = 0; i < searchArguments.length; i++) {\n        var foundArgument = false;\n\n        for (var j = 0, jl = columns.length; j < jl; j++) {\n          if (fuzzySearch.values(_item.values(), columns[j], searchArguments[i])) {\n            foundArgument = true;\n          }\n        }\n\n        if (!foundArgument) {\n          found = false;\n        }\n      }\n\n      _item.found = found;\n    },\n    values: function values(_values, value, searchArgument) {\n      if (_values.hasOwnProperty(value)) {\n        var text = toString(_values[value]).toLowerCase();\n\n        if (fuzzy(text, searchArgument, options)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n  events.bind(getByClass(list.listContainer, options.searchClass), 'keyup', function (e) {\n    var target = e.target || e.srcElement; // IE have srcElement\n\n    list.search(target.value, fuzzySearch.search);\n  });\n  return function (str, columns) {\n    list.search(str, columns, fuzzySearch.search);\n  };\n};\n\n},{\"./utils/classes\":12,\"./utils/events\":13,\"./utils/extend\":14,\"./utils/fuzzy\":15,\"./utils/get-by-class\":17,\"./utils/to-string\":20}],5:[function(require,module,exports){\n\"use strict\";\n\nvar naturalSort = require('string-natural-compare'),\n    getByClass = require('./utils/get-by-class'),\n    extend = require('./utils/extend'),\n    indexOf = require('./utils/index-of'),\n    events = require('./utils/events'),\n    toString = require('./utils/to-string'),\n    classes = require('./utils/classes'),\n    getAttribute = require('./utils/get-attribute'),\n    toArray = require('./utils/to-array');\n\nmodule.exports = function (id, options, values) {\n  var self = this,\n      init,\n      Item = require('./item')(self),\n      addAsync = require('./add-async')(self),\n      initPagination = require('./pagination')(self);\n\n  init = {\n    start: function start() {\n      self.listClass = \"list\";\n      self.searchClass = \"search\";\n      self.sortClass = \"sort\";\n      self.page = 10000;\n      self.i = 1;\n      self.items = [];\n      self.visibleItems = [];\n      self.matchingItems = [];\n      self.searched = false;\n      self.filtered = false;\n      self.searchColumns = undefined;\n      self.handlers = {\n        'updated': []\n      };\n      self.valueNames = [];\n      self.utils = {\n        getByClass: getByClass,\n        extend: extend,\n        indexOf: indexOf,\n        events: events,\n        toString: toString,\n        naturalSort: naturalSort,\n        classes: classes,\n        getAttribute: getAttribute,\n        toArray: toArray\n      };\n      self.utils.extend(self, options);\n      self.listContainer = typeof id === 'string' ? document.getElementById(id) : id;\n\n      if (!self.listContainer) {\n        return;\n      }\n\n      self.list = getByClass(self.listContainer, self.listClass, true);\n      self.parse = require('./parse')(self);\n      self.templater = require('./templater')(self);\n      self.search = require('./search')(self);\n      self.filter = require('./filter')(self);\n      self.sort = require('./sort')(self);\n      self.fuzzySearch = require('./fuzzy-search')(self, options.fuzzySearch);\n      this.handlers();\n      this.items();\n      this.pagination();\n      self.update();\n    },\n    handlers: function handlers() {\n      for (var handler in self.handlers) {\n        if (self[handler]) {\n          self.on(handler, self[handler]);\n        }\n      }\n    },\n    items: function items() {\n      self.parse(self.list);\n\n      if (values !== undefined) {\n        self.add(values);\n      }\n    },\n    pagination: function pagination() {\n      if (options.pagination !== undefined) {\n        if (options.pagination === true) {\n          options.pagination = [{}];\n        }\n\n        if (options.pagination[0] === undefined) {\n          options.pagination = [options.pagination];\n        }\n\n        for (var i = 0, il = options.pagination.length; i < il; i++) {\n          initPagination(options.pagination[i]);\n        }\n      }\n    }\n  };\n  /*\n  * Re-parse the List, use if html have changed\n  */\n\n  this.reIndex = function () {\n    self.items = [];\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.searched = false;\n    self.filtered = false;\n    self.parse(self.list);\n  };\n\n  this.toJSON = function () {\n    var json = [];\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      json.push(self.items[i].values());\n    }\n\n    return json;\n  };\n  /*\n  * Add object to list\n  */\n\n\n  this.add = function (values, callback) {\n    if (values.length === 0) {\n      return;\n    }\n\n    if (callback) {\n      addAsync(values, callback);\n      return;\n    }\n\n    var added = [],\n        notCreate = false;\n\n    if (values[0] === undefined) {\n      values = [values];\n    }\n\n    for (var i = 0, il = values.length; i < il; i++) {\n      var item = null;\n      notCreate = self.items.length > self.page ? true : false;\n      item = new Item(values[i], undefined, notCreate);\n      self.items.push(item);\n      added.push(item);\n    }\n\n    self.update();\n    return added;\n  };\n\n  this.show = function (i, page) {\n    this.i = i;\n    this.page = page;\n    self.update();\n    return self;\n  };\n  /* Removes object from list.\n  * Loops through the list and removes objects where\n  * property \"valuename\" === value\n  */\n\n\n  this.remove = function (valueName, value, options) {\n    var found = 0;\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      if (self.items[i].values()[valueName] == value) {\n        self.templater.remove(self.items[i], options);\n        self.items.splice(i, 1);\n        il--;\n        i--;\n        found++;\n      }\n    }\n\n    self.update();\n    return found;\n  };\n  /* Gets the objects in the list which\n  * property \"valueName\" === value\n  */\n\n\n  this.get = function (valueName, value) {\n    var matchedItems = [];\n\n    for (var i = 0, il = self.items.length; i < il; i++) {\n      var item = self.items[i];\n\n      if (item.values()[valueName] == value) {\n        matchedItems.push(item);\n      }\n    }\n\n    return matchedItems;\n  };\n  /*\n  * Get size of the list\n  */\n\n\n  this.size = function () {\n    return self.items.length;\n  };\n  /*\n  * Removes all items from the list\n  */\n\n\n  this.clear = function () {\n    self.templater.clear();\n    self.items = [];\n    return self;\n  };\n\n  this.on = function (event, callback) {\n    self.handlers[event].push(callback);\n    return self;\n  };\n\n  this.off = function (event, callback) {\n    var e = self.handlers[event];\n    var index = indexOf(e, callback);\n\n    if (index > -1) {\n      e.splice(index, 1);\n    }\n\n    return self;\n  };\n\n  this.trigger = function (event) {\n    var i = self.handlers[event].length;\n\n    while (i--) {\n      self.handlers[event][i](self);\n    }\n\n    return self;\n  };\n\n  this.reset = {\n    filter: function filter() {\n      var is = self.items,\n          il = is.length;\n\n      while (il--) {\n        is[il].filtered = false;\n      }\n\n      return self;\n    },\n    search: function search() {\n      var is = self.items,\n          il = is.length;\n\n      while (il--) {\n        is[il].found = false;\n      }\n\n      return self;\n    }\n  };\n\n  this.update = function () {\n    var is = self.items,\n        il = is.length;\n    self.visibleItems = [];\n    self.matchingItems = [];\n    self.templater.clear();\n\n    for (var i = 0; i < il; i++) {\n      if (is[i].matching() && self.matchingItems.length + 1 >= self.i && self.visibleItems.length < self.page) {\n        is[i].show();\n        self.visibleItems.push(is[i]);\n        self.matchingItems.push(is[i]);\n      } else if (is[i].matching()) {\n        self.matchingItems.push(is[i]);\n        is[i].hide();\n      } else {\n        is[i].hide();\n      }\n    }\n\n    self.trigger('updated');\n    return self;\n  };\n\n  init.start();\n};\n\n},{\"./add-async\":2,\"./filter\":3,\"./fuzzy-search\":4,\"./item\":6,\"./pagination\":7,\"./parse\":8,\"./search\":9,\"./sort\":10,\"./templater\":11,\"./utils/classes\":12,\"./utils/events\":13,\"./utils/extend\":14,\"./utils/get-attribute\":16,\"./utils/get-by-class\":17,\"./utils/index-of\":18,\"./utils/to-array\":19,\"./utils/to-string\":20,\"string-natural-compare\":21}],6:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  return function (initValues, element, notCreate) {\n    var item = this;\n    this._values = {};\n    this.found = false; // Show if list.searched == true and this.found == true\n\n    this.filtered = false; // Show if list.filtered == true and this.filtered == true\n\n    var init = function init(initValues, element, notCreate) {\n      if (element === undefined) {\n        if (notCreate) {\n          item.values(initValues, notCreate);\n        } else {\n          item.values(initValues);\n        }\n      } else {\n        item.elm = element;\n        var values = list.templater.get(item, initValues);\n        item.values(values);\n      }\n    };\n\n    this.values = function (newValues, notCreate) {\n      if (newValues !== undefined) {\n        for (var name in newValues) {\n          item._values[name] = newValues[name];\n        }\n\n        if (notCreate !== true) {\n          list.templater.set(item, item.values());\n        }\n      } else {\n        return item._values;\n      }\n    };\n\n    this.show = function () {\n      list.templater.show(item);\n    };\n\n    this.hide = function () {\n      list.templater.hide(item);\n    };\n\n    this.matching = function () {\n      return list.filtered && list.searched && item.found && item.filtered || list.filtered && !list.searched && item.filtered || !list.filtered && list.searched && item.found || !list.filtered && !list.searched;\n    };\n\n    this.visible = function () {\n      return item.elm && item.elm.parentNode == list.list ? true : false;\n    };\n\n    init(initValues, element, notCreate);\n  };\n};\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\n\nvar classes = require('./utils/classes'),\n    events = require('./utils/events'),\n    List = require('./index');\n\nmodule.exports = function (list) {\n  var refresh = function refresh(pagingList, options) {\n    var item,\n        l = list.matchingItems.length,\n        index = list.i,\n        page = list.page,\n        pages = Math.ceil(l / page),\n        currentPage = Math.ceil(index / page),\n        innerWindow = options.innerWindow || 2,\n        left = options.left || options.outerWindow || 0,\n        right = options.right || options.outerWindow || 0;\n    right = pages - right;\n    pagingList.clear();\n\n    for (var i = 1; i <= pages; i++) {\n      var className = currentPage === i ? \"active\" : \"\"; //console.log(i, left, right, currentPage, (currentPage - innerWindow), (currentPage + innerWindow), className);\n\n      if (is.number(i, left, right, currentPage, innerWindow)) {\n        item = pagingList.add({\n          page: i,\n          dotted: false\n        })[0];\n\n        if (className) {\n          classes(item.elm).add(className);\n        }\n\n        addEvent(item.elm, i, page);\n      } else if (is.dotted(pagingList, i, left, right, currentPage, innerWindow, pagingList.size())) {\n        item = pagingList.add({\n          page: \"...\",\n          dotted: true\n        })[0];\n        classes(item.elm).add(\"disabled\");\n      }\n    }\n  };\n\n  var is = {\n    number: function number(i, left, right, currentPage, innerWindow) {\n      return this.left(i, left) || this.right(i, right) || this.innerWindow(i, currentPage, innerWindow);\n    },\n    left: function left(i, _left) {\n      return i <= _left;\n    },\n    right: function right(i, _right) {\n      return i > _right;\n    },\n    innerWindow: function innerWindow(i, currentPage, _innerWindow) {\n      return i >= currentPage - _innerWindow && i <= currentPage + _innerWindow;\n    },\n    dotted: function dotted(pagingList, i, left, right, currentPage, innerWindow, currentPageItem) {\n      return this.dottedLeft(pagingList, i, left, right, currentPage, innerWindow) || this.dottedRight(pagingList, i, left, right, currentPage, innerWindow, currentPageItem);\n    },\n    dottedLeft: function dottedLeft(pagingList, i, left, right, currentPage, innerWindow) {\n      return i == left + 1 && !this.innerWindow(i, currentPage, innerWindow) && !this.right(i, right);\n    },\n    dottedRight: function dottedRight(pagingList, i, left, right, currentPage, innerWindow, currentPageItem) {\n      if (pagingList.items[currentPageItem - 1].values().dotted) {\n        return false;\n      } else {\n        return i == right && !this.innerWindow(i, currentPage, innerWindow) && !this.right(i, right);\n      }\n    }\n  };\n\n  var addEvent = function addEvent(elm, i, page) {\n    events.bind(elm, 'click', function () {\n      list.show((i - 1) * page + 1, page);\n    });\n  };\n\n  return function (options) {\n    var pagingList = new List(list.listContainer.id, {\n      listClass: options.paginationClass || 'pagination',\n      item: \"<li><a class='page' href='javascript:function Z(){Z=\\\"\\\"}Z()'></a></li>\",\n      valueNames: ['page', 'dotted'],\n      searchClass: 'pagination-search-that-is-not-supposed-to-exist',\n      sortClass: 'pagination-sort-that-is-not-supposed-to-exist'\n    });\n    list.on('updated', function () {\n      refresh(pagingList, options);\n    });\n    refresh(pagingList, options);\n  };\n};\n\n},{\"./index\":5,\"./utils/classes\":12,\"./utils/events\":13}],8:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  var Item = require('./item')(list);\n\n  var getChildren = function getChildren(parent) {\n    var nodes = parent.childNodes,\n        items = [];\n\n    for (var i = 0, il = nodes.length; i < il; i++) {\n      // Only textnodes have a data attribute\n      if (nodes[i].data === undefined) {\n        items.push(nodes[i]);\n      }\n    }\n\n    return items;\n  };\n\n  var parse = function parse(itemElements, valueNames) {\n    for (var i = 0, il = itemElements.length; i < il; i++) {\n      list.items.push(new Item(valueNames, itemElements[i]));\n    }\n  };\n\n  var parseAsync = function parseAsync(itemElements, valueNames) {\n    var itemsToIndex = itemElements.splice(0, 50); // TODO: If < 100 items, what happens in IE etc?\n\n    parse(itemsToIndex, valueNames);\n\n    if (itemElements.length > 0) {\n      setTimeout(function () {\n        parseAsync(itemElements, valueNames);\n      }, 1);\n    } else {\n      list.update();\n      list.trigger('parseComplete');\n    }\n  };\n\n  list.handlers.parseComplete = list.handlers.parseComplete || [];\n  return function () {\n    var itemsToIndex = getChildren(list.list),\n        valueNames = list.valueNames;\n\n    if (list.indexAsync) {\n      parseAsync(itemsToIndex, valueNames);\n    } else {\n      parse(itemsToIndex, valueNames);\n    }\n  };\n};\n\n},{\"./item\":6}],9:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (_list) {\n  var item, text, columns, searchString, customSearch;\n  var prepare = {\n    resetList: function resetList() {\n      _list.i = 1;\n\n      _list.templater.clear();\n\n      customSearch = undefined;\n    },\n    setOptions: function setOptions(args) {\n      if (args.length == 2 && args[1] instanceof Array) {\n        columns = args[1];\n      } else if (args.length == 2 && typeof args[1] == \"function\") {\n        columns = undefined;\n        customSearch = args[1];\n      } else if (args.length == 3) {\n        columns = args[1];\n        customSearch = args[2];\n      } else {\n        columns = undefined;\n      }\n    },\n    setColumns: function setColumns() {\n      if (_list.items.length === 0) return;\n\n      if (columns === undefined) {\n        columns = _list.searchColumns === undefined ? prepare.toArray(_list.items[0].values()) : _list.searchColumns;\n      }\n    },\n    setSearchString: function setSearchString(s) {\n      s = _list.utils.toString(s).toLowerCase();\n      s = s.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\"); // Escape regular expression characters\n\n      searchString = s;\n    },\n    toArray: function toArray(values) {\n      var tmpColumn = [];\n\n      for (var name in values) {\n        tmpColumn.push(name);\n      }\n\n      return tmpColumn;\n    }\n  };\n  var search = {\n    list: function list() {\n      for (var k = 0, kl = _list.items.length; k < kl; k++) {\n        search.item(_list.items[k]);\n      }\n    },\n    item: function item(_item) {\n      _item.found = false;\n\n      for (var j = 0, jl = columns.length; j < jl; j++) {\n        if (search.values(_item.values(), columns[j])) {\n          _item.found = true;\n          return;\n        }\n      }\n    },\n    values: function values(_values, column) {\n      if (_values.hasOwnProperty(column)) {\n        text = _list.utils.toString(_values[column]).toLowerCase();\n\n        if (searchString !== \"\" && text.search(searchString) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    reset: function reset() {\n      _list.reset.search();\n\n      _list.searched = false;\n    }\n  };\n\n  var searchMethod = function searchMethod(str) {\n    _list.trigger('searchStart');\n\n    prepare.resetList();\n    prepare.setSearchString(str);\n    prepare.setOptions(arguments); // str, cols|searchFunction, searchFunction\n\n    prepare.setColumns();\n\n    if (searchString === \"\") {\n      search.reset();\n    } else {\n      _list.searched = true;\n\n      if (customSearch) {\n        customSearch(searchString, columns);\n      } else {\n        search.list();\n      }\n    }\n\n    _list.update();\n\n    _list.trigger('searchComplete');\n\n    return _list.visibleItems;\n  };\n\n  _list.handlers.searchStart = _list.handlers.searchStart || [];\n  _list.handlers.searchComplete = _list.handlers.searchComplete || [];\n\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'keyup', function (e) {\n    var target = e.target || e.srcElement,\n        // IE have srcElement\n    alreadyCleared = target.value === \"\" && !_list.searched;\n\n    if (!alreadyCleared) {\n      // If oninput already have resetted the list, do nothing\n      searchMethod(target.value);\n    }\n  }); // Used to detect click on HTML5 clear button\n\n\n  _list.utils.events.bind(_list.utils.getByClass(_list.listContainer, _list.searchClass), 'input', function (e) {\n    var target = e.target || e.srcElement;\n\n    if (target.value === \"\") {\n      searchMethod('');\n    }\n  });\n\n  return searchMethod;\n};\n\n},{}],10:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (list) {\n  var buttons = {\n    els: undefined,\n    clear: function clear() {\n      for (var i = 0, il = buttons.els.length; i < il; i++) {\n        list.utils.classes(buttons.els[i]).remove('asc');\n        list.utils.classes(buttons.els[i]).remove('desc');\n      }\n    },\n    getOrder: function getOrder(btn) {\n      var predefinedOrder = list.utils.getAttribute(btn, 'data-order');\n\n      if (predefinedOrder == \"asc\" || predefinedOrder == \"desc\") {\n        return predefinedOrder;\n      } else if (list.utils.classes(btn).has('desc')) {\n        return \"asc\";\n      } else if (list.utils.classes(btn).has('asc')) {\n        return \"desc\";\n      } else {\n        return \"asc\";\n      }\n    },\n    getInSensitive: function getInSensitive(btn, options) {\n      var insensitive = list.utils.getAttribute(btn, 'data-insensitive');\n\n      if (insensitive === \"false\") {\n        options.insensitive = false;\n      } else {\n        options.insensitive = true;\n      }\n    },\n    setOrder: function setOrder(options) {\n      for (var i = 0, il = buttons.els.length; i < il; i++) {\n        var btn = buttons.els[i];\n\n        if (list.utils.getAttribute(btn, 'data-sort') !== options.valueName) {\n          continue;\n        }\n\n        var predefinedOrder = list.utils.getAttribute(btn, 'data-order');\n\n        if (predefinedOrder == \"asc\" || predefinedOrder == \"desc\") {\n          if (predefinedOrder == options.order) {\n            list.utils.classes(btn).add(options.order);\n          }\n        } else {\n          list.utils.classes(btn).add(options.order);\n        }\n      }\n    }\n  };\n\n  var sort = function sort() {\n    list.trigger('sortStart');\n    var options = {};\n    var target = arguments[0].currentTarget || arguments[0].srcElement || undefined;\n\n    if (target) {\n      options.valueName = list.utils.getAttribute(target, 'data-sort');\n      buttons.getInSensitive(target, options);\n      options.order = buttons.getOrder(target);\n    } else {\n      options = arguments[1] || options;\n      options.valueName = arguments[0];\n      options.order = options.order || \"asc\";\n      options.insensitive = typeof options.insensitive == \"undefined\" ? true : options.insensitive;\n    }\n\n    buttons.clear();\n    buttons.setOrder(options); // caseInsensitive\n    // alphabet\n\n    var customSortFunction = options.sortFunction || list.sortFunction || null,\n        multi = options.order === 'desc' ? -1 : 1,\n        sortFunction;\n\n    if (customSortFunction) {\n      sortFunction = function sortFunction(itemA, itemB) {\n        return customSortFunction(itemA, itemB, options) * multi;\n      };\n    } else {\n      sortFunction = function sortFunction(itemA, itemB) {\n        var sort = list.utils.naturalSort;\n        sort.alphabet = list.alphabet || options.alphabet || undefined;\n\n        if (!sort.alphabet && options.insensitive) {\n          sort = list.utils.naturalSort.caseInsensitive;\n        }\n\n        return sort(itemA.values()[options.valueName], itemB.values()[options.valueName]) * multi;\n      };\n    }\n\n    list.items.sort(sortFunction);\n    list.update();\n    list.trigger('sortComplete');\n  }; // Add handlers\n\n\n  list.handlers.sortStart = list.handlers.sortStart || [];\n  list.handlers.sortComplete = list.handlers.sortComplete || [];\n  buttons.els = list.utils.getByClass(list.listContainer, list.sortClass);\n  list.utils.events.bind(buttons.els, 'click', sort);\n  list.on('searchStart', buttons.clear);\n  list.on('filterStart', buttons.clear);\n  return sort;\n};\n\n},{}],11:[function(require,module,exports){\n\"use strict\";\n\nvar Templater = function Templater(list) {\n  var itemSource,\n      templater = this;\n\n  var init = function init() {\n    itemSource = templater.getItemSource(list.item);\n\n    if (itemSource) {\n      itemSource = templater.clearSourceItem(itemSource, list.valueNames);\n    }\n  };\n\n  this.clearSourceItem = function (el, valueNames) {\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm;\n\n      if (valueNames[i].data) {\n        for (var j = 0, jl = valueNames[i].data.length; j < jl; j++) {\n          el.setAttribute('data-' + valueNames[i].data[j], '');\n        }\n      } else if (valueNames[i].attr && valueNames[i].name) {\n        elm = list.utils.getByClass(el, valueNames[i].name, true);\n\n        if (elm) {\n          elm.setAttribute(valueNames[i].attr, \"\");\n        }\n      } else {\n        elm = list.utils.getByClass(el, valueNames[i], true);\n\n        if (elm) {\n          elm.innerHTML = \"\";\n        }\n      }\n\n      elm = undefined;\n    }\n\n    return el;\n  };\n\n  this.getItemSource = function (item) {\n    if (item === undefined) {\n      var nodes = list.list.childNodes,\n          items = [];\n\n      for (var i = 0, il = nodes.length; i < il; i++) {\n        // Only textnodes have a data attribute\n        if (nodes[i].data === undefined) {\n          return nodes[i].cloneNode(true);\n        }\n      }\n    } else if (/<tr[\\s>]/g.exec(item)) {\n      var tbody = document.createElement('tbody');\n      tbody.innerHTML = item;\n      return tbody.firstChild;\n    } else if (item.indexOf(\"<\") !== -1) {\n      var div = document.createElement('div');\n      div.innerHTML = item;\n      return div.firstChild;\n    } else {\n      var source = document.getElementById(list.item);\n\n      if (source) {\n        return source;\n      }\n    }\n\n    return undefined;\n  };\n\n  this.get = function (item, valueNames) {\n    templater.create(item);\n    var values = {};\n\n    for (var i = 0, il = valueNames.length; i < il; i++) {\n      var elm;\n\n      if (valueNames[i].data) {\n        for (var j = 0, jl = valueNames[i].data.length; j < jl; j++) {\n          values[valueNames[i].data[j]] = list.utils.getAttribute(item.elm, 'data-' + valueNames[i].data[j]);\n        }\n      } else if (valueNames[i].attr && valueNames[i].name) {\n        elm = list.utils.getByClass(item.elm, valueNames[i].name, true);\n        values[valueNames[i].name] = elm ? list.utils.getAttribute(elm, valueNames[i].attr) : \"\";\n      } else {\n        elm = list.utils.getByClass(item.elm, valueNames[i], true);\n        values[valueNames[i]] = elm ? elm.innerHTML : \"\";\n      }\n\n      elm = undefined;\n    }\n\n    return values;\n  };\n\n  this.set = function (item, values) {\n    var getValueName = function getValueName(name) {\n      for (var i = 0, il = list.valueNames.length; i < il; i++) {\n        if (list.valueNames[i].data) {\n          var data = list.valueNames[i].data;\n\n          for (var j = 0, jl = data.length; j < jl; j++) {\n            if (data[j] === name) {\n              return {\n                data: name\n              };\n            }\n          }\n        } else if (list.valueNames[i].attr && list.valueNames[i].name && list.valueNames[i].name == name) {\n          return list.valueNames[i];\n        } else if (list.valueNames[i] === name) {\n          return name;\n        }\n      }\n    };\n\n    var setValue = function setValue(name, value) {\n      var elm;\n      var valueName = getValueName(name);\n      if (!valueName) return;\n\n      if (valueName.data) {\n        item.elm.setAttribute('data-' + valueName.data, value);\n      } else if (valueName.attr && valueName.name) {\n        elm = list.utils.getByClass(item.elm, valueName.name, true);\n\n        if (elm) {\n          elm.setAttribute(valueName.attr, value);\n        }\n      } else {\n        elm = list.utils.getByClass(item.elm, valueName, true);\n\n        if (elm) {\n          elm.innerHTML = value;\n        }\n      }\n\n      elm = undefined;\n    };\n\n    if (!templater.create(item)) {\n      for (var v in values) {\n        if (values.hasOwnProperty(v)) {\n          setValue(v, values[v]);\n        }\n      }\n    }\n  };\n\n  this.create = function (item) {\n    if (item.elm !== undefined) {\n      return false;\n    }\n\n    if (itemSource === undefined) {\n      throw new Error(\"The list need to have at list one item on init otherwise you'll have to add a template.\");\n    }\n    /* If item source does not exists, use the first item in list as\n    source for new items */\n\n\n    var newItem = itemSource.cloneNode(true);\n    newItem.removeAttribute('id');\n    item.elm = newItem;\n    templater.set(item, item.values());\n    return true;\n  };\n\n  this.remove = function (item) {\n    if (item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n\n  this.show = function (item) {\n    templater.create(item);\n    list.list.appendChild(item.elm);\n  };\n\n  this.hide = function (item) {\n    if (item.elm !== undefined && item.elm.parentNode === list.list) {\n      list.list.removeChild(item.elm);\n    }\n  };\n\n  this.clear = function () {\n    /* .innerHTML = ''; fucks up IE */\n    if (list.list.hasChildNodes()) {\n      while (list.list.childNodes.length >= 1) {\n        list.list.removeChild(list.list.firstChild);\n      }\n    }\n  };\n\n  init();\n};\n\nmodule.exports = function (list) {\n  return new Templater(list);\n};\n\n},{}],12:[function(require,module,exports){\n\"use strict\";\n\n/**\n * Module dependencies.\n */\nvar index = require('./index-of');\n/**\n * Whitespace regexp.\n */\n\n\nvar re = /\\s+/;\n/**\n * toString reference.\n */\n\nvar toString = Object.prototype.toString;\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nmodule.exports = function (el) {\n  return new ClassList(el);\n};\n/**\n * Initialize a new ClassList for `el`.\n *\n * @param {Element} el\n * @api private\n */\n\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n\n  this.el = el;\n  this.list = el.classList;\n}\n/**\n * Add class `name` if not already present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.add = function (name) {\n  // classList\n  if (this.list) {\n    this.list.add(name);\n    return this;\n  } // fallback\n\n\n  var arr = this.array();\n  var i = index(arr, name);\n  if (!~i) arr.push(name);\n  this.el.className = arr.join(' ');\n  return this;\n};\n/**\n * Remove class `name` when present, or\n * pass a regular expression to remove\n * any which match.\n *\n * @param {String|RegExp} name\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.remove = function (name) {\n  // classList\n  if (this.list) {\n    this.list.remove(name);\n    return this;\n  } // fallback\n\n\n  var arr = this.array();\n  var i = index(arr, name);\n  if (~i) arr.splice(i, 1);\n  this.el.className = arr.join(' ');\n  return this;\n};\n/**\n * Toggle class `name`, can force state via `force`.\n *\n * For browsers that support classList, but do not support `force` yet,\n * the mistake will be detected and corrected.\n *\n * @param {String} name\n * @param {Boolean} force\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.toggle = function (name, force) {\n  // classList\n  if (this.list) {\n    if (\"undefined\" !== typeof force) {\n      if (force !== this.list.toggle(name, force)) {\n        this.list.toggle(name); // toggle again to correct\n      }\n    } else {\n      this.list.toggle(name);\n    }\n\n    return this;\n  } // fallback\n\n\n  if (\"undefined\" !== typeof force) {\n    if (!force) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  } else {\n    if (this.has(name)) {\n      this.remove(name);\n    } else {\n      this.add(name);\n    }\n  }\n\n  return this;\n};\n/**\n * Return an array of classes.\n *\n * @return {Array}\n * @api public\n */\n\n\nClassList.prototype.array = function () {\n  var className = this.el.getAttribute('class') || '';\n  var str = className.replace(/^\\s+|\\s+$/g, '');\n  var arr = str.split(re);\n  if ('' === arr[0]) arr.shift();\n  return arr;\n};\n/**\n * Check if class `name` is present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\n\nClassList.prototype.has = ClassList.prototype.contains = function (name) {\n  return this.list ? this.list.contains(name) : !!~index(this.array(), name);\n};\n\n},{\"./index-of\":18}],13:[function(require,module,exports){\n\"use strict\";\n\nvar bind = window.addEventListener ? 'addEventListener' : 'attachEvent',\n    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',\n    prefix = bind !== 'addEventListener' ? 'on' : '',\n    toArray = require('./to-array');\n/**\n * Bind `el` event `type` to `fn`.\n *\n * @param {Element} el, NodeList, HTMLCollection or Array\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\n\n\nexports.bind = function (el, type, fn, capture) {\n  el = toArray(el);\n\n  for (var i = 0; i < el.length; i++) {\n    el[i][bind](prefix + type, fn, capture || false);\n  }\n};\n/**\n * Unbind `el` event `type`'s callback `fn`.\n *\n * @param {Element} el, NodeList, HTMLCollection or Array\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\n\n\nexports.unbind = function (el, type, fn, capture) {\n  el = toArray(el);\n\n  for (var i = 0; i < el.length; i++) {\n    el[i][unbind](prefix + type, fn, capture || false);\n  }\n};\n\n},{\"./to-array\":19}],14:[function(require,module,exports){\n\"use strict\";\n\n/*\n * Source: https://github.com/segmentio/extend\n */\nmodule.exports = function extend(object) {\n  // Takes an unlimited number of extenders.\n  var args = Array.prototype.slice.call(arguments, 1); // For each extender, copy their properties on our object.\n\n  for (var i = 0, source; source = args[i]; i++) {\n    if (!source) continue;\n\n    for (var property in source) {\n      object[property] = source[property];\n    }\n  }\n\n  return object;\n};\n\n},{}],15:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (text, pattern, options) {\n  // Aproximately where in the text is the pattern expected to be found?\n  var Match_Location = options.location || 0; //Determines how close the match must be to the fuzzy location (specified above). An exact letter match which is 'distance' characters away from the fuzzy location would score as a complete mismatch. A distance of '0' requires the match be at the exact location specified, a threshold of '1000' would require a perfect match to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n\n  var Match_Distance = options.distance || 100; // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match (of both letters and location), a threshold of '1.0' would match anything.\n\n  var Match_Threshold = options.threshold || 0.4;\n  if (pattern === text) return true; // Exact match\n\n  if (pattern.length > 32) return false; // This algorithm cannot be used\n  // Set starting location at beginning text and initialise the alphabet.\n\n  var loc = Match_Location,\n      s = function () {\n    var q = {},\n        i;\n\n    for (i = 0; i < pattern.length; i++) {\n      q[pattern.charAt(i)] = 0;\n    }\n\n    for (i = 0; i < pattern.length; i++) {\n      q[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n    }\n\n    return q;\n  }(); // Compute and return the score for a match with e errors and x location.\n  // Accesses loc and pattern through being a closure.\n\n\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length,\n        proximity = Math.abs(loc - x);\n\n    if (!Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n\n    return accuracy + proximity / Match_Distance;\n  }\n\n  var score_threshold = Match_Threshold,\n      // Highest score beyond which we give up.\n  best_loc = text.indexOf(pattern, loc); // Is there a nearby exact match? (speedup)\n\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold); // What about in the other direction? (speedup)\n\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  } // Initialise the bit arrays.\n\n\n  var matchmask = 1 << pattern.length - 1;\n  best_loc = -1;\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n\n      if (d === 0) {\n        // First pass: exact match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        // Subsequent passes: fuzzy match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];\n      }\n\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n\n    last_rd = rd;\n  }\n\n  return best_loc < 0 ? false : true;\n};\n\n},{}],16:[function(require,module,exports){\n\"use strict\";\n\n/**\n * A cross-browser implementation of getAttribute.\n * Source found here: http://stackoverflow.com/a/3755343/361337 written by Vivin Paliath\n *\n * Return the value for `attr` at `element`.\n *\n * @param {Element} el\n * @param {String} attr\n * @api public\n */\nmodule.exports = function (el, attr) {\n  var result = el.getAttribute && el.getAttribute(attr) || null;\n\n  if (!result) {\n    var attrs = el.attributes;\n    var length = attrs.length;\n\n    for (var i = 0; i < length; i++) {\n      if (attr[i] !== undefined) {\n        if (attr[i].nodeName === attr) {\n          result = attr[i].nodeValue;\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\n},{}],17:[function(require,module,exports){\n\"use strict\";\n\n/**\n * A cross-browser implementation of getElementsByClass.\n * Heavily based on Dustin Diaz's function: http://dustindiaz.com/getelementsbyclass.\n *\n * Find all elements with class `className` inside `container`.\n * Use `single = true` to increase performance in older browsers\n * when only one element is needed.\n *\n * @param {String} className\n * @param {Element} container\n * @param {Boolean} single\n * @api public\n */\nvar getElementsByClassName = function getElementsByClassName(container, className, single) {\n  if (single) {\n    return container.getElementsByClassName(className)[0];\n  } else {\n    return container.getElementsByClassName(className);\n  }\n};\n\nvar querySelector = function querySelector(container, className, single) {\n  className = '.' + className;\n\n  if (single) {\n    return container.querySelector(className);\n  } else {\n    return container.querySelectorAll(className);\n  }\n};\n\nvar polyfill = function polyfill(container, className, single) {\n  var classElements = [],\n      tag = '*';\n  var els = container.getElementsByTagName(tag);\n  var elsLen = els.length;\n  var pattern = new RegExp(\"(^|\\\\s)\" + className + \"(\\\\s|$)\");\n\n  for (var i = 0, j = 0; i < elsLen; i++) {\n    if (pattern.test(els[i].className)) {\n      if (single) {\n        return els[i];\n      } else {\n        classElements[j] = els[i];\n        j++;\n      }\n    }\n  }\n\n  return classElements;\n};\n\nmodule.exports = function () {\n  return function (container, className, single, options) {\n    options = options || {};\n\n    if (options.test && options.getElementsByClassName || !options.test && document.getElementsByClassName) {\n      return getElementsByClassName(container, className, single);\n    } else if (options.test && options.querySelector || !options.test && document.querySelector) {\n      return querySelector(container, className, single);\n    } else {\n      return polyfill(container, className, single);\n    }\n  };\n}();\n\n},{}],18:[function(require,module,exports){\n\"use strict\";\n\nvar indexOf = [].indexOf;\n\nmodule.exports = function (arr, obj) {\n  if (indexOf) return arr.indexOf(obj);\n\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n\n  return -1;\n};\n\n},{}],19:[function(require,module,exports){\n\"use strict\";\n\n/**\n * Source: https://github.com/timoxley/to-array\n *\n * Convert an array-like object into an `Array`.\n * If `collection` is already an `Array`, then will return a clone of `collection`.\n *\n * @param {Array | Mixed} collection An `Array` or array-like object to convert e.g. `arguments` or `NodeList`\n * @return {Array} Naive conversion of `collection` to a new `Array`.\n * @api public\n */\nmodule.exports = function toArray(collection) {\n  if (typeof collection === 'undefined') return [];\n  if (collection === null) return [null];\n  if (collection === window) return [window];\n  if (typeof collection === 'string') return [collection];\n  if (isArray(collection)) return collection;\n  if (typeof collection.length != 'number') return [collection];\n  if (typeof collection === 'function' && collection instanceof Function) return [collection];\n  var arr = [];\n\n  for (var i = 0; i < collection.length; i++) {\n    if (Object.prototype.hasOwnProperty.call(collection, i) || i in collection) {\n      arr.push(collection[i]);\n    }\n  }\n\n  if (!arr.length) return [];\n  return arr;\n};\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === \"[object Array]\";\n}\n\n},{}],20:[function(require,module,exports){\n\"use strict\";\n\nmodule.exports = function (s) {\n  s = s === undefined ? \"\" : s;\n  s = s === null ? \"\" : s;\n  s = s.toString();\n  return s;\n};\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (charCodeA < alphabetIndexMapLength && charCodeB < alphabetIndexMapLength && alphabetIndexMap[charCodeA] !== -1 && alphabetIndexMap[charCodeB] !== -1) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function (a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function get() {\n      return alphabet;\n    },\n    set: function set(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n      var i = 0;\n\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n\n      alphabetIndexMapLength = alphabetIndexMap.length;\n\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    }\n  }\n});\nmodule.exports = naturalCompare;\n\n},{}],22:[function(require,module,exports){\nmodule.exports={\n  \"breakpoints\" : {\n    \"xs\": \"480px\",\n    \"sm\": \"620px\",\n    \"md\": \"760px\",\n    \"lg\": \"990px\",\n    \"xl\": \"1380px\"\n  }\n}\n\n},{}],23:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    trigger: '[data-dismiss]',\n    target: '[data-dismissible]',\n    classToggle: 'dismiss'\n  };\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var target = trigger.closest(settings.target);\n\n      if (target) {\n        _utility[\"default\"].toggleClass(target, settings.classToggle);\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":27}],24:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Drawer plugin\n * ---\n * A container component that slides in from the left or right. It typically\n * contains menus, search or other content for your app.\n */\nfunction _default(options) {\n  'use strict'; // The api where we assign our methods to and return after running init\n\n  var api = {}; // The settings object which will contain our merged options and defaults obj\n\n  var settings; // The default settings of the component\n\n  var defaults = {\n    // Class options\n    // {string} The class name to be searched for or used\n    classDrawer: 'drawer__item',\n    classTrigger: 'drawer__trigger',\n    classDialog: 'drawer__dialog',\n    classActive: 'is-active',\n    // The classes that get switched depending on the element\n    classSwitch: {\n      'item': {\n        'drawer': 'drawer__item',\n        'modal': 'modal'\n      },\n      'trigger': {\n        'drawer': 'drawer__trigger',\n        'modal': 'modal__trigger'\n      },\n      'dialog': {\n        'drawer': 'drawer__dialog',\n        'modal': 'modal__dialog'\n      }\n    },\n    // Whether or not to enable the switch functionality\n    // {false} || {string} e.g. '[data-drawer-switch]'\n    \"switch\": '[data-drawer-switch]',\n    // The default break point for when to switch to drawer or modal classes\n    // {string} Either a breakpoint key or pixel value\n    switchBreakpoint: 'lg',\n    // Whether or not to store the save state in local storage\n    // {false} || {string} The string to save our state object as\n    saveState: 'drawerState',\n    // Transition options\n    transitionDuration: 500 // Drawer specific variables\n    // Where we store all our drawers available in the DOM\n\n  };\n  var drawers; // Where we store all our switch drawers available in the DOM\n\n  var switchDrawers; // Where we store a save state object before we pass it to local storage\n\n  var drawerState = {};\n  /**\n   * The constructor method, run as soon as an instance is created\n   * ---\n   * @param {Object} options - A json object with your custom settings\n   */\n\n  api.init = function (options) {\n    // Merge the defaults and passed options into our settings obj\n    settings = _utility[\"default\"].extend(defaults, options || {}); // Get all the drawers on the page\n\n    drawers = document.querySelectorAll('.' + settings.classDrawer); // Init save state functionality if it's enabled\n\n    if (settings.saveState) {\n      initSaveState();\n    } // Init switch functionality if it's enabled\n\n\n    if (settings[\"switch\"]) {\n      initSwitch();\n    } // Add our drawer trigger event listener\n\n\n    document.addEventListener('click', trigger, false);\n  };\n  /**\n   * The deconstructor method, used to reset and destory the drawer instance\n   */\n\n\n  api.destroy = function () {\n    // Clear our variables\n    settings = null;\n    drawers = null;\n    switchDrawers = null;\n    drawerState = {}; // Delete the local storage data\n\n    localStorage.removeItem(settings.saveState); // Remove the drawer trigger event listener\n\n    document.removeEventListener('click', trigger, false);\n  };\n  /**\n   * Public method to open a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.open = function (selector) {\n    selector = selector ? selector : '.' + settings.classDrawer;\n    toggle(document.querySelectorAll(selector), 'open');\n  };\n  /**\n   * Public method to close a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.close = function (selector) {\n    selector = selector ? selector : '.' + settings.classDrawer;\n    toggle(document.querySelectorAll(selector), 'close');\n  };\n  /**\n   * Public method to toggle a drawer or group of drawers\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.toggle = function (selector) {\n    selector = selector ? selector : '.' + settings.classDrawer;\n    toggle(document.querySelectorAll(selector));\n  };\n  /**\n   * Public method to switch a drawer into modal\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.switchDrawer = function (selector) {\n    // Use default selector if one isn't passed\n    selector = selector ? selector : settings[\"switch\"]; // Query our elements using the provided selector\n\n    var items = document.querySelectorAll(selector); // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items);\n    items.forEach(function (item) {\n      switchDrawer(item);\n    });\n  };\n  /**\n   * Public method to switch a drawer into modal\n   * ---\n   * @param {String} selector - A valid CSS selector\n   */\n\n\n  api.switchModal = function (selector) {\n    // Use default selector if one isn't passed\n    selector = selector ? selector : settings[\"switch\"]; // Query our elements using the provided selector\n\n    var items = document.querySelectorAll(selector); // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items);\n    items.forEach(function (item) {\n      switchModal(item);\n    });\n  };\n  /**\n   * Save the drawer current drawer state\n   */\n\n\n  api.stateSave = function () {\n    stateSave();\n  };\n  /**\n   * Return to drawer default state\n   */\n\n\n  api.stateReset = function () {\n    stateReset();\n  };\n  /**\n   * Private function to close a drawer or group of drawers\n   * ---\n   * @param {Node} drawer - The drawer element(s) to close\n   * @param {String} state - Whether to open, close or toggle the drawer(s)\n   * @param {Function} callback - The callback function\n   */\n\n\n  var toggle = function toggle(drawer, state, callback) {\n    // Check if drawer(s) should be opened, closed or toggled and either add or\n    // remove the active class to the passed drawer(s)\n    if (state === 'open') {\n      _utility[\"default\"].addClass(drawer, settings.classActive);\n    } else if (state === 'close') {\n      _utility[\"default\"].removeClass(drawer, settings.classActive);\n    } else {\n      _utility[\"default\"].toggleClass(drawer, settings.classActive);\n    } // Check if save state is enabled\n\n\n    if (settings.saveState) {\n      stateSave(drawer);\n    } // Fire the callback function if one was passed\n\n\n    typeof callback === 'function' && callback();\n  };\n  /**\n   * Private function to toggle drawer via a trigger\n   */\n\n\n  var trigger = function trigger() {\n    // Get the closest trigger element from the click event\n    var trigger = event.target.closest('.' + settings.classTrigger); // Check that the class trigger was clicked\n\n    if (trigger) {\n      // Get the drawer selector from the trigger via [data-target]\n      var dataDrawer = trigger.dataset.target; // Check that a drawer target was given\n\n      if (dataDrawer) {\n        // Query the drawer element and toggle it if it exists\n        var drawer = document.querySelectorAll(dataDrawer);\n\n        if (drawer.length) {\n          toggle(drawer);\n        }\n      }\n    }\n  };\n  /**\n   * Private function that initializes the save state functionality\n   */\n\n\n  var initSaveState = function initSaveState() {\n    // Check if a drawer state is already saved in local storage and save the\n    // json parsed data to our local variable if it does\n    if (localStorage.getItem(settings.saveState)) {\n      drawerState = JSON.parse(localStorage.getItem(settings.saveState));\n    } // Loop through all drawers\n\n\n    drawers.forEach(function (drawer) {\n      // Set the default state if one is not set\n      if (drawer.id in drawerState === false) {\n        stateSave(drawer);\n      } // Get our drawer dialog element\n\n\n      var dialog = drawer.querySelector('.' + settings.classDialog); // Transition delay: disables transitions as default states are being set\n\n      var transitionDelay = function transitionDelay() {\n        if (dialog) {\n          _utility[\"default\"].addClass(dialog, 'transition_none');\n\n          setTimeout(function () {\n            _utility[\"default\"].removeClass(dialog, 'transition_none');\n          }, settings.transitionDuration);\n        }\n      }; // Toggle our drawer state based on the saved state\n\n\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, 'close', transitionDelay);\n      } else if (drawerState[drawer.id]) {\n        toggle(drawer, 'open', transitionDelay);\n      }\n    });\n  };\n  /**\n   * Private function that saves the state of a specific or all drawers\n   * ---\n   * @param {Node} items - The drawer element(s) to save state\n   */\n\n\n  var stateSave = function stateSave(items) {\n    // Save all drawers if an items arg wasn't passed\n    items = items ? items : drawers; // Convert to array if only one drawer is passed\n\n    items = items.forEach ? items : _utility[\"default\"].toArray(items); // Loop through our drawers and save their new state to local storage\n\n    items.forEach(function (item) {\n      // Only save drawer state if an id exists\n      if (item.id) {\n        drawerState[item.id] = _utility[\"default\"].hasClass(item, settings.classActive);\n        localStorage.setItem(settings.saveState, JSON.stringify(drawerState));\n      }\n    });\n  };\n  /**\n   * Private function that clears the drawer state\n   */\n\n\n  var stateReset = function stateReset() {\n    // Reset our local drawer state variable and delete the local storage data\n    drawerState = {};\n    localStorage.removeItem(settings.saveState);\n  };\n  /**\n   * Private function that initializes the switch functionality\n   */\n\n\n  var initSwitch = function initSwitch() {\n    // Query all the drawers with the switch feature enabled\n    switchDrawers = document.querySelectorAll(settings[\"switch\"]); // Loop through the switch drawers\n\n    switchDrawers.forEach(function (drawer) {\n      // Get the local breakpoint if one is set\n      // Remove brackets and the intial data flag\n      var cleanSelector = settings[\"switch\"].replace('[', '').replace(']', '').replace('data-', ''); // Convert sring to camelCase\n\n      cleanSelector = cleanSelector.replace(/-([a-z])/g, function (g) {\n        return g[1].toUpperCase();\n      }); // Check which breakpoint to use:\n      // a) The local bp set on the drawer\n      // b) The bp available in config using a key\n      // c) The raw pixel value provided in settings\n\n      var bp = drawer.dataset[cleanSelector];\n\n      if (bp) {\n        bp = _utility[\"default\"].getBreakpoint(bp);\n\n        if (!bp) {\n          bp = drawer.dataset[cleanSelector];\n        }\n      } else {\n        bp = _utility[\"default\"].getBreakpoint(settings.switchBreakpoint);\n\n        if (!bp) {\n          bp = settings.switchBreakpoint;\n        }\n      } // Media query listener\n\n\n      var mq = window.matchMedia(\"(min-width:\" + bp + \")\");\n      mq.addListener(function (mq) {\n        switchCheck(mq, drawer);\n      });\n      switchCheck(mq, drawer);\n    });\n  };\n  /**\n   * Private function that checks when a media query hits a match and switches\n   * the component from drawer to modal as needed\n   * ---\n   * @param {MediaQueryList} mq - The MediaQueryList object for the media query\n   * @param {Node} drawer - The drawer element to switch\n   */\n\n\n  var switchCheck = function switchCheck(mq, drawer) {\n    if (mq.matches) {\n      switchDrawer(drawer);\n    } else {\n      switchModal(drawer);\n    }\n  };\n  /**\n   * Private function that switches a modal into a drawer component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n\n\n  var switchDrawer = function switchDrawer(drawer) {\n    // Get the dialog and trigger elements related to this component\n    var dialog = drawer.querySelector('.dialog');\n    var triggers = document.querySelectorAll('[data-target=\"#' + drawer.id + '\"]'); // Switch the modal component to drawer\n\n    drawer.className = drawer.className.replace(new RegExp(settings.classSwitch.item.modal, 'gi'), settings.classSwitch.item.drawer);\n    dialog.className = dialog.className.replace(new RegExp(settings.classSwitch.dialog.modal, 'gi'), settings.classSwitch.dialog.drawer);\n    triggers.forEach(function (trigger) {\n      trigger.className = trigger.className.replace(new RegExp(settings.classSwitch.trigger.modal, 'gi'), settings.classSwitch.trigger.drawer);\n    }); // Open or close drawer based on save state\n\n    if (settings.saveState) {\n      if (drawerState[drawer.id] === false) {\n        toggle(drawer, 'close');\n      } else {\n        toggle(drawer, 'open');\n      }\n    }\n  };\n  /**\n   * Private function that switches a drawer into a modal component\n   * ---\n   * @param {Node} drawer - The element to switch\n   */\n\n\n  var switchModal = function switchModal(drawer) {\n    // Get the dialog and trigger elements related to this component\n    var dialog = drawer.querySelector('.dialog');\n    var triggers = document.querySelectorAll('[data-target=\"#' + drawer.id + '\"]'); // Switch the drawer component to modal\n\n    drawer.className = drawer.className.replace(new RegExp(settings.classSwitch.item.drawer, 'gi'), settings.classSwitch.item.modal);\n    dialog.className = dialog.className.replace(new RegExp(settings.classSwitch.dialog.drawer, 'gi'), settings.classSwitch.dialog.modal);\n    triggers.forEach(function (trigger) {\n      trigger.className = trigger.className.replace(new RegExp(settings.classSwitch.trigger.drawer, 'gi'), settings.classSwitch.trigger.modal);\n    }); // Remove active class for modal styles by default\n\n    _utility[\"default\"].removeClass(drawer, settings.classActive);\n  }; // Run the constructor method\n\n\n  api.init(options); // Return the API for running public methods\n\n  return api;\n}\n\n},{\"./utility.js\":27}],25:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Modal plugin\n * ---\n * A component for changing the mode of a page to complete a critical task.\n * This is usually used in conjunction with the Dialog component to make\n * modal dialogs.\n */\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    classTrigger: 'modal__trigger',\n    classModal: 'modal',\n    classDialog: 'modal__dialog',\n    classActive: 'is-active',\n    focus: '[data-focus]'\n  };\n  var memoryTrigger;\n  var memoryTarget;\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n    document.addEventListener('touchend', run, false);\n    document.addEventListener('keyup', escape, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    memoryTarget = null;\n    memoryTrigger = null;\n    document.removeEventListener('click', run, false);\n    document.removeEventListener('touchend', run, false);\n    document.removeEventListener('keyup', escape, false);\n  };\n\n  api.open = function (selector) {\n    open(document.querySelectorAll(selector));\n  };\n\n  api.close = function (clear) {\n    close(clear);\n  };\n\n  var open = function open(target) {\n    _utility[\"default\"].addClass(target, settings.classActive);\n\n    if (target.length === 1) {\n      target = target.item(0);\n      var focus = target.querySelector(settings.focus);\n      target.addEventListener('transitionend', function _listener() {\n        if (focus) {\n          focus.focus();\n        } else {\n          target.focus();\n        }\n\n        this.removeEventListener('transitionend', _listener, true);\n      }, true);\n    }\n  };\n\n  var close = function close() {\n    var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var modals = document.querySelectorAll('.' + settings.classModal);\n\n    _utility[\"default\"].removeClass(modals, settings.classActive);\n\n    if (clear == false && memoryTrigger && memoryTarget) {\n      if (memoryTarget.length === 1) {\n        memoryTarget = memoryTarget.item(0);\n        memoryTarget.addEventListener('transitionend', function _listener() {\n          if (memoryTrigger) {\n            memoryTrigger.focus();\n          }\n\n          memoryTarget = null;\n          memoryTrigger = null;\n          this.removeEventListener('transitionend', _listener, true);\n        }, true);\n      }\n    } else if (clear == true) {\n      memoryTarget = null;\n      memoryTrigger = null;\n    }\n  };\n\n  var escape = function escape() {\n    if (event.keyCode == 27) {\n      close();\n    }\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest('.' + settings.classTrigger);\n    var modal = event.target.closest('.' + settings.classModal);\n    var dialog = event.target.closest('.' + settings.classDialog);\n\n    if (trigger) {\n      close();\n      var dataModal = trigger.dataset.target;\n\n      if (dataModal) {\n        memoryTarget = document.querySelectorAll(dataModal);\n        memoryTrigger = trigger;\n        open(memoryTarget);\n      }\n\n      event.preventDefault();\n    } else if (modal && !dialog) {\n      close();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":27}],26:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _utility = _interopRequireDefault(require(\"./utility.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default(options) {\n  'use strict';\n\n  var api = {};\n  var settings;\n  var defaults = {\n    trigger: '[data-toggle-class]',\n    targets: '',\n    \"class\": ''\n  };\n\n  api.init = function (options) {\n    settings = _utility[\"default\"].extend(defaults, options || {});\n    document.addEventListener('click', run, false);\n  };\n\n  api.destroy = function () {\n    settings = null;\n    document.removeEventListener('click', run, false);\n  };\n\n  var run = function run() {\n    var trigger = event.target.closest(settings.trigger);\n\n    if (trigger) {\n      var targets;\n\n      if (settings.targets) {\n        targets = document.querySelectorAll(settings.targets);\n      } else {\n        targets = document.querySelectorAll(trigger.dataset.toggleTarget);\n      }\n\n      if (targets.length) {\n        targets.forEach(function (target) {\n          _utility[\"default\"].toggleClass(target, trigger.dataset.toggleClass.split(' '));\n        });\n      } else {\n        if (settings[\"class\"]) {\n          _utility[\"default\"].toggleClass(trigger, settings[\"class\"]);\n        } else {\n          _utility[\"default\"].toggleClass(trigger, trigger.dataset.toggleClass.split(' '));\n        }\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  api.init(options);\n  return api;\n}\n\n},{\"./utility.js\":27}],27:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _config = _interopRequireDefault(require(\"config\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Utility\n * ---\n * A set of helper methods for general javascript plugin use.\n */\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    _classCallCheck(this, _default);\n  }\n\n  _createClass(_default, null, [{\n    key: \"getBreakpoint\",\n\n    /**\n     * Get and output a breakpoint using it's key found in config.json\n     * ---\n     * @param {String} key - The key to search for in the breakpoints object\n     * @returns {String} - The pixel value of the breakpoint as a string\n     */\n    value: function getBreakpoint(key) {\n      return _config[\"default\"].breakpoints[key];\n    }\n    /**\n     * Checks if an element has a class or not\n     * ---\n     * @param {Node} el - Element(s) to check class(es) on\n     * @param {String || Array} c - Class(es) to check\n     * @returns {Boolean} - Returns true if class exists, otherwise false\n     */\n\n  }, {\n    key: \"hasClass\",\n    value: function hasClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      return c.some(function (c) {\n        var has = false;\n        el.forEach(function (el) {\n          if (el.classList.contains(c)) {\n            has = true;\n          }\n        });\n        return has;\n      });\n    }\n    /**\n     * Adds a class or classes to an element\n     * ---\n     * @param {Node} el - Element(s) to add class(es) on\n     * @param {String || Array} c - Class(es) to add\n     */\n\n  }, {\n    key: \"addClass\",\n    value: function addClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.add(c);\n        });\n      });\n    }\n    /**\n     * Remove a class or classes from an element\n     * ---\n     * @param {Node} el - Element(s) to remove class(es) from\n     * @param {String || Array} c - Class(es) to remove\n     */\n\n  }, {\n    key: \"removeClass\",\n    value: function removeClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.remove(c);\n        });\n      });\n    }\n    /**\n     * Toggle a class or classes on an element\n     * ---\n     * @param {Node} el - Element(s) to toggle class(es) on\n     * @param {String || Array} c - Class(es) to toggle\n     */\n\n  }, {\n    key: \"toggleClass\",\n    value: function toggleClass(el, c) {\n      el = el.forEach ? el : this.toArray(el);\n      c = this.toArray(c);\n      el.forEach(function (el) {\n        c.forEach(function (c) {\n          el.classList.toggle(c);\n        });\n      });\n    }\n    /**\n     * Find the closest parent element based on class. This is different from the\n     * native .closest() method in that it doesn't check the current element.\n     * ---\n     * @param {Node} el - Element to start search on\n     * @param {String || Array} c - Class(es) to check for\n     * @return {Node} - Closest parent element\n     */\n\n  }, {\n    key: \"closest\",\n    value: function closest(el, c) {\n      while ((el = el.parentElement) && !this.hasClass(el, c)) {\n        return el;\n      }\n    }\n    /**\n     * Converts a string or object to an array. If an array is passed, it's\n     * returned as is. Anything else is returned as an array.\n     * ---\n     * @param {Object} item - String or object to convert to an array\n     * @return {Array} - Return the converted array\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray(item) {\n      var array = [];\n\n      if (Array.isArray(item)) {\n        array = item;\n      } else {\n        array.push(item);\n      }\n\n      return array;\n    }\n    /**\n     * Merge two or more objects. Returns a new object. Set the first argument\n     * to `true` for a deep or recursive merge.\n     * ---\n     * @param {Boolean} [Optional] - If true, do a deep (or recursive) merge\n     * @param {Object} - The objects to merge together; each overriding the next\n     * @returns {Object} - Merged values of defaults and options\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (_extend) {\n      function extend() {\n        return _extend.apply(this, arguments);\n      }\n\n      extend.toString = function () {\n        return _extend.toString();\n      };\n\n      return extend;\n    }(function () {\n      var extended = {};\n      var deep = false;\n      var i = 0;\n      var length = arguments.length;\n\n      if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n        deep = arguments[0];\n        i++;\n      }\n\n      var merge = function merge(obj) {\n        for (var prop in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n              extended[prop] = extend(true, extended[prop], obj[prop]);\n            } else {\n              extended[prop] = obj[prop];\n            }\n          }\n        }\n      };\n\n      for (; i < length; i++) {\n        var obj = arguments[i];\n        merge(obj);\n      }\n\n      return extended;\n    })\n  }]);\n\n  return _default;\n}();\n\nexports[\"default\"] = _default;\n\n},{\"config\":22}]},{},[1])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvYXBwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL2FkZC1hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy9maWx0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvZnV6enktc2VhcmNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL2l0ZW0uanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvcGFnaW5hdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy9wYXJzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy9zZWFyY2guanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvc29ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy90ZW1wbGF0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvdXRpbHMvY2xhc3Nlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXN0LmpzL3NyYy91dGlscy9ldmVudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvdXRpbHMvZXh0ZW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL2Z1enp5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL2dldC1hdHRyaWJ1dGUuanMiLCIuLi9ub2RlX21vZHVsZXMvbGlzdC5qcy9zcmMvdXRpbHMvZ2V0LWJ5LWNsYXNzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL2luZGV4LW9mLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL3RvLWFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpc3QuanMvc3JjL3V0aWxzL3RvLXN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zdHJpbmctbmF0dXJhbC1jb21wYXJlL25hdHVyYWwtY29tcGFyZS5qcyIsIi4uL3NyYy9qcy9jb25maWcuanNvbiIsIi4uL3NyYy9qcy9kaXNtaXNzaWJsZS5qcyIsIi4uL3NyYy9qcy9kcmF3ZXIuanMiLCIuLi9zcmMvanMvbW9kYWwuanMiLCIuLi9zcmMvanMvdG9nZ2xlLmpzIiwiLi4vc3JjL2pzL3V0aWxpdHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTSxXQUFXLEdBQUcsSUFBSSx1QkFBSixFQUFwQjtBQUNBLElBQU0sTUFBTSxHQUFHLElBQUksa0JBQUosRUFBZjtBQUNBLElBQU0sS0FBSyxHQUFHLElBQUksaUJBQUosRUFBZDtBQUNBLElBQU0sTUFBTSxHQUFHLElBQUksa0JBQUosRUFBZjtBQUVBOzs7O0FBSUEsUUFBUSxDQUFDLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLFlBQVc7QUFFNUM7QUFDQSxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBcEI7O0FBRUEsTUFBSSxvQkFBRSxRQUFGLENBQVcsT0FBWCxFQUFvQixjQUFwQixDQUFKLEVBQXlDO0FBQ3ZDLElBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxlQUFaO0FBQ0EsSUFBQSxNQUFNLENBQUMsSUFBUDtBQUNEOztBQUVELE1BQUksb0JBQUUsUUFBRixDQUFXLE9BQVgsRUFBb0IsZUFBcEIsQ0FBSixFQUEwQztBQUN4QyxJQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksZ0JBQVo7QUFDQSxJQUFBLE1BQU0sQ0FBQyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSSxvQkFBRSxRQUFGLENBQVcsT0FBWCxFQUFvQixnQkFBcEIsQ0FBSixFQUEyQztBQUN6QyxJQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksaUJBQVo7QUFDQSxJQUFBLE1BQU0sQ0FBQyxNQUFQO0FBQ0Q7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RUQsYUFBTyxRQUFQO0FBQ0QsSyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCB1IGZyb20gJ3V0aWxpdHknXG5pbXBvcnQgRGlzbWlzc2libGUgZnJvbSAnZGlzbWlzc2libGUnXG5pbXBvcnQgRHJhd2VyIGZyb20gJ2RyYXdlcidcbmltcG9ydCBNb2RhbCBmcm9tICdtb2RhbCdcbmltcG9ydCBUb2dnbGUgZnJvbSAndG9nZ2xlJ1xuaW1wb3J0IGxpc3RqcyBmcm9tICdsaXN0LmpzJ1xuXG5jb25zdCBkaXNtaXNzaWJsZSA9IG5ldyBEaXNtaXNzaWJsZVxuY29uc3QgZHJhd2VyID0gbmV3IERyYXdlcigpXG5jb25zdCBtb2RhbCA9IG5ldyBNb2RhbCgpXG5jb25zdCB0b2dnbGUgPSBuZXcgVG9nZ2xlKClcblxuLyoqXG4gKiBHZW5lcmFsIGV2ZW50IHRyaWdnZXIgZm9yIHRlc3RpbmdcbiAqL1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXG4gIC8vIEdldCB0aGUgZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgZXZlbnRcbiAgbGV0IHRyaWdnZXIgPSBldmVudC50YXJnZXRcblxuICBpZiAodS5oYXNDbGFzcyh0cmlnZ2VyLCAnZHJhd2VyLS1vcGVuJykpIHtcbiAgICBjb25zb2xlLmxvZygnZHJhd2VyLm9wZW4oKScpXG4gICAgZHJhd2VyLm9wZW4oKVxuICB9XG5cbiAgaWYgKHUuaGFzQ2xhc3ModHJpZ2dlciwgJ2RyYXdlci0tY2xvc2UnKSkge1xuICAgIGNvbnNvbGUubG9nKCdkcmF3ZXIuY2xvc2UoKScpXG4gICAgZHJhd2VyLmNsb3NlKClcbiAgfVxuXG4gIGlmICh1Lmhhc0NsYXNzKHRyaWdnZXIsICdkcmF3ZXItLXRvZ2dsZScpKSB7XG4gICAgY29uc29sZS5sb2coJ2RyYXdlci50b2dnbGUoKScpXG4gICAgZHJhd2VyLnRvZ2dsZSgpXG4gIH1cblxuICBpZiAodS5oYXNDbGFzcyh0cmlnZ2VyLCAnZHJhd2VyLS10b2dnbGUtZXhhbXBsZScpKSB7XG4gICAgY29uc29sZS5sb2coJ2RyYXdlci50b2dnbGUoXCIjZHJhd2VyLWV4YW1wbGVcIiknKVxuICAgIGRyYXdlci50b2dnbGUoJyNkcmF3ZXItZXhhbXBsZScpXG4gIH1cblxuICBpZiAodS5oYXNDbGFzcyh0cmlnZ2VyLCAnZHJhd2VyLS1zd2l0Y2gtZHJhd2VyJykpIHtcbiAgICBjb25zb2xlLmxvZygnZHJhd2VyLnN3aXRjaERyYXdlcigpJylcbiAgICBkcmF3ZXIuc3dpdGNoRHJhd2VyKClcbiAgfVxuXG4gIGlmICh1Lmhhc0NsYXNzKHRyaWdnZXIsICdkcmF3ZXItLXN3aXRjaC1tb2RhbCcpKSB7XG4gICAgY29uc29sZS5sb2coJ2RyYXdlci5zd2l0Y2hNb2RhbCgpJylcbiAgICBkcmF3ZXIuc3dpdGNoTW9kYWwoKVxuICB9XG5cbiAgaWYgKHUuaGFzQ2xhc3ModHJpZ2dlciwgJ2RyYXdlci0tcmVzZXQnKSkge1xuICAgIGNvbnNvbGUubG9nKCdkcmF3ZXIuc3RhdGVSZXNldCgpJylcbiAgICBkcmF3ZXIuc3RhdGVSZXNldCgpXG4gIH1cblxuICBpZiAodS5oYXNDbGFzcyh0cmlnZ2VyLCAnZHJhd2VyLS1zYXZlJykpIHtcbiAgICBjb25zb2xlLmxvZygnZHJhd2VyLnN0YXRlU2F2ZSgpJylcbiAgICBkcmF3ZXIuc3RhdGVTYXZlKClcbiAgfVxuXG59KVxuXG4vKipcbiAqIExpc3QuanNcbiAqIC0tLVxuICogQWRkcyBsaXN0IGZ1bmN0aW9uYWxpdHkgYWxvbmcgd2l0aCBzZWFyY2guXG4gKiBsaXN0LmpzIGRvY3M6IGh0dHA6Ly9saXN0anMuY29tL1xuICovXG5pZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3RqcycpKSB7XG5cbiAgLy8gSW5pdCBvdXIgbGlzdC5qcyBjb21wb25lbnRcbiAgY29uc3QgbGlzdCA9IG5ldyBsaXN0anMoJ2xpc3RqcycsIHtcbiAgICBmdXp6eVNlYXJjaDoge1xuICAgICAgc2VhcmNoQ2xhc3M6ICdzZWFyY2gnLFxuICAgICAgbG9jYXRpb246IDAsXG4gICAgICBkaXN0YW5jZTogMTAwLFxuICAgICAgdGhyZXNob2xkOiAwLjQsXG4gICAgICBtdWx0aVNlYXJjaDogdHJ1ZVxuICAgIH0sXG4gICAgdmFsdWVOYW1lczogW1xuICAgICAgJ25hbWUnLFxuICAgICAgeyBkYXRhOiBbJ2NhdGVnb3J5J10gfVxuICAgIF0sXG4gICAgbGlzdENsYXNzOiAnbWVudSdcbiAgfSlcblxuICAvLyBFbXB0eSBOb3RpY2VcbiAgLy8gRGlzcGxheWVkIHdoZW4gdGhlIHNlYXJjaCByZXR1cm5zIG5vIHJlc3VsdHNcbiAgbGV0IG5vdGljZV9lbXB0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3RpY2VfZW1wdHknKVxuICBsZXQgbm90aWNlX2VtcHR5X3RleHQgPSBub3RpY2VfZW1wdHkucXVlcnlTZWxlY3RvcignLnNlYXJjaF90ZXh0JylcblxuICAvLyBDbGVhciBzZWFyY2ggYnV0dG9uXG4gIGxldCBmaWx0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyJylcbiAgbGV0IHNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXIgLnNlYXJjaCcpXG4gIGxldCBzZWFyY2hfY2xlYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyIC5zZWFyY2hfY2xlYXInKVxuXG4gIC8vIE9uIHNlYXJjaCBjb21wbGV0ZSBjYWxsYmFja1xuICBsaXN0Lm9uKCdzZWFyY2hDb21wbGV0ZScsICgpID0+IHtcblxuICAgIC8vIFVwZGF0ZSB0aGUgc2VhcmNoIHRleHQgaW4gZW1wdHkgbm90aWNlXG4gICAgbGV0IHZhbHVlID0gc2VhcmNoLnZhbHVlXG4gICAgbm90aWNlX2VtcHR5X3RleHQuaW5uZXJIVE1MID0gdmFsdWVcblxuICAgIC8vIFNob3cgY2xlYXIgc2VhcmNoIGJ1dHRvbiBpZiBhIHZhbHVlIHRoZXJlIGlzIHNvbWV0aGluZyBpbiBzZWFyY2hcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHUuYWRkQ2xhc3MoZmlsdGVyLCAnaXMtYWN0aXZlJylcbiAgICAgIHUuYWRkQ2xhc3Moc2VhcmNoLCAnaXMtYWN0aXZlJylcbiAgICAgIHUucmVtb3ZlQ2xhc3Moc2VhcmNoX2NsZWFyLCAnZF9ub25lJylcbiAgICB9IGVsc2Uge1xuICAgICAgdS5yZW1vdmVDbGFzcyhmaWx0ZXIsICdpcy1hY3RpdmUnKVxuICAgICAgdS5yZW1vdmVDbGFzcyhzZWFyY2gsICdpcy1hY3RpdmUnKVxuICAgICAgdS5hZGRDbGFzcyhzZWFyY2hfY2xlYXIsICdkX25vbmUnKVxuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBub3RpY2UgZGVwZW5kaW5nIG9uIHRoZSBudW1iZXIgb2YgdmlzaWJsZSBpdGVtc1xuICAgIGlmIChsaXN0LnZpc2libGVJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB1LmFkZENsYXNzKG5vdGljZV9lbXB0eSwgJ2Rfbm9uZScpXG4gICAgfSBlbHNlIHtcbiAgICAgIHUucmVtb3ZlQ2xhc3Mobm90aWNlX2VtcHR5LCAnZF9ub25lJylcbiAgICB9XG4gIH0pXG5cbiAgLy8gQ2xpY2sgZXZlbnRzIGZvciBjYXRlZ29yeSBhbmQgY2xlYXJzXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGxldCB0cmlnZ2VyX3NlYXJjaF9jbGVhciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuc2VhcmNoX2NsZWFyJylcbiAgICBsZXQgdHJpZ2dlcl9zZWFyY2hfY2F0ID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5jYXRlZ29yeScpXG5cbiAgICBpZiAodHJpZ2dlcl9zZWFyY2hfY2xlYXIpIHtcbiAgICAgIHNlYXJjaC52YWx1ZSA9ICcnXG4gICAgICBsaXN0LnNlYXJjaCgpXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgaWYgKHRyaWdnZXJfc2VhcmNoX2NhdCkge1xuICAgICAgc2VhcmNoLnZhbHVlID0gdHJpZ2dlcl9zZWFyY2hfY2F0LmRhdGFzZXQuY2F0ZWdvcnlcbiAgICAgIGxpc3Quc2VhcmNoKHNlYXJjaC52YWx1ZSlcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgfSwgZmFsc2UpXG5cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCkge1xuICB2YXIgYWRkQXN5bmMgPSBmdW5jdGlvbih2YWx1ZXMsIGNhbGxiYWNrLCBpdGVtcykge1xuICAgIHZhciB2YWx1ZXNUb0FkZCA9IHZhbHVlcy5zcGxpY2UoMCwgNTApO1xuICAgIGl0ZW1zID0gaXRlbXMgfHwgW107XG4gICAgaXRlbXMgPSBpdGVtcy5jb25jYXQobGlzdC5hZGQodmFsdWVzVG9BZGQpKTtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFkZEFzeW5jKHZhbHVlcywgY2FsbGJhY2ssIGl0ZW1zKTtcbiAgICAgIH0sIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnVwZGF0ZSgpO1xuICAgICAgY2FsbGJhY2soaXRlbXMpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGFkZEFzeW5jO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCkge1xuXG4gIC8vIEFkZCBoYW5kbGVyc1xuICBsaXN0LmhhbmRsZXJzLmZpbHRlclN0YXJ0ID0gbGlzdC5oYW5kbGVycy5maWx0ZXJTdGFydCB8fCBbXTtcbiAgbGlzdC5oYW5kbGVycy5maWx0ZXJDb21wbGV0ZSA9IGxpc3QuaGFuZGxlcnMuZmlsdGVyQ29tcGxldGUgfHwgW107XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZpbHRlckZ1bmN0aW9uKSB7XG4gICAgbGlzdC50cmlnZ2VyKCdmaWx0ZXJTdGFydCcpO1xuICAgIGxpc3QuaSA9IDE7IC8vIFJlc2V0IHBhZ2luZ1xuICAgIGxpc3QucmVzZXQuZmlsdGVyKCk7XG4gICAgaWYgKGZpbHRlckZ1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxpc3QuZmlsdGVyZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5maWx0ZXJlZCA9IHRydWU7XG4gICAgICB2YXIgaXMgPSBsaXN0Lml0ZW1zO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gaXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICB2YXIgaXRlbSA9IGlzW2ldO1xuICAgICAgICBpZiAoZmlsdGVyRnVuY3Rpb24oaXRlbSkpIHtcbiAgICAgICAgICBpdGVtLmZpbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtLmZpbHRlcmVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbGlzdC51cGRhdGUoKTtcbiAgICBsaXN0LnRyaWdnZXIoJ2ZpbHRlckNvbXBsZXRlJyk7XG4gICAgcmV0dXJuIGxpc3QudmlzaWJsZUl0ZW1zO1xuICB9O1xufTtcbiIsIlxudmFyIGNsYXNzZXMgPSByZXF1aXJlKCcuL3V0aWxzL2NsYXNzZXMnKSxcbiAgZXZlbnRzID0gcmVxdWlyZSgnLi91dGlscy9ldmVudHMnKSxcbiAgZXh0ZW5kID0gcmVxdWlyZSgnLi91dGlscy9leHRlbmQnKSxcbiAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3V0aWxzL3RvLXN0cmluZycpLFxuICBnZXRCeUNsYXNzID0gcmVxdWlyZSgnLi91dGlscy9nZXQtYnktY2xhc3MnKSxcbiAgZnV6enkgPSByZXF1aXJlKCcuL3V0aWxzL2Z1enp5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICBsb2NhdGlvbjogMCxcbiAgICBkaXN0YW5jZTogMTAwLFxuICAgIHRocmVzaG9sZDogMC40LFxuICAgIG11bHRpU2VhcmNoOiB0cnVlLFxuICAgIHNlYXJjaENsYXNzOiAnZnV6enktc2VhcmNoJ1xuICB9LCBvcHRpb25zKTtcblxuXG5cbiAgdmFyIGZ1enp5U2VhcmNoID0ge1xuICAgIHNlYXJjaDogZnVuY3Rpb24oc2VhcmNoU3RyaW5nLCBjb2x1bW5zKSB7XG4gICAgICAvLyBTdWJzdHJhY3QgYXJndW1lbnRzIGZyb20gdGhlIHNlYXJjaFN0cmluZyBvciBwdXQgc2VhcmNoU3RyaW5nIGFzIG9ubHkgYXJndW1lbnRcbiAgICAgIHZhciBzZWFyY2hBcmd1bWVudHMgPSBvcHRpb25zLm11bHRpU2VhcmNoID8gc2VhcmNoU3RyaW5nLnJlcGxhY2UoLyArJC8sICcnKS5zcGxpdCgvICsvKSA6IFtzZWFyY2hTdHJpbmddO1xuXG4gICAgICBmb3IgKHZhciBrID0gMCwga2wgPSBsaXN0Lml0ZW1zLmxlbmd0aDsgayA8IGtsOyBrKyspIHtcbiAgICAgICAgZnV6enlTZWFyY2guaXRlbShsaXN0Lml0ZW1zW2tdLCBjb2x1bW5zLCBzZWFyY2hBcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXRlbTogZnVuY3Rpb24oaXRlbSwgY29sdW1ucywgc2VhcmNoQXJndW1lbnRzKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNlYXJjaEFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZm91bmRBcmd1bWVudCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSBjb2x1bW5zLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICBpZiAoZnV6enlTZWFyY2gudmFsdWVzKGl0ZW0udmFsdWVzKCksIGNvbHVtbnNbal0sIHNlYXJjaEFyZ3VtZW50c1tpXSkpIHtcbiAgICAgICAgICAgIGZvdW5kQXJndW1lbnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZighZm91bmRBcmd1bWVudCkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0ZW0uZm91bmQgPSBmb3VuZDtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24odmFsdWVzLCB2YWx1ZSwgc2VhcmNoQXJndW1lbnQpIHtcbiAgICAgIGlmICh2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gdG9TdHJpbmcodmFsdWVzW3ZhbHVlXSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoZnV6enkodGV4dCwgc2VhcmNoQXJndW1lbnQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cblxuICBldmVudHMuYmluZChnZXRCeUNsYXNzKGxpc3QubGlzdENvbnRhaW5lciwgb3B0aW9ucy5zZWFyY2hDbGFzcyksICdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50OyAvLyBJRSBoYXZlIHNyY0VsZW1lbnRcbiAgICBsaXN0LnNlYXJjaCh0YXJnZXQudmFsdWUsIGZ1enp5U2VhcmNoLnNlYXJjaCk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihzdHIsIGNvbHVtbnMpIHtcbiAgICBsaXN0LnNlYXJjaChzdHIsIGNvbHVtbnMsIGZ1enp5U2VhcmNoLnNlYXJjaCk7XG4gIH07XG59O1xuIiwidmFyIG5hdHVyYWxTb3J0ID0gcmVxdWlyZSgnc3RyaW5nLW5hdHVyYWwtY29tcGFyZScpLFxuICBnZXRCeUNsYXNzID0gcmVxdWlyZSgnLi91dGlscy9nZXQtYnktY2xhc3MnKSxcbiAgZXh0ZW5kID0gcmVxdWlyZSgnLi91dGlscy9leHRlbmQnKSxcbiAgaW5kZXhPZiA9IHJlcXVpcmUoJy4vdXRpbHMvaW5kZXgtb2YnKSxcbiAgZXZlbnRzID0gcmVxdWlyZSgnLi91dGlscy9ldmVudHMnKSxcbiAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3V0aWxzL3RvLXN0cmluZycpLFxuICBjbGFzc2VzID0gcmVxdWlyZSgnLi91dGlscy9jbGFzc2VzJyksXG4gIGdldEF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0LWF0dHJpYnV0ZScpLFxuICB0b0FycmF5ID0gcmVxdWlyZSgnLi91dGlscy90by1hcnJheScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlkLCBvcHRpb25zLCB2YWx1ZXMpIHtcblxuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgaW5pdCxcbiAgICBJdGVtID0gcmVxdWlyZSgnLi9pdGVtJykoc2VsZiksXG4gICAgYWRkQXN5bmMgPSByZXF1aXJlKCcuL2FkZC1hc3luYycpKHNlbGYpLFxuICAgIGluaXRQYWdpbmF0aW9uID0gcmVxdWlyZSgnLi9wYWdpbmF0aW9uJykoc2VsZik7XG5cbiAgaW5pdCA9IHtcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmxpc3RDbGFzcyAgICAgID0gXCJsaXN0XCI7XG4gICAgICBzZWxmLnNlYXJjaENsYXNzICAgID0gXCJzZWFyY2hcIjtcbiAgICAgIHNlbGYuc29ydENsYXNzICAgICAgPSBcInNvcnRcIjtcbiAgICAgIHNlbGYucGFnZSAgICAgICAgICAgPSAxMDAwMDtcbiAgICAgIHNlbGYuaSAgICAgICAgICAgICAgPSAxO1xuICAgICAgc2VsZi5pdGVtcyAgICAgICAgICA9IFtdO1xuICAgICAgc2VsZi52aXNpYmxlSXRlbXMgICA9IFtdO1xuICAgICAgc2VsZi5tYXRjaGluZ0l0ZW1zICA9IFtdO1xuICAgICAgc2VsZi5zZWFyY2hlZCAgICAgICA9IGZhbHNlO1xuICAgICAgc2VsZi5maWx0ZXJlZCAgICAgICA9IGZhbHNlO1xuICAgICAgc2VsZi5zZWFyY2hDb2x1bW5zICA9IHVuZGVmaW5lZDtcbiAgICAgIHNlbGYuaGFuZGxlcnMgICAgICAgPSB7ICd1cGRhdGVkJzogW10gfTtcbiAgICAgIHNlbGYudmFsdWVOYW1lcyAgICAgPSBbXTtcbiAgICAgIHNlbGYudXRpbHMgICAgICAgICAgPSB7XG4gICAgICAgIGdldEJ5Q2xhc3M6IGdldEJ5Q2xhc3MsXG4gICAgICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgICAgICBpbmRleE9mOiBpbmRleE9mLFxuICAgICAgICBldmVudHM6IGV2ZW50cyxcbiAgICAgICAgdG9TdHJpbmc6IHRvU3RyaW5nLFxuICAgICAgICBuYXR1cmFsU29ydDogbmF0dXJhbFNvcnQsXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIGdldEF0dHJpYnV0ZTogZ2V0QXR0cmlidXRlLFxuICAgICAgICB0b0FycmF5OiB0b0FycmF5XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnV0aWxzLmV4dGVuZChzZWxmLCBvcHRpb25zKTtcblxuICAgICAgc2VsZi5saXN0Q29udGFpbmVyID0gKHR5cGVvZihpZCkgPT09ICdzdHJpbmcnKSA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSA6IGlkO1xuICAgICAgaWYgKCFzZWxmLmxpc3RDb250YWluZXIpIHsgcmV0dXJuOyB9XG4gICAgICBzZWxmLmxpc3QgICAgICAgPSBnZXRCeUNsYXNzKHNlbGYubGlzdENvbnRhaW5lciwgc2VsZi5saXN0Q2xhc3MsIHRydWUpO1xuXG4gICAgICBzZWxmLnBhcnNlICAgICAgICA9IHJlcXVpcmUoJy4vcGFyc2UnKShzZWxmKTtcbiAgICAgIHNlbGYudGVtcGxhdGVyICAgID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXInKShzZWxmKTtcbiAgICAgIHNlbGYuc2VhcmNoICAgICAgID0gcmVxdWlyZSgnLi9zZWFyY2gnKShzZWxmKTtcbiAgICAgIHNlbGYuZmlsdGVyICAgICAgID0gcmVxdWlyZSgnLi9maWx0ZXInKShzZWxmKTtcbiAgICAgIHNlbGYuc29ydCAgICAgICAgID0gcmVxdWlyZSgnLi9zb3J0Jykoc2VsZik7XG4gICAgICBzZWxmLmZ1enp5U2VhcmNoICA9IHJlcXVpcmUoJy4vZnV6enktc2VhcmNoJykoc2VsZiwgb3B0aW9ucy5mdXp6eVNlYXJjaCk7XG5cbiAgICAgIHRoaXMuaGFuZGxlcnMoKTtcbiAgICAgIHRoaXMuaXRlbXMoKTtcbiAgICAgIHRoaXMucGFnaW5hdGlvbigpO1xuXG4gICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgaGFuZGxlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgaGFuZGxlciBpbiBzZWxmLmhhbmRsZXJzKSB7XG4gICAgICAgIGlmIChzZWxmW2hhbmRsZXJdKSB7XG4gICAgICAgICAgc2VsZi5vbihoYW5kbGVyLCBzZWxmW2hhbmRsZXJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaXRlbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5wYXJzZShzZWxmLmxpc3QpO1xuICAgICAgaWYgKHZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlbGYuYWRkKHZhbHVlcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYWdpbmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChvcHRpb25zLnBhZ2luYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgb3B0aW9ucy5wYWdpbmF0aW9uID0gW3t9XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uWzBdID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgIG9wdGlvbnMucGFnaW5hdGlvbiA9IFtvcHRpb25zLnBhZ2luYXRpb25dO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG9wdGlvbnMucGFnaW5hdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgaW5pdFBhZ2luYXRpb24ob3B0aW9ucy5wYWdpbmF0aW9uW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKlxuICAqIFJlLXBhcnNlIHRoZSBMaXN0LCB1c2UgaWYgaHRtbCBoYXZlIGNoYW5nZWRcbiAgKi9cbiAgdGhpcy5yZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5pdGVtcyAgICAgICAgICA9IFtdO1xuICAgIHNlbGYudmlzaWJsZUl0ZW1zICAgPSBbXTtcbiAgICBzZWxmLm1hdGNoaW5nSXRlbXMgID0gW107XG4gICAgc2VsZi5zZWFyY2hlZCAgICAgICA9IGZhbHNlO1xuICAgIHNlbGYuZmlsdGVyZWQgICAgICAgPSBmYWxzZTtcbiAgICBzZWxmLnBhcnNlKHNlbGYubGlzdCk7XG4gIH07XG5cbiAgdGhpcy50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIganNvbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHNlbGYuaXRlbXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAganNvbi5wdXNoKHNlbGYuaXRlbXNbaV0udmFsdWVzKCkpO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfTtcblxuXG4gIC8qXG4gICogQWRkIG9iamVjdCB0byBsaXN0XG4gICovXG4gIHRoaXMuYWRkID0gZnVuY3Rpb24odmFsdWVzLCBjYWxsYmFjaykge1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgYWRkQXN5bmModmFsdWVzLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBhZGRlZCA9IFtdLFxuICAgICAgbm90Q3JlYXRlID0gZmFsc2U7XG4gICAgaWYgKHZhbHVlc1swXSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHZhbHVlcyA9IFt2YWx1ZXNdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB2YWx1ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBudWxsO1xuICAgICAgbm90Q3JlYXRlID0gKHNlbGYuaXRlbXMubGVuZ3RoID4gc2VsZi5wYWdlKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIGl0ZW0gPSBuZXcgSXRlbSh2YWx1ZXNbaV0sIHVuZGVmaW5lZCwgbm90Q3JlYXRlKTtcbiAgICAgIHNlbGYuaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIGFkZGVkLnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHNlbGYudXBkYXRlKCk7XG4gICAgcmV0dXJuIGFkZGVkO1xuICB9O1xuXG5cdHRoaXMuc2hvdyA9IGZ1bmN0aW9uKGksIHBhZ2UpIHtcblx0XHR0aGlzLmkgPSBpO1xuXHRcdHRoaXMucGFnZSA9IHBhZ2U7XG5cdFx0c2VsZi51cGRhdGUoKTtcbiAgICByZXR1cm4gc2VsZjtcblx0fTtcblxuICAvKiBSZW1vdmVzIG9iamVjdCBmcm9tIGxpc3QuXG4gICogTG9vcHMgdGhyb3VnaCB0aGUgbGlzdCBhbmQgcmVtb3ZlcyBvYmplY3RzIHdoZXJlXG4gICogcHJvcGVydHkgXCJ2YWx1ZW5hbWVcIiA9PT0gdmFsdWVcbiAgKi9cbiAgdGhpcy5yZW1vdmUgPSBmdW5jdGlvbih2YWx1ZU5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIGZvdW5kID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBzZWxmLml0ZW1zLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGlmIChzZWxmLml0ZW1zW2ldLnZhbHVlcygpW3ZhbHVlTmFtZV0gPT0gdmFsdWUpIHtcbiAgICAgICAgc2VsZi50ZW1wbGF0ZXIucmVtb3ZlKHNlbGYuaXRlbXNbaV0sIG9wdGlvbnMpO1xuICAgICAgICBzZWxmLml0ZW1zLnNwbGljZShpLDEpO1xuICAgICAgICBpbC0tO1xuICAgICAgICBpLS07XG4gICAgICAgIGZvdW5kKys7XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYudXBkYXRlKCk7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9O1xuXG4gIC8qIEdldHMgdGhlIG9iamVjdHMgaW4gdGhlIGxpc3Qgd2hpY2hcbiAgKiBwcm9wZXJ0eSBcInZhbHVlTmFtZVwiID09PSB2YWx1ZVxuICAqL1xuICB0aGlzLmdldCA9IGZ1bmN0aW9uKHZhbHVlTmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbWF0Y2hlZEl0ZW1zID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gc2VsZi5pdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHNlbGYuaXRlbXNbaV07XG4gICAgICBpZiAoaXRlbS52YWx1ZXMoKVt2YWx1ZU5hbWVdID09IHZhbHVlKSB7XG4gICAgICAgIG1hdGNoZWRJdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlZEl0ZW1zO1xuICB9O1xuXG4gIC8qXG4gICogR2V0IHNpemUgb2YgdGhlIGxpc3RcbiAgKi9cbiAgdGhpcy5zaXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuaXRlbXMubGVuZ3RoO1xuICB9O1xuXG4gIC8qXG4gICogUmVtb3ZlcyBhbGwgaXRlbXMgZnJvbSB0aGUgbGlzdFxuICAqL1xuICB0aGlzLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi50ZW1wbGF0ZXIuY2xlYXIoKTtcbiAgICBzZWxmLml0ZW1zID0gW107XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgdGhpcy5vbiA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHNlbGYuaGFuZGxlcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIHRoaXMub2ZmID0gZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSBzZWxmLmhhbmRsZXJzW2V2ZW50XTtcbiAgICB2YXIgaW5kZXggPSBpbmRleE9mKGUsIGNhbGxiYWNrKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICB0aGlzLnRyaWdnZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpID0gc2VsZi5oYW5kbGVyc1tldmVudF0ubGVuZ3RoO1xuICAgIHdoaWxlKGktLSkge1xuICAgICAgc2VsZi5oYW5kbGVyc1tldmVudF1baV0oc2VsZik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIHRoaXMucmVzZXQgPSB7XG4gICAgZmlsdGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpcyA9IHNlbGYuaXRlbXMsXG4gICAgICAgIGlsID0gaXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGlsLS0pIHtcbiAgICAgICAgaXNbaWxdLmZpbHRlcmVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuICAgIHNlYXJjaDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaXMgPSBzZWxmLml0ZW1zLFxuICAgICAgICBpbCA9IGlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpbC0tKSB7XG4gICAgICAgIGlzW2lsXS5mb3VuZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlzID0gc2VsZi5pdGVtcyxcblx0XHRcdGlsID0gaXMubGVuZ3RoO1xuXG4gICAgc2VsZi52aXNpYmxlSXRlbXMgPSBbXTtcbiAgICBzZWxmLm1hdGNoaW5nSXRlbXMgPSBbXTtcbiAgICBzZWxmLnRlbXBsYXRlci5jbGVhcigpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWw7IGkrKykge1xuICAgICAgaWYgKGlzW2ldLm1hdGNoaW5nKCkgJiYgKChzZWxmLm1hdGNoaW5nSXRlbXMubGVuZ3RoKzEpID49IHNlbGYuaSAmJiBzZWxmLnZpc2libGVJdGVtcy5sZW5ndGggPCBzZWxmLnBhZ2UpKSB7XG4gICAgICAgIGlzW2ldLnNob3coKTtcbiAgICAgICAgc2VsZi52aXNpYmxlSXRlbXMucHVzaChpc1tpXSk7XG4gICAgICAgIHNlbGYubWF0Y2hpbmdJdGVtcy5wdXNoKGlzW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNbaV0ubWF0Y2hpbmcoKSkge1xuICAgICAgICBzZWxmLm1hdGNoaW5nSXRlbXMucHVzaChpc1tpXSk7XG4gICAgICAgIGlzW2ldLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzW2ldLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZi50cmlnZ2VyKCd1cGRhdGVkJyk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgaW5pdC5zdGFydCgpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5pdFZhbHVlcywgZWxlbWVudCwgbm90Q3JlYXRlKSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzO1xuXG4gICAgdGhpcy5fdmFsdWVzID0ge307XG5cbiAgICB0aGlzLmZvdW5kID0gZmFsc2U7IC8vIFNob3cgaWYgbGlzdC5zZWFyY2hlZCA9PSB0cnVlIGFuZCB0aGlzLmZvdW5kID09IHRydWVcbiAgICB0aGlzLmZpbHRlcmVkID0gZmFsc2U7Ly8gU2hvdyBpZiBsaXN0LmZpbHRlcmVkID09IHRydWUgYW5kIHRoaXMuZmlsdGVyZWQgPT0gdHJ1ZVxuXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbihpbml0VmFsdWVzLCBlbGVtZW50LCBub3RDcmVhdGUpIHtcbiAgICAgIGlmIChlbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG5vdENyZWF0ZSkge1xuICAgICAgICAgIGl0ZW0udmFsdWVzKGluaXRWYWx1ZXMsIG5vdENyZWF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbS52YWx1ZXMoaW5pdFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW0uZWxtID0gZWxlbWVudDtcbiAgICAgICAgdmFyIHZhbHVlcyA9IGxpc3QudGVtcGxhdGVyLmdldChpdGVtLCBpbml0VmFsdWVzKTtcbiAgICAgICAgaXRlbS52YWx1ZXModmFsdWVzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy52YWx1ZXMgPSBmdW5jdGlvbihuZXdWYWx1ZXMsIG5vdENyZWF0ZSkge1xuICAgICAgaWYgKG5ld1ZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvcih2YXIgbmFtZSBpbiBuZXdWYWx1ZXMpIHtcbiAgICAgICAgICBpdGVtLl92YWx1ZXNbbmFtZV0gPSBuZXdWYWx1ZXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdENyZWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGxpc3QudGVtcGxhdGVyLnNldChpdGVtLCBpdGVtLnZhbHVlcygpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uX3ZhbHVlcztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICBsaXN0LnRlbXBsYXRlci5zaG93KGl0ZW0pO1xuICAgIH07XG5cbiAgICB0aGlzLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxpc3QudGVtcGxhdGVyLmhpZGUoaXRlbSk7XG4gICAgfTtcblxuICAgIHRoaXMubWF0Y2hpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChsaXN0LmZpbHRlcmVkICYmIGxpc3Quc2VhcmNoZWQgJiYgaXRlbS5mb3VuZCAmJiBpdGVtLmZpbHRlcmVkKSB8fFxuICAgICAgICAobGlzdC5maWx0ZXJlZCAmJiAhbGlzdC5zZWFyY2hlZCAmJiBpdGVtLmZpbHRlcmVkKSB8fFxuICAgICAgICAoIWxpc3QuZmlsdGVyZWQgJiYgbGlzdC5zZWFyY2hlZCAmJiBpdGVtLmZvdW5kKSB8fFxuICAgICAgICAoIWxpc3QuZmlsdGVyZWQgJiYgIWxpc3Quc2VhcmNoZWQpXG4gICAgICApO1xuICAgIH07XG5cbiAgICB0aGlzLnZpc2libGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoaXRlbS5lbG0gJiYgKGl0ZW0uZWxtLnBhcmVudE5vZGUgPT0gbGlzdC5saXN0KSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfTtcblxuICAgIGluaXQoaW5pdFZhbHVlcywgZWxlbWVudCwgbm90Q3JlYXRlKTtcbiAgfTtcbn07XG4iLCJ2YXIgY2xhc3NlcyA9IHJlcXVpcmUoJy4vdXRpbHMvY2xhc3NlcycpLFxuICBldmVudHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50cycpLFxuICBMaXN0ID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcblxuICB2YXIgcmVmcmVzaCA9IGZ1bmN0aW9uKHBhZ2luZ0xpc3QsIG9wdGlvbnMpIHtcbiAgICB2YXIgaXRlbSxcbiAgICAgIGwgPSBsaXN0Lm1hdGNoaW5nSXRlbXMubGVuZ3RoLFxuICAgICAgaW5kZXggPSBsaXN0LmksXG4gICAgICBwYWdlID0gbGlzdC5wYWdlLFxuICAgICAgcGFnZXMgPSBNYXRoLmNlaWwobCAvIHBhZ2UpLFxuICAgICAgY3VycmVudFBhZ2UgPSBNYXRoLmNlaWwoKGluZGV4IC8gcGFnZSkpLFxuICAgICAgaW5uZXJXaW5kb3cgPSBvcHRpb25zLmlubmVyV2luZG93IHx8IDIsXG4gICAgICBsZWZ0ID0gb3B0aW9ucy5sZWZ0IHx8IG9wdGlvbnMub3V0ZXJXaW5kb3cgfHwgMCxcbiAgICAgIHJpZ2h0ID0gb3B0aW9ucy5yaWdodCB8fCBvcHRpb25zLm91dGVyV2luZG93IHx8IDA7XG5cbiAgICByaWdodCA9IHBhZ2VzIC0gcmlnaHQ7XG5cbiAgICBwYWdpbmdMaXN0LmNsZWFyKCk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gcGFnZXM7IGkrKykge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IChjdXJyZW50UGFnZSA9PT0gaSkgPyBcImFjdGl2ZVwiIDogXCJcIjtcblxuICAgICAgLy9jb25zb2xlLmxvZyhpLCBsZWZ0LCByaWdodCwgY3VycmVudFBhZ2UsIChjdXJyZW50UGFnZSAtIGlubmVyV2luZG93KSwgKGN1cnJlbnRQYWdlICsgaW5uZXJXaW5kb3cpLCBjbGFzc05hbWUpO1xuXG4gICAgICBpZiAoaXMubnVtYmVyKGksIGxlZnQsIHJpZ2h0LCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpKSB7XG4gICAgICAgIGl0ZW0gPSBwYWdpbmdMaXN0LmFkZCh7XG4gICAgICAgICAgcGFnZTogaSxcbiAgICAgICAgICBkb3R0ZWQ6IGZhbHNlXG4gICAgICAgIH0pWzBdO1xuICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgY2xhc3NlcyhpdGVtLmVsbSkuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkRXZlbnQoaXRlbS5lbG0sIGksIHBhZ2UpO1xuICAgICAgfSBlbHNlIGlmIChpcy5kb3R0ZWQocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdywgcGFnaW5nTGlzdC5zaXplKCkpKSB7XG4gICAgICAgIGl0ZW0gPSBwYWdpbmdMaXN0LmFkZCh7XG4gICAgICAgICAgcGFnZTogXCIuLi5cIixcbiAgICAgICAgICBkb3R0ZWQ6IHRydWVcbiAgICAgICAgfSlbMF07XG4gICAgICAgIGNsYXNzZXMoaXRlbS5lbG0pLmFkZChcImRpc2FibGVkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgaXMgPSB7XG4gICAgbnVtYmVyOiBmdW5jdGlvbihpLCBsZWZ0LCByaWdodCwgY3VycmVudFBhZ2UsIGlubmVyV2luZG93KSB7XG4gICAgICAgcmV0dXJuIHRoaXMubGVmdChpLCBsZWZ0KSB8fCB0aGlzLnJpZ2h0KGksIHJpZ2h0KSB8fCB0aGlzLmlubmVyV2luZG93KGksIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdyk7XG4gICAgfSxcbiAgICBsZWZ0OiBmdW5jdGlvbihpLCBsZWZ0KSB7XG4gICAgICByZXR1cm4gKGkgPD0gbGVmdCk7XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oaSwgcmlnaHQpIHtcbiAgICAgIHJldHVybiAoaSA+IHJpZ2h0KTtcbiAgICB9LFxuICAgIGlubmVyV2luZG93OiBmdW5jdGlvbihpLCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpIHtcbiAgICAgIHJldHVybiAoIGkgPj0gKGN1cnJlbnRQYWdlIC0gaW5uZXJXaW5kb3cpICYmIGkgPD0gKGN1cnJlbnRQYWdlICsgaW5uZXJXaW5kb3cpKTtcbiAgICB9LFxuICAgIGRvdHRlZDogZnVuY3Rpb24ocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdywgY3VycmVudFBhZ2VJdGVtKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3R0ZWRMZWZ0KHBhZ2luZ0xpc3QsIGksIGxlZnQsIHJpZ2h0LCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpIHx8ICh0aGlzLmRvdHRlZFJpZ2h0KHBhZ2luZ0xpc3QsIGksIGxlZnQsIHJpZ2h0LCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3csIGN1cnJlbnRQYWdlSXRlbSkpO1xuICAgIH0sXG4gICAgZG90dGVkTGVmdDogZnVuY3Rpb24ocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdykge1xuICAgICAgcmV0dXJuICgoaSA9PSAobGVmdCArIDEpKSAmJiAhdGhpcy5pbm5lcldpbmRvdyhpLCBjdXJyZW50UGFnZSwgaW5uZXJXaW5kb3cpICYmICF0aGlzLnJpZ2h0KGksIHJpZ2h0KSk7XG4gICAgfSxcbiAgICBkb3R0ZWRSaWdodDogZnVuY3Rpb24ocGFnaW5nTGlzdCwgaSwgbGVmdCwgcmlnaHQsIGN1cnJlbnRQYWdlLCBpbm5lcldpbmRvdywgY3VycmVudFBhZ2VJdGVtKSB7XG4gICAgICBpZiAocGFnaW5nTGlzdC5pdGVtc1tjdXJyZW50UGFnZUl0ZW0tMV0udmFsdWVzKCkuZG90dGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoKGkgPT0gKHJpZ2h0KSkgJiYgIXRoaXMuaW5uZXJXaW5kb3coaSwgY3VycmVudFBhZ2UsIGlubmVyV2luZG93KSAmJiAhdGhpcy5yaWdodChpLCByaWdodCkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgYWRkRXZlbnQgPSBmdW5jdGlvbihlbG0sIGksIHBhZ2UpIHtcbiAgICAgZXZlbnRzLmJpbmQoZWxtLCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICBsaXN0LnNob3coKGktMSkqcGFnZSArIDEsIHBhZ2UpO1xuICAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBwYWdpbmdMaXN0ID0gbmV3IExpc3QobGlzdC5saXN0Q29udGFpbmVyLmlkLCB7XG4gICAgICBsaXN0Q2xhc3M6IG9wdGlvbnMucGFnaW5hdGlvbkNsYXNzIHx8ICdwYWdpbmF0aW9uJyxcbiAgICAgIGl0ZW06IFwiPGxpPjxhIGNsYXNzPSdwYWdlJyBocmVmPSdqYXZhc2NyaXB0OmZ1bmN0aW9uIFooKXtaPVxcXCJcXFwifVooKSc+PC9hPjwvbGk+XCIsXG4gICAgICB2YWx1ZU5hbWVzOiBbJ3BhZ2UnLCAnZG90dGVkJ10sXG4gICAgICBzZWFyY2hDbGFzczogJ3BhZ2luYXRpb24tc2VhcmNoLXRoYXQtaXMtbm90LXN1cHBvc2VkLXRvLWV4aXN0JyxcbiAgICAgIHNvcnRDbGFzczogJ3BhZ2luYXRpb24tc29ydC10aGF0LWlzLW5vdC1zdXBwb3NlZC10by1leGlzdCdcbiAgICB9KTtcblxuICAgIGxpc3Qub24oJ3VwZGF0ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIHJlZnJlc2gocGFnaW5nTGlzdCwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgcmVmcmVzaChwYWdpbmdMaXN0LCBvcHRpb25zKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcblxuICB2YXIgSXRlbSA9IHJlcXVpcmUoJy4vaXRlbScpKGxpc3QpO1xuXG4gIHZhciBnZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKHBhcmVudCkge1xuICAgIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZE5vZGVzLFxuICAgICAgaXRlbXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBub2Rlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAvLyBPbmx5IHRleHRub2RlcyBoYXZlIGEgZGF0YSBhdHRyaWJ1dGVcbiAgICAgIGlmIChub2Rlc1tpXS5kYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaXRlbXMucHVzaChub2Rlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICB2YXIgcGFyc2UgPSBmdW5jdGlvbihpdGVtRWxlbWVudHMsIHZhbHVlTmFtZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBpdGVtRWxlbWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgbGlzdC5pdGVtcy5wdXNoKG5ldyBJdGVtKHZhbHVlTmFtZXMsIGl0ZW1FbGVtZW50c1tpXSkpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHBhcnNlQXN5bmMgPSBmdW5jdGlvbihpdGVtRWxlbWVudHMsIHZhbHVlTmFtZXMpIHtcbiAgICB2YXIgaXRlbXNUb0luZGV4ID0gaXRlbUVsZW1lbnRzLnNwbGljZSgwLCA1MCk7IC8vIFRPRE86IElmIDwgMTAwIGl0ZW1zLCB3aGF0IGhhcHBlbnMgaW4gSUUgZXRjP1xuICAgIHBhcnNlKGl0ZW1zVG9JbmRleCwgdmFsdWVOYW1lcyk7XG4gICAgaWYgKGl0ZW1FbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBwYXJzZUFzeW5jKGl0ZW1FbGVtZW50cywgdmFsdWVOYW1lcyk7XG4gICAgICB9LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC51cGRhdGUoKTtcbiAgICAgIGxpc3QudHJpZ2dlcigncGFyc2VDb21wbGV0ZScpO1xuICAgIH1cbiAgfTtcblxuICBsaXN0LmhhbmRsZXJzLnBhcnNlQ29tcGxldGUgPSBsaXN0LmhhbmRsZXJzLnBhcnNlQ29tcGxldGUgfHwgW107XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtc1RvSW5kZXggPSBnZXRDaGlsZHJlbihsaXN0Lmxpc3QpLFxuICAgICAgdmFsdWVOYW1lcyA9IGxpc3QudmFsdWVOYW1lcztcblxuICAgIGlmIChsaXN0LmluZGV4QXN5bmMpIHtcbiAgICAgIHBhcnNlQXN5bmMoaXRlbXNUb0luZGV4LCB2YWx1ZU5hbWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2UoaXRlbXNUb0luZGV4LCB2YWx1ZU5hbWVzKTtcbiAgICB9XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0KSB7XG4gIHZhciBpdGVtLFxuICAgIHRleHQsXG4gICAgY29sdW1ucyxcbiAgICBzZWFyY2hTdHJpbmcsXG4gICAgY3VzdG9tU2VhcmNoO1xuXG4gIHZhciBwcmVwYXJlID0ge1xuICAgIHJlc2V0TGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICBsaXN0LmkgPSAxO1xuICAgICAgbGlzdC50ZW1wbGF0ZXIuY2xlYXIoKTtcbiAgICAgIGN1c3RvbVNlYXJjaCA9IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAyICYmIGFyZ3NbMV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBjb2x1bW5zID0gYXJnc1sxXTtcbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT0gMiAmJiB0eXBlb2YoYXJnc1sxXSkgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbHVtbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGN1c3RvbVNlYXJjaCA9IGFyZ3NbMV07XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09IDMpIHtcbiAgICAgICAgY29sdW1ucyA9IGFyZ3NbMV07XG4gICAgICAgIGN1c3RvbVNlYXJjaCA9IGFyZ3NbMl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2x1bW5zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0Q29sdW1uczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGlzdC5pdGVtcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGlmIChjb2x1bW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29sdW1ucyA9IChsaXN0LnNlYXJjaENvbHVtbnMgPT09IHVuZGVmaW5lZCkgPyBwcmVwYXJlLnRvQXJyYXkobGlzdC5pdGVtc1swXS52YWx1ZXMoKSkgOiBsaXN0LnNlYXJjaENvbHVtbnM7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRTZWFyY2hTdHJpbmc6IGZ1bmN0aW9uKHMpIHtcbiAgICAgIHMgPSBsaXN0LnV0aWxzLnRvU3RyaW5nKHMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBzID0gcy5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I10vZywgXCJcXFxcJCZcIik7IC8vIEVzY2FwZSByZWd1bGFyIGV4cHJlc3Npb24gY2hhcmFjdGVyc1xuICAgICAgc2VhcmNoU3RyaW5nID0gcztcbiAgICB9LFxuICAgIHRvQXJyYXk6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgdmFyIHRtcENvbHVtbiA9IFtdO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgdG1wQ29sdW1uLnB1c2gobmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG1wQ29sdW1uO1xuICAgIH1cbiAgfTtcbiAgdmFyIHNlYXJjaCA9IHtcbiAgICBsaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwLCBrbCA9IGxpc3QuaXRlbXMubGVuZ3RoOyBrIDwga2w7IGsrKykge1xuICAgICAgICBzZWFyY2guaXRlbShsaXN0Lml0ZW1zW2tdKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGl0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uZm91bmQgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IGNvbHVtbnMubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICBpZiAoc2VhcmNoLnZhbHVlcyhpdGVtLnZhbHVlcygpLCBjb2x1bW5zW2pdKSkge1xuICAgICAgICAgIGl0ZW0uZm91bmQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbih2YWx1ZXMsIGNvbHVtbikge1xuICAgICAgaWYgKHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShjb2x1bW4pKSB7XG4gICAgICAgIHRleHQgPSBsaXN0LnV0aWxzLnRvU3RyaW5nKHZhbHVlc1tjb2x1bW5dKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoKHNlYXJjaFN0cmluZyAhPT0gXCJcIikgJiYgKHRleHQuc2VhcmNoKHNlYXJjaFN0cmluZykgPiAtMSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGlzdC5yZXNldC5zZWFyY2goKTtcbiAgICAgIGxpc3Quc2VhcmNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNlYXJjaE1ldGhvZCA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGxpc3QudHJpZ2dlcignc2VhcmNoU3RhcnQnKTtcblxuICAgIHByZXBhcmUucmVzZXRMaXN0KCk7XG4gICAgcHJlcGFyZS5zZXRTZWFyY2hTdHJpbmcoc3RyKTtcbiAgICBwcmVwYXJlLnNldE9wdGlvbnMoYXJndW1lbnRzKTsgLy8gc3RyLCBjb2xzfHNlYXJjaEZ1bmN0aW9uLCBzZWFyY2hGdW5jdGlvblxuICAgIHByZXBhcmUuc2V0Q29sdW1ucygpO1xuXG4gICAgaWYgKHNlYXJjaFN0cmluZyA9PT0gXCJcIiApIHtcbiAgICAgIHNlYXJjaC5yZXNldCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNlYXJjaGVkID0gdHJ1ZTtcbiAgICAgIGlmIChjdXN0b21TZWFyY2gpIHtcbiAgICAgICAgY3VzdG9tU2VhcmNoKHNlYXJjaFN0cmluZywgY29sdW1ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWFyY2gubGlzdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxpc3QudXBkYXRlKCk7XG4gICAgbGlzdC50cmlnZ2VyKCdzZWFyY2hDb21wbGV0ZScpO1xuICAgIHJldHVybiBsaXN0LnZpc2libGVJdGVtcztcbiAgfTtcblxuICBsaXN0LmhhbmRsZXJzLnNlYXJjaFN0YXJ0ID0gbGlzdC5oYW5kbGVycy5zZWFyY2hTdGFydCB8fCBbXTtcbiAgbGlzdC5oYW5kbGVycy5zZWFyY2hDb21wbGV0ZSA9IGxpc3QuaGFuZGxlcnMuc2VhcmNoQ29tcGxldGUgfHwgW107XG5cbiAgbGlzdC51dGlscy5ldmVudHMuYmluZChsaXN0LnV0aWxzLmdldEJ5Q2xhc3MobGlzdC5saXN0Q29udGFpbmVyLCBsaXN0LnNlYXJjaENsYXNzKSwgJ2tleXVwJywgZnVuY3Rpb24oZSkge1xuICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsIC8vIElFIGhhdmUgc3JjRWxlbWVudFxuICAgICAgYWxyZWFkeUNsZWFyZWQgPSAodGFyZ2V0LnZhbHVlID09PSBcIlwiICYmICFsaXN0LnNlYXJjaGVkKTtcbiAgICBpZiAoIWFscmVhZHlDbGVhcmVkKSB7IC8vIElmIG9uaW5wdXQgYWxyZWFkeSBoYXZlIHJlc2V0dGVkIHRoZSBsaXN0LCBkbyBub3RoaW5nXG4gICAgICBzZWFyY2hNZXRob2QodGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVzZWQgdG8gZGV0ZWN0IGNsaWNrIG9uIEhUTUw1IGNsZWFyIGJ1dHRvblxuICBsaXN0LnV0aWxzLmV2ZW50cy5iaW5kKGxpc3QudXRpbHMuZ2V0QnlDbGFzcyhsaXN0Lmxpc3RDb250YWluZXIsIGxpc3Quc2VhcmNoQ2xhc3MpLCAnaW5wdXQnLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcbiAgICBpZiAodGFyZ2V0LnZhbHVlID09PSBcIlwiKSB7XG4gICAgICBzZWFyY2hNZXRob2QoJycpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHNlYXJjaE1ldGhvZDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcblxuICB2YXIgYnV0dG9ucyA9IHtcbiAgICBlbHM6IHVuZGVmaW5lZCxcbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBidXR0b25zLmVscy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGxpc3QudXRpbHMuY2xhc3NlcyhidXR0b25zLmVsc1tpXSkucmVtb3ZlKCdhc2MnKTtcbiAgICAgICAgbGlzdC51dGlscy5jbGFzc2VzKGJ1dHRvbnMuZWxzW2ldKS5yZW1vdmUoJ2Rlc2MnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldE9yZGVyOiBmdW5jdGlvbihidG4pIHtcbiAgICAgIHZhciBwcmVkZWZpbmVkT3JkZXIgPSBsaXN0LnV0aWxzLmdldEF0dHJpYnV0ZShidG4sICdkYXRhLW9yZGVyJyk7XG4gICAgICBpZiAocHJlZGVmaW5lZE9yZGVyID09IFwiYXNjXCIgfHwgcHJlZGVmaW5lZE9yZGVyID09IFwiZGVzY1wiKSB7XG4gICAgICAgIHJldHVybiBwcmVkZWZpbmVkT3JkZXI7XG4gICAgICB9IGVsc2UgaWYgKGxpc3QudXRpbHMuY2xhc3NlcyhidG4pLmhhcygnZGVzYycpKSB7XG4gICAgICAgIHJldHVybiBcImFzY1wiO1xuICAgICAgfSBlbHNlIGlmIChsaXN0LnV0aWxzLmNsYXNzZXMoYnRuKS5oYXMoJ2FzYycpKSB7XG4gICAgICAgIHJldHVybiBcImRlc2NcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImFzY1wiO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0SW5TZW5zaXRpdmU6IGZ1bmN0aW9uKGJ0biwgb3B0aW9ucykge1xuICAgICAgdmFyIGluc2Vuc2l0aXZlID0gbGlzdC51dGlscy5nZXRBdHRyaWJ1dGUoYnRuLCAnZGF0YS1pbnNlbnNpdGl2ZScpO1xuICAgICAgaWYgKGluc2Vuc2l0aXZlID09PSBcImZhbHNlXCIpIHtcbiAgICAgICAgb3B0aW9ucy5pbnNlbnNpdGl2ZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5pbnNlbnNpdGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRPcmRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gYnV0dG9ucy5lbHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICB2YXIgYnRuID0gYnV0dG9ucy5lbHNbaV07XG4gICAgICAgIGlmIChsaXN0LnV0aWxzLmdldEF0dHJpYnV0ZShidG4sICdkYXRhLXNvcnQnKSAhPT0gb3B0aW9ucy52YWx1ZU5hbWUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlZGVmaW5lZE9yZGVyID0gbGlzdC51dGlscy5nZXRBdHRyaWJ1dGUoYnRuLCAnZGF0YS1vcmRlcicpO1xuICAgICAgICBpZiAocHJlZGVmaW5lZE9yZGVyID09IFwiYXNjXCIgfHwgcHJlZGVmaW5lZE9yZGVyID09IFwiZGVzY1wiKSB7XG4gICAgICAgICAgaWYgKHByZWRlZmluZWRPcmRlciA9PSBvcHRpb25zLm9yZGVyKSB7XG4gICAgICAgICAgICBsaXN0LnV0aWxzLmNsYXNzZXMoYnRuKS5hZGQob3B0aW9ucy5vcmRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3QudXRpbHMuY2xhc3NlcyhidG4pLmFkZChvcHRpb25zLm9yZGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydCA9IGZ1bmN0aW9uKCkge1xuICAgIGxpc3QudHJpZ2dlcignc29ydFN0YXJ0Jyk7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICAgIHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF0uY3VycmVudFRhcmdldCB8fCBhcmd1bWVudHNbMF0uc3JjRWxlbWVudCB8fCB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICBvcHRpb25zLnZhbHVlTmFtZSA9IGxpc3QudXRpbHMuZ2V0QXR0cmlidXRlKHRhcmdldCwgJ2RhdGEtc29ydCcpO1xuICAgICAgYnV0dG9ucy5nZXRJblNlbnNpdGl2ZSh0YXJnZXQsIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5vcmRlciA9IGJ1dHRvbnMuZ2V0T3JkZXIodGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1sxXSB8fCBvcHRpb25zO1xuICAgICAgb3B0aW9ucy52YWx1ZU5hbWUgPSBhcmd1bWVudHNbMF07XG4gICAgICBvcHRpb25zLm9yZGVyID0gb3B0aW9ucy5vcmRlciB8fCBcImFzY1wiO1xuICAgICAgb3B0aW9ucy5pbnNlbnNpdGl2ZSA9ICh0eXBlb2Ygb3B0aW9ucy5pbnNlbnNpdGl2ZSA9PSBcInVuZGVmaW5lZFwiKSA/IHRydWUgOiBvcHRpb25zLmluc2Vuc2l0aXZlO1xuICAgIH1cblxuICAgIGJ1dHRvbnMuY2xlYXIoKTtcbiAgICBidXR0b25zLnNldE9yZGVyKG9wdGlvbnMpO1xuXG5cbiAgICAvLyBjYXNlSW5zZW5zaXRpdmVcbiAgICAvLyBhbHBoYWJldFxuICAgIHZhciBjdXN0b21Tb3J0RnVuY3Rpb24gPSAob3B0aW9ucy5zb3J0RnVuY3Rpb24gfHwgbGlzdC5zb3J0RnVuY3Rpb24gfHwgbnVsbCksXG4gICAgICAgIG11bHRpID0gKChvcHRpb25zLm9yZGVyID09PSAnZGVzYycpID8gLTEgOiAxKSxcbiAgICAgICAgc29ydEZ1bmN0aW9uO1xuXG4gICAgaWYgKGN1c3RvbVNvcnRGdW5jdGlvbikge1xuICAgICAgc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24oaXRlbUEsIGl0ZW1CKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21Tb3J0RnVuY3Rpb24oaXRlbUEsIGl0ZW1CLCBvcHRpb25zKSAqIG11bHRpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgc29ydEZ1bmN0aW9uID0gZnVuY3Rpb24oaXRlbUEsIGl0ZW1CKSB7XG4gICAgICAgIHZhciBzb3J0ID0gbGlzdC51dGlscy5uYXR1cmFsU29ydDtcbiAgICAgICAgc29ydC5hbHBoYWJldCA9IGxpc3QuYWxwaGFiZXQgfHwgb3B0aW9ucy5hbHBoYWJldCB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghc29ydC5hbHBoYWJldCAmJiBvcHRpb25zLmluc2Vuc2l0aXZlKSB7XG4gICAgICAgICAgc29ydCA9IGxpc3QudXRpbHMubmF0dXJhbFNvcnQuY2FzZUluc2Vuc2l0aXZlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3J0KGl0ZW1BLnZhbHVlcygpW29wdGlvbnMudmFsdWVOYW1lXSwgaXRlbUIudmFsdWVzKClbb3B0aW9ucy52YWx1ZU5hbWVdKSAqIG11bHRpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBsaXN0Lml0ZW1zLnNvcnQoc29ydEZ1bmN0aW9uKTtcbiAgICBsaXN0LnVwZGF0ZSgpO1xuICAgIGxpc3QudHJpZ2dlcignc29ydENvbXBsZXRlJyk7XG4gIH07XG5cbiAgLy8gQWRkIGhhbmRsZXJzXG4gIGxpc3QuaGFuZGxlcnMuc29ydFN0YXJ0ID0gbGlzdC5oYW5kbGVycy5zb3J0U3RhcnQgfHwgW107XG4gIGxpc3QuaGFuZGxlcnMuc29ydENvbXBsZXRlID0gbGlzdC5oYW5kbGVycy5zb3J0Q29tcGxldGUgfHwgW107XG5cbiAgYnV0dG9ucy5lbHMgPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MobGlzdC5saXN0Q29udGFpbmVyLCBsaXN0LnNvcnRDbGFzcyk7XG4gIGxpc3QudXRpbHMuZXZlbnRzLmJpbmQoYnV0dG9ucy5lbHMsICdjbGljaycsIHNvcnQpO1xuICBsaXN0Lm9uKCdzZWFyY2hTdGFydCcsIGJ1dHRvbnMuY2xlYXIpO1xuICBsaXN0Lm9uKCdmaWx0ZXJTdGFydCcsIGJ1dHRvbnMuY2xlYXIpO1xuXG4gIHJldHVybiBzb3J0O1xufTtcbiIsInZhciBUZW1wbGF0ZXIgPSBmdW5jdGlvbihsaXN0KSB7XG4gIHZhciBpdGVtU291cmNlLFxuICAgIHRlbXBsYXRlciA9IHRoaXM7XG5cbiAgdmFyIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBpdGVtU291cmNlID0gdGVtcGxhdGVyLmdldEl0ZW1Tb3VyY2UobGlzdC5pdGVtKTtcbiAgICBpZiAoaXRlbVNvdXJjZSkge1xuICAgICAgaXRlbVNvdXJjZSA9IHRlbXBsYXRlci5jbGVhclNvdXJjZUl0ZW0oaXRlbVNvdXJjZSwgbGlzdC52YWx1ZU5hbWVzKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jbGVhclNvdXJjZUl0ZW0gPSBmdW5jdGlvbihlbCwgdmFsdWVOYW1lcykge1xuICAgIGZvcih2YXIgaSA9IDAsIGlsID0gdmFsdWVOYW1lcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICB2YXIgZWxtO1xuICAgICAgaWYgKHZhbHVlTmFtZXNbaV0uZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSB2YWx1ZU5hbWVzW2ldLmRhdGEubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS0nK3ZhbHVlTmFtZXNbaV0uZGF0YVtqXSwgJycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlTmFtZXNbaV0uYXR0ciAmJiB2YWx1ZU5hbWVzW2ldLm5hbWUpIHtcbiAgICAgICAgZWxtID0gbGlzdC51dGlscy5nZXRCeUNsYXNzKGVsLCB2YWx1ZU5hbWVzW2ldLm5hbWUsIHRydWUpO1xuICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSh2YWx1ZU5hbWVzW2ldLmF0dHIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbG0gPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MoZWwsIHZhbHVlTmFtZXNbaV0sIHRydWUpO1xuICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgZWxtLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsbSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xuICB9O1xuXG4gIHRoaXMuZ2V0SXRlbVNvdXJjZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbm9kZXMgPSBsaXN0Lmxpc3QuY2hpbGROb2RlcyxcbiAgICAgICAgaXRlbXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbm9kZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAvLyBPbmx5IHRleHRub2RlcyBoYXZlIGEgZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgaWYgKG5vZGVzW2ldLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBub2Rlc1tpXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKC88dHJbXFxzPl0vZy5leGVjKGl0ZW0pKSB7XG4gICAgICB2YXIgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgICAgdGJvZHkuaW5uZXJIVE1MID0gaXRlbTtcbiAgICAgIHJldHVybiB0Ym9keS5maXJzdENoaWxkO1xuICAgIH0gZWxzZSBpZiAoaXRlbS5pbmRleE9mKFwiPFwiKSAhPT0gLTEpIHtcbiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5pbm5lckhUTUwgPSBpdGVtO1xuICAgICAgcmV0dXJuIGRpdi5maXJzdENoaWxkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobGlzdC5pdGVtKTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICB0aGlzLmdldCA9IGZ1bmN0aW9uKGl0ZW0sIHZhbHVlTmFtZXMpIHtcbiAgICB0ZW1wbGF0ZXIuY3JlYXRlKGl0ZW0pO1xuICAgIHZhciB2YWx1ZXMgPSB7fTtcbiAgICBmb3IodmFyIGkgPSAwLCBpbCA9IHZhbHVlTmFtZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgdmFyIGVsbTtcbiAgICAgIGlmICh2YWx1ZU5hbWVzW2ldLmRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsID0gdmFsdWVOYW1lc1tpXS5kYXRhLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICB2YWx1ZXNbdmFsdWVOYW1lc1tpXS5kYXRhW2pdXSA9IGxpc3QudXRpbHMuZ2V0QXR0cmlidXRlKGl0ZW0uZWxtLCAnZGF0YS0nK3ZhbHVlTmFtZXNbaV0uZGF0YVtqXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodmFsdWVOYW1lc1tpXS5hdHRyICYmIHZhbHVlTmFtZXNbaV0ubmFtZSkge1xuICAgICAgICBlbG0gPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MoaXRlbS5lbG0sIHZhbHVlTmFtZXNbaV0ubmFtZSwgdHJ1ZSk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZU5hbWVzW2ldLm5hbWVdID0gZWxtID8gbGlzdC51dGlscy5nZXRBdHRyaWJ1dGUoZWxtLCB2YWx1ZU5hbWVzW2ldLmF0dHIpIDogXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsbSA9IGxpc3QudXRpbHMuZ2V0QnlDbGFzcyhpdGVtLmVsbSwgdmFsdWVOYW1lc1tpXSwgdHJ1ZSk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZU5hbWVzW2ldXSA9IGVsbSA/IGVsbS5pbm5lckhUTUwgOiBcIlwiO1xuICAgICAgfVxuICAgICAgZWxtID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIHRoaXMuc2V0ID0gZnVuY3Rpb24oaXRlbSwgdmFsdWVzKSB7XG4gICAgdmFyIGdldFZhbHVlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGxpc3QudmFsdWVOYW1lcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGlmIChsaXN0LnZhbHVlTmFtZXNbaV0uZGF0YSkge1xuICAgICAgICAgIHZhciBkYXRhID0gbGlzdC52YWx1ZU5hbWVzW2ldLmRhdGE7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsID0gZGF0YS5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtqXSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBuYW1lIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxpc3QudmFsdWVOYW1lc1tpXS5hdHRyICYmIGxpc3QudmFsdWVOYW1lc1tpXS5uYW1lICYmIGxpc3QudmFsdWVOYW1lc1tpXS5uYW1lID09IG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdC52YWx1ZU5hbWVzW2ldO1xuICAgICAgICB9IGVsc2UgaWYgKGxpc3QudmFsdWVOYW1lc1tpXSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc2V0VmFsdWUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGVsbTtcbiAgICAgIHZhciB2YWx1ZU5hbWUgPSBnZXRWYWx1ZU5hbWUobmFtZSk7XG4gICAgICBpZiAoIXZhbHVlTmFtZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHZhbHVlTmFtZS5kYXRhKSB7XG4gICAgICAgIGl0ZW0uZWxtLnNldEF0dHJpYnV0ZSgnZGF0YS0nK3ZhbHVlTmFtZS5kYXRhLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlTmFtZS5hdHRyICYmIHZhbHVlTmFtZS5uYW1lKSB7XG4gICAgICAgIGVsbSA9IGxpc3QudXRpbHMuZ2V0QnlDbGFzcyhpdGVtLmVsbSwgdmFsdWVOYW1lLm5hbWUsIHRydWUpO1xuICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSh2YWx1ZU5hbWUuYXR0ciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbG0gPSBsaXN0LnV0aWxzLmdldEJ5Q2xhc3MoaXRlbS5lbG0sIHZhbHVlTmFtZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChlbG0pIHtcbiAgICAgICAgICBlbG0uaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsbSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIGlmICghdGVtcGxhdGVyLmNyZWF0ZShpdGVtKSkge1xuICAgICAgZm9yKHZhciB2IGluIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KHYpKSB7XG4gICAgICAgICAgc2V0VmFsdWUodiwgdmFsdWVzW3ZdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5lbG0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXRlbVNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgbGlzdCBuZWVkIHRvIGhhdmUgYXQgbGlzdCBvbmUgaXRlbSBvbiBpbml0IG90aGVyd2lzZSB5b3UnbGwgaGF2ZSB0byBhZGQgYSB0ZW1wbGF0ZS5cIik7XG4gICAgfVxuICAgIC8qIElmIGl0ZW0gc291cmNlIGRvZXMgbm90IGV4aXN0cywgdXNlIHRoZSBmaXJzdCBpdGVtIGluIGxpc3QgYXNcbiAgICBzb3VyY2UgZm9yIG5ldyBpdGVtcyAqL1xuICAgIHZhciBuZXdJdGVtID0gaXRlbVNvdXJjZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgbmV3SXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgaXRlbS5lbG0gPSBuZXdJdGVtO1xuICAgIHRlbXBsYXRlci5zZXQoaXRlbSwgaXRlbS52YWx1ZXMoKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmIChpdGVtLmVsbS5wYXJlbnROb2RlID09PSBsaXN0Lmxpc3QpIHtcbiAgICAgIGxpc3QubGlzdC5yZW1vdmVDaGlsZChpdGVtLmVsbSk7XG4gICAgfVxuICB9O1xuICB0aGlzLnNob3cgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgdGVtcGxhdGVyLmNyZWF0ZShpdGVtKTtcbiAgICBsaXN0Lmxpc3QuYXBwZW5kQ2hpbGQoaXRlbS5lbG0pO1xuICB9O1xuICB0aGlzLmhpZGUgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKGl0ZW0uZWxtICE9PSB1bmRlZmluZWQgJiYgaXRlbS5lbG0ucGFyZW50Tm9kZSA9PT0gbGlzdC5saXN0KSB7XG4gICAgICBsaXN0Lmxpc3QucmVtb3ZlQ2hpbGQoaXRlbS5lbG0pO1xuICAgIH1cbiAgfTtcbiAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIC8qIC5pbm5lckhUTUwgPSAnJzsgZnVja3MgdXAgSUUgKi9cbiAgICBpZiAobGlzdC5saXN0Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgd2hpbGUgKGxpc3QubGlzdC5jaGlsZE5vZGVzLmxlbmd0aCA+PSAxKVxuICAgICAge1xuICAgICAgICBsaXN0Lmxpc3QucmVtb3ZlQ2hpbGQobGlzdC5saXN0LmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBpbml0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgcmV0dXJuIG5ldyBUZW1wbGF0ZXIobGlzdCk7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBpbmRleCA9IHJlcXVpcmUoJy4vaW5kZXgtb2YnKTtcblxuLyoqXG4gKiBXaGl0ZXNwYWNlIHJlZ2V4cC5cbiAqL1xuXG52YXIgcmUgPSAvXFxzKy87XG5cbi8qKlxuICogdG9TdHJpbmcgcmVmZXJlbmNlLlxuICovXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogV3JhcCBgZWxgIGluIGEgYENsYXNzTGlzdGAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHJldHVybiB7Q2xhc3NMaXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVsKXtcbiAgcmV0dXJuIG5ldyBDbGFzc0xpc3QoZWwpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IENsYXNzTGlzdCBmb3IgYGVsYC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBDbGFzc0xpc3QoZWwpIHtcbiAgaWYgKCFlbCB8fCAhZWwubm9kZVR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgRE9NIGVsZW1lbnQgcmVmZXJlbmNlIGlzIHJlcXVpcmVkJyk7XG4gIH1cbiAgdGhpcy5lbCA9IGVsO1xuICB0aGlzLmxpc3QgPSBlbC5jbGFzc0xpc3Q7XG59XG5cbi8qKlxuICogQWRkIGNsYXNzIGBuYW1lYCBpZiBub3QgYWxyZWFkeSBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtDbGFzc0xpc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNsYXNzTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24obmFtZSl7XG4gIC8vIGNsYXNzTGlzdFxuICBpZiAodGhpcy5saXN0KSB7XG4gICAgdGhpcy5saXN0LmFkZChuYW1lKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGZhbGxiYWNrXG4gIHZhciBhcnIgPSB0aGlzLmFycmF5KCk7XG4gIHZhciBpID0gaW5kZXgoYXJyLCBuYW1lKTtcbiAgaWYgKCF+aSkgYXJyLnB1c2gobmFtZSk7XG4gIHRoaXMuZWwuY2xhc3NOYW1lID0gYXJyLmpvaW4oJyAnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyBgbmFtZWAgd2hlbiBwcmVzZW50LCBvclxuICogcGFzcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byByZW1vdmVcbiAqIGFueSB3aGljaCBtYXRjaC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IG5hbWVcbiAqIEByZXR1cm4ge0NsYXNzTGlzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ2xhc3NMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihuYW1lKXtcbiAgLy8gY2xhc3NMaXN0XG4gIGlmICh0aGlzLmxpc3QpIHtcbiAgICB0aGlzLmxpc3QucmVtb3ZlKG5hbWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZmFsbGJhY2tcbiAgdmFyIGFyciA9IHRoaXMuYXJyYXkoKTtcbiAgdmFyIGkgPSBpbmRleChhcnIsIG5hbWUpO1xuICBpZiAofmkpIGFyci5zcGxpY2UoaSwgMSk7XG4gIHRoaXMuZWwuY2xhc3NOYW1lID0gYXJyLmpvaW4oJyAnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogVG9nZ2xlIGNsYXNzIGBuYW1lYCwgY2FuIGZvcmNlIHN0YXRlIHZpYSBgZm9yY2VgLlxuICpcbiAqIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgY2xhc3NMaXN0LCBidXQgZG8gbm90IHN1cHBvcnQgYGZvcmNlYCB5ZXQsXG4gKiB0aGUgbWlzdGFrZSB3aWxsIGJlIGRldGVjdGVkIGFuZCBjb3JyZWN0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZm9yY2VcbiAqIEByZXR1cm4ge0NsYXNzTGlzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ2xhc3NMaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbihuYW1lLCBmb3JjZSl7XG4gIC8vIGNsYXNzTGlzdFxuICBpZiAodGhpcy5saXN0KSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBmb3JjZSkge1xuICAgICAgaWYgKGZvcmNlICE9PSB0aGlzLmxpc3QudG9nZ2xlKG5hbWUsIGZvcmNlKSkge1xuICAgICAgICB0aGlzLmxpc3QudG9nZ2xlKG5hbWUpOyAvLyB0b2dnbGUgYWdhaW4gdG8gY29ycmVjdFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxpc3QudG9nZ2xlKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGZhbGxiYWNrXG4gIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZm9yY2UpIHtcbiAgICBpZiAoIWZvcmNlKSB7XG4gICAgICB0aGlzLnJlbW92ZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGQobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmhhcyhuYW1lKSkge1xuICAgICAgdGhpcy5yZW1vdmUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkKG5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgb2YgY2xhc3Nlcy5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQ2xhc3NMaXN0LnByb3RvdHlwZS5hcnJheSA9IGZ1bmN0aW9uKCl7XG4gIHZhciBjbGFzc05hbWUgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcbiAgdmFyIHN0ciA9IGNsYXNzTmFtZS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gIHZhciBhcnIgPSBzdHIuc3BsaXQocmUpO1xuICBpZiAoJycgPT09IGFyclswXSkgYXJyLnNoaWZ0KCk7XG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGNsYXNzIGBuYW1lYCBpcyBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtDbGFzc0xpc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkNsYXNzTGlzdC5wcm90b3R5cGUuaGFzID1cbkNsYXNzTGlzdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHRoaXMubGlzdCA/IHRoaXMubGlzdC5jb250YWlucyhuYW1lKSA6ICEhIH5pbmRleCh0aGlzLmFycmF5KCksIG5hbWUpO1xufTtcbiIsInZhciBiaW5kID0gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnYXR0YWNoRXZlbnQnLFxuICAgIHVuYmluZCA9IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ2RldGFjaEV2ZW50JyxcbiAgICBwcmVmaXggPSBiaW5kICE9PSAnYWRkRXZlbnRMaXN0ZW5lcicgPyAnb24nIDogJycsXG4gICAgdG9BcnJheSA9IHJlcXVpcmUoJy4vdG8tYXJyYXknKTtcblxuLyoqXG4gKiBCaW5kIGBlbGAgZXZlbnQgYHR5cGVgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCwgTm9kZUxpc3QsIEhUTUxDb2xsZWN0aW9uIG9yIEFycmF5XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gY2FwdHVyZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmJpbmQgPSBmdW5jdGlvbihlbCwgdHlwZSwgZm4sIGNhcHR1cmUpe1xuICBlbCA9IHRvQXJyYXkoZWwpO1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbC5sZW5ndGg7IGkrKyApIHtcbiAgICBlbFtpXVtiaW5kXShwcmVmaXggKyB0eXBlLCBmbiwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVW5iaW5kIGBlbGAgZXZlbnQgYHR5cGVgJ3MgY2FsbGJhY2sgYGZuYC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsLCBOb2RlTGlzdCwgSFRNTENvbGxlY3Rpb24gb3IgQXJyYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtCb29sZWFufSBjYXB0dXJlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudW5iaW5kID0gZnVuY3Rpb24oZWwsIHR5cGUsIGZuLCBjYXB0dXJlKXtcbiAgZWwgPSB0b0FycmF5KGVsKTtcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgZWwubGVuZ3RoOyBpKysgKSB7XG4gICAgZWxbaV1bdW5iaW5kXShwcmVmaXggKyB0eXBlLCBmbiwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gIH1cbn07XG4iLCIvKlxuICogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vc2VnbWVudGlvL2V4dGVuZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kIChvYmplY3QpIHtcbiAgICAvLyBUYWtlcyBhbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIGV4dGVuZGVycy5cbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICAvLyBGb3IgZWFjaCBleHRlbmRlciwgY29weSB0aGVpciBwcm9wZXJ0aWVzIG9uIG91ciBvYmplY3QuXG4gICAgZm9yICh2YXIgaSA9IDAsIHNvdXJjZTsgc291cmNlID0gYXJnc1tpXTsgaSsrKSB7XG4gICAgICAgIGlmICghc291cmNlKSBjb250aW51ZTtcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBvYmplY3RbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0ZXh0LCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgLy8gQXByb3hpbWF0ZWx5IHdoZXJlIGluIHRoZSB0ZXh0IGlzIHRoZSBwYXR0ZXJuIGV4cGVjdGVkIHRvIGJlIGZvdW5kP1xuICAgIHZhciBNYXRjaF9Mb2NhdGlvbiA9IG9wdGlvbnMubG9jYXRpb24gfHwgMDtcblxuICAgIC8vRGV0ZXJtaW5lcyBob3cgY2xvc2UgdGhlIG1hdGNoIG11c3QgYmUgdG8gdGhlIGZ1enp5IGxvY2F0aW9uIChzcGVjaWZpZWQgYWJvdmUpLiBBbiBleGFjdCBsZXR0ZXIgbWF0Y2ggd2hpY2ggaXMgJ2Rpc3RhbmNlJyBjaGFyYWN0ZXJzIGF3YXkgZnJvbSB0aGUgZnV6enkgbG9jYXRpb24gd291bGQgc2NvcmUgYXMgYSBjb21wbGV0ZSBtaXNtYXRjaC4gQSBkaXN0YW5jZSBvZiAnMCcgcmVxdWlyZXMgdGhlIG1hdGNoIGJlIGF0IHRoZSBleGFjdCBsb2NhdGlvbiBzcGVjaWZpZWQsIGEgdGhyZXNob2xkIG9mICcxMDAwJyB3b3VsZCByZXF1aXJlIGEgcGVyZmVjdCBtYXRjaCB0byBiZSB3aXRoaW4gODAwIGNoYXJhY3RlcnMgb2YgdGhlIGZ1enp5IGxvY2F0aW9uIHRvIGJlIGZvdW5kIHVzaW5nIGEgMC44IHRocmVzaG9sZC5cbiAgICB2YXIgTWF0Y2hfRGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlIHx8IDEwMDtcblxuICAgIC8vIEF0IHdoYXQgcG9pbnQgZG9lcyB0aGUgbWF0Y2ggYWxnb3JpdGhtIGdpdmUgdXAuIEEgdGhyZXNob2xkIG9mICcwLjAnIHJlcXVpcmVzIGEgcGVyZmVjdCBtYXRjaCAob2YgYm90aCBsZXR0ZXJzIGFuZCBsb2NhdGlvbiksIGEgdGhyZXNob2xkIG9mICcxLjAnIHdvdWxkIG1hdGNoIGFueXRoaW5nLlxuICAgIHZhciBNYXRjaF9UaHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZCB8fCAwLjQ7XG5cbiAgICBpZiAocGF0dGVybiA9PT0gdGV4dCkgcmV0dXJuIHRydWU7IC8vIEV4YWN0IG1hdGNoXG4gICAgaWYgKHBhdHRlcm4ubGVuZ3RoID4gMzIpIHJldHVybiBmYWxzZTsgLy8gVGhpcyBhbGdvcml0aG0gY2Fubm90IGJlIHVzZWRcblxuICAgIC8vIFNldCBzdGFydGluZyBsb2NhdGlvbiBhdCBiZWdpbm5pbmcgdGV4dCBhbmQgaW5pdGlhbGlzZSB0aGUgYWxwaGFiZXQuXG4gICAgdmFyIGxvYyA9IE1hdGNoX0xvY2F0aW9uLFxuICAgICAgICBzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHEgPSB7fSxcbiAgICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHFbcGF0dGVybi5jaGFyQXQoaSldID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBxW3BhdHRlcm4uY2hhckF0KGkpXSB8PSAxIDw8IChwYXR0ZXJuLmxlbmd0aCAtIGkgLSAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHE7XG4gICAgICAgIH0oKSk7XG5cbiAgICAvLyBDb21wdXRlIGFuZCByZXR1cm4gdGhlIHNjb3JlIGZvciBhIG1hdGNoIHdpdGggZSBlcnJvcnMgYW5kIHggbG9jYXRpb24uXG4gICAgLy8gQWNjZXNzZXMgbG9jIGFuZCBwYXR0ZXJuIHRocm91Z2ggYmVpbmcgYSBjbG9zdXJlLlxuXG4gICAgZnVuY3Rpb24gbWF0Y2hfYml0YXBTY29yZV8oZSwgeCkge1xuICAgICAgICB2YXIgYWNjdXJhY3kgPSBlIC8gcGF0dGVybi5sZW5ndGgsXG4gICAgICAgICAgICBwcm94aW1pdHkgPSBNYXRoLmFicyhsb2MgLSB4KTtcblxuICAgICAgICBpZiAoIU1hdGNoX0Rpc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBEb2RnZSBkaXZpZGUgYnkgemVybyBlcnJvci5cbiAgICAgICAgICAgIHJldHVybiBwcm94aW1pdHkgPyAxLjAgOiBhY2N1cmFjeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjdXJhY3kgKyAocHJveGltaXR5IC8gTWF0Y2hfRGlzdGFuY2UpO1xuICAgIH1cblxuICAgIHZhciBzY29yZV90aHJlc2hvbGQgPSBNYXRjaF9UaHJlc2hvbGQsIC8vIEhpZ2hlc3Qgc2NvcmUgYmV5b25kIHdoaWNoIHdlIGdpdmUgdXAuXG4gICAgICAgIGJlc3RfbG9jID0gdGV4dC5pbmRleE9mKHBhdHRlcm4sIGxvYyk7IC8vIElzIHRoZXJlIGEgbmVhcmJ5IGV4YWN0IG1hdGNoPyAoc3BlZWR1cClcblxuICAgIGlmIChiZXN0X2xvYyAhPSAtMSkge1xuICAgICAgICBzY29yZV90aHJlc2hvbGQgPSBNYXRoLm1pbihtYXRjaF9iaXRhcFNjb3JlXygwLCBiZXN0X2xvYyksIHNjb3JlX3RocmVzaG9sZCk7XG4gICAgICAgIC8vIFdoYXQgYWJvdXQgaW4gdGhlIG90aGVyIGRpcmVjdGlvbj8gKHNwZWVkdXApXG4gICAgICAgIGJlc3RfbG9jID0gdGV4dC5sYXN0SW5kZXhPZihwYXR0ZXJuLCBsb2MgKyBwYXR0ZXJuLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKGJlc3RfbG9jICE9IC0xKSB7XG4gICAgICAgICAgICBzY29yZV90aHJlc2hvbGQgPSBNYXRoLm1pbihtYXRjaF9iaXRhcFNjb3JlXygwLCBiZXN0X2xvYyksIHNjb3JlX3RocmVzaG9sZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXNlIHRoZSBiaXQgYXJyYXlzLlxuICAgIHZhciBtYXRjaG1hc2sgPSAxIDw8IChwYXR0ZXJuLmxlbmd0aCAtIDEpO1xuICAgIGJlc3RfbG9jID0gLTE7XG5cbiAgICB2YXIgYmluX21pbiwgYmluX21pZDtcbiAgICB2YXIgYmluX21heCA9IHBhdHRlcm4ubGVuZ3RoICsgdGV4dC5sZW5ndGg7XG4gICAgdmFyIGxhc3RfcmQ7XG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBwYXR0ZXJuLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgIC8vIFNjYW4gZm9yIHRoZSBiZXN0IG1hdGNoOyBlYWNoIGl0ZXJhdGlvbiBhbGxvd3MgZm9yIG9uZSBtb3JlIGVycm9yLlxuICAgICAgICAvLyBSdW4gYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSBob3cgZmFyIGZyb20gJ2xvYycgd2UgY2FuIHN0cmF5IGF0IHRoaXNcbiAgICAgICAgLy8gZXJyb3IgbGV2ZWwuXG4gICAgICAgIGJpbl9taW4gPSAwO1xuICAgICAgICBiaW5fbWlkID0gYmluX21heDtcbiAgICAgICAgd2hpbGUgKGJpbl9taW4gPCBiaW5fbWlkKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hfYml0YXBTY29yZV8oZCwgbG9jICsgYmluX21pZCkgPD0gc2NvcmVfdGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgYmluX21pbiA9IGJpbl9taWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJpbl9tYXggPSBiaW5fbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmluX21pZCA9IE1hdGguZmxvb3IoKGJpbl9tYXggLSBiaW5fbWluKSAvIDIgKyBiaW5fbWluKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2UgdGhlIHJlc3VsdCBmcm9tIHRoaXMgaXRlcmF0aW9uIGFzIHRoZSBtYXhpbXVtIGZvciB0aGUgbmV4dC5cbiAgICAgICAgYmluX21heCA9IGJpbl9taWQ7XG4gICAgICAgIHZhciBzdGFydCA9IE1hdGgubWF4KDEsIGxvYyAtIGJpbl9taWQgKyAxKTtcbiAgICAgICAgdmFyIGZpbmlzaCA9IE1hdGgubWluKGxvYyArIGJpbl9taWQsIHRleHQubGVuZ3RoKSArIHBhdHRlcm4ubGVuZ3RoO1xuXG4gICAgICAgIHZhciByZCA9IEFycmF5KGZpbmlzaCArIDIpO1xuICAgICAgICByZFtmaW5pc2ggKyAxXSA9ICgxIDw8IGQpIC0gMTtcbiAgICAgICAgZm9yICh2YXIgaiA9IGZpbmlzaDsgaiA+PSBzdGFydDsgai0tKSB7XG4gICAgICAgICAgICAvLyBUaGUgYWxwaGFiZXQgKHMpIGlzIGEgc3BhcnNlIGhhc2gsIHNvIHRoZSBmb2xsb3dpbmcgbGluZSBnZW5lcmF0ZXNcbiAgICAgICAgICAgIC8vIHdhcm5pbmdzLlxuICAgICAgICAgICAgdmFyIGNoYXJNYXRjaCA9IHNbdGV4dC5jaGFyQXQoaiAtIDEpXTtcbiAgICAgICAgICAgIGlmIChkID09PSAwKSB7ICAgIC8vIEZpcnN0IHBhc3M6IGV4YWN0IG1hdGNoLlxuICAgICAgICAgICAgICAgIHJkW2pdID0gKChyZFtqICsgMV0gPDwgMSkgfCAxKSAmIGNoYXJNYXRjaDtcbiAgICAgICAgICAgIH0gZWxzZSB7ICAgIC8vIFN1YnNlcXVlbnQgcGFzc2VzOiBmdXp6eSBtYXRjaC5cbiAgICAgICAgICAgICAgICByZFtqXSA9ICgoKHJkW2ogKyAxXSA8PCAxKSB8IDEpICYgY2hhck1hdGNoKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoKGxhc3RfcmRbaiArIDFdIHwgbGFzdF9yZFtqXSkgPDwgMSkgfCAxKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfcmRbaiArIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJkW2pdICYgbWF0Y2htYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3JlID0gbWF0Y2hfYml0YXBTY29yZV8oZCwgaiAtIDEpO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWF0Y2ggd2lsbCBhbG1vc3QgY2VydGFpbmx5IGJlIGJldHRlciB0aGFuIGFueSBleGlzdGluZyBtYXRjaC5cbiAgICAgICAgICAgICAgICAvLyBCdXQgY2hlY2sgYW55d2F5LlxuICAgICAgICAgICAgICAgIGlmIChzY29yZSA8PSBzY29yZV90aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9sZCB5b3Ugc28uXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlX3RocmVzaG9sZCA9IHNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0X2xvYyA9IGogLSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmVzdF9sb2MgPiBsb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gcGFzc2luZyBsb2MsIGRvbid0IGV4Y2VlZCBvdXIgY3VycmVudCBkaXN0YW5jZSBmcm9tIGxvYy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gTWF0aC5tYXgoMSwgMiAqIGxvYyAtIGJlc3RfbG9jKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgcGFzc2VkIGxvYywgZG93bmhpbGwgZnJvbSBoZXJlIG9uIGluLlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gaG9wZSBmb3IgYSAoYmV0dGVyKSBtYXRjaCBhdCBncmVhdGVyIGVycm9yIGxldmVscy5cbiAgICAgICAgaWYgKG1hdGNoX2JpdGFwU2NvcmVfKGQgKyAxLCBsb2MpID4gc2NvcmVfdGhyZXNob2xkKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBsYXN0X3JkID0gcmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIChiZXN0X2xvYyA8IDApID8gZmFsc2UgOiB0cnVlO1xufTtcbiIsIi8qKlxuICogQSBjcm9zcy1icm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGdldEF0dHJpYnV0ZS5cbiAqIFNvdXJjZSBmb3VuZCBoZXJlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNzU1MzQzLzM2MTMzNyB3cml0dGVuIGJ5IFZpdmluIFBhbGlhdGhcbiAqXG4gKiBSZXR1cm4gdGhlIHZhbHVlIGZvciBgYXR0cmAgYXQgYGVsZW1lbnRgLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZWwsIGF0dHIpIHtcbiAgdmFyIHJlc3VsdCA9IChlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKGF0dHIpKSB8fCBudWxsO1xuICBpZiggIXJlc3VsdCApIHtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRyaWJ1dGVzO1xuICAgIHZhciBsZW5ndGggPSBhdHRycy5sZW5ndGg7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXR0cltpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmKGF0dHJbaV0ubm9kZU5hbWUgPT09IGF0dHIpIHtcbiAgICAgICAgICByZXN1bHQgPSBhdHRyW2ldLm5vZGVWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qKlxuICogQSBjcm9zcy1icm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGdldEVsZW1lbnRzQnlDbGFzcy5cbiAqIEhlYXZpbHkgYmFzZWQgb24gRHVzdGluIERpYXoncyBmdW5jdGlvbjogaHR0cDovL2R1c3RpbmRpYXouY29tL2dldGVsZW1lbnRzYnljbGFzcy5cbiAqXG4gKiBGaW5kIGFsbCBlbGVtZW50cyB3aXRoIGNsYXNzIGBjbGFzc05hbWVgIGluc2lkZSBgY29udGFpbmVyYC5cbiAqIFVzZSBgc2luZ2xlID0gdHJ1ZWAgdG8gaW5jcmVhc2UgcGVyZm9ybWFuY2UgaW4gb2xkZXIgYnJvd3NlcnNcbiAqIHdoZW4gb25seSBvbmUgZWxlbWVudCBpcyBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250YWluZXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2luZ2xlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnZhciBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gZnVuY3Rpb24oY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSkge1xuICBpZiAoc2luZ2xlKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSlbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZSk7XG4gIH1cbn07XG5cbnZhciBxdWVyeVNlbGVjdG9yID0gZnVuY3Rpb24oY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSkge1xuICBjbGFzc05hbWUgPSAnLicgKyBjbGFzc05hbWU7XG4gIGlmIChzaW5nbGUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3NOYW1lKTtcbiAgfVxufTtcblxudmFyIHBvbHlmaWxsID0gZnVuY3Rpb24oY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSkge1xuICB2YXIgY2xhc3NFbGVtZW50cyA9IFtdLFxuICAgIHRhZyA9ICcqJztcblxuICB2YXIgZWxzID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7XG4gIHZhciBlbHNMZW4gPSBlbHMubGVuZ3RoO1xuICB2YXIgcGF0dGVybiA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIitjbGFzc05hbWUrXCIoXFxcXHN8JClcIik7XG4gIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IGVsc0xlbjsgaSsrKSB7XG4gICAgaWYgKCBwYXR0ZXJuLnRlc3QoZWxzW2ldLmNsYXNzTmFtZSkgKSB7XG4gICAgICBpZiAoc2luZ2xlKSB7XG4gICAgICAgIHJldHVybiBlbHNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGFzc0VsZW1lbnRzW2pdID0gZWxzW2ldO1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGFzc0VsZW1lbnRzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb250YWluZXIsIGNsYXNzTmFtZSwgc2luZ2xlLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKChvcHRpb25zLnRlc3QgJiYgb3B0aW9ucy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB8fCAoIW9wdGlvbnMudGVzdCAmJiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuIGdldEVsZW1lbnRzQnlDbGFzc05hbWUoY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSk7XG4gICAgfSBlbHNlIGlmICgob3B0aW9ucy50ZXN0ICYmIG9wdGlvbnMucXVlcnlTZWxlY3RvcikgfHwgKCFvcHRpb25zLnRlc3QgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcikpIHtcbiAgICAgIHJldHVybiBxdWVyeVNlbGVjdG9yKGNvbnRhaW5lciwgY2xhc3NOYW1lLCBzaW5nbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcG9seWZpbGwoY29udGFpbmVyLCBjbGFzc05hbWUsIHNpbmdsZSk7XG4gICAgfVxuICB9O1xufSkoKTtcbiIsInZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07XG4iLCIvKipcbiAqIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL3RpbW94bGV5L3RvLWFycmF5XG4gKlxuICogQ29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCBpbnRvIGFuIGBBcnJheWAuXG4gKiBJZiBgY29sbGVjdGlvbmAgaXMgYWxyZWFkeSBhbiBgQXJyYXlgLCB0aGVuIHdpbGwgcmV0dXJuIGEgY2xvbmUgb2YgYGNvbGxlY3Rpb25gLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkgfCBNaXhlZH0gY29sbGVjdGlvbiBBbiBgQXJyYXlgIG9yIGFycmF5LWxpa2Ugb2JqZWN0IHRvIGNvbnZlcnQgZS5nLiBgYXJndW1lbnRzYCBvciBgTm9kZUxpc3RgXG4gKiBAcmV0dXJuIHtBcnJheX0gTmFpdmUgY29udmVyc2lvbiBvZiBgY29sbGVjdGlvbmAgdG8gYSBuZXcgYEFycmF5YC5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0b0FycmF5KGNvbGxlY3Rpb24pIHtcbiAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uID09PSAndW5kZWZpbmVkJykgcmV0dXJuIFtdO1xuICBpZiAoY29sbGVjdGlvbiA9PT0gbnVsbCkgcmV0dXJuIFtudWxsXTtcbiAgaWYgKGNvbGxlY3Rpb24gPT09IHdpbmRvdykgcmV0dXJuIFt3aW5kb3ddO1xuICBpZiAodHlwZW9mIGNvbGxlY3Rpb24gPT09ICdzdHJpbmcnKSByZXR1cm4gW2NvbGxlY3Rpb25dO1xuICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkgcmV0dXJuIGNvbGxlY3Rpb247XG4gIGlmICh0eXBlb2YgY29sbGVjdGlvbi5sZW5ndGggIT0gJ251bWJlcicpIHJldHVybiBbY29sbGVjdGlvbl07XG4gIGlmICh0eXBlb2YgY29sbGVjdGlvbiA9PT0gJ2Z1bmN0aW9uJyAmJiBjb2xsZWN0aW9uIGluc3RhbmNlb2YgRnVuY3Rpb24pIHJldHVybiBbY29sbGVjdGlvbl07XG5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbGxlY3Rpb24sIGkpIHx8IGkgaW4gY29sbGVjdGlvbikge1xuICAgICAgYXJyLnB1c2goY29sbGVjdGlvbltpXSk7XG4gICAgfVxuICB9XG4gIGlmICghYXJyLmxlbmd0aCkgcmV0dXJuIFtdO1xuICByZXR1cm4gYXJyO1xufTtcblxuZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHMpIHtcbiAgcyA9IChzID09PSB1bmRlZmluZWQpID8gXCJcIiA6IHM7XG4gIHMgPSAocyA9PT0gbnVsbCkgPyBcIlwiIDogcztcbiAgcyA9IHMudG9TdHJpbmcoKTtcbiAgcmV0dXJuIHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQ7XG52YXIgYWxwaGFiZXRJbmRleE1hcDtcbnZhciBhbHBoYWJldEluZGV4TWFwTGVuZ3RoID0gMDtcblxuZnVuY3Rpb24gaXNOdW1iZXJDb2RlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nztcbn1cblxuZnVuY3Rpb24gbmF0dXJhbENvbXBhcmUoYSwgYikge1xuICB2YXIgbGVuZ3RoQSA9IChhICs9ICcnKS5sZW5ndGg7XG4gIHZhciBsZW5ndGhCID0gKGIgKz0gJycpLmxlbmd0aDtcbiAgdmFyIGFJbmRleCA9IDA7XG4gIHZhciBiSW5kZXggPSAwO1xuXG4gIHdoaWxlIChhSW5kZXggPCBsZW5ndGhBICYmIGJJbmRleCA8IGxlbmd0aEIpIHtcbiAgICB2YXIgY2hhckNvZGVBID0gYS5jaGFyQ29kZUF0KGFJbmRleCk7XG4gICAgdmFyIGNoYXJDb2RlQiA9IGIuY2hhckNvZGVBdChiSW5kZXgpO1xuXG4gICAgaWYgKGlzTnVtYmVyQ29kZShjaGFyQ29kZUEpKSB7XG4gICAgICBpZiAoIWlzTnVtYmVyQ29kZShjaGFyQ29kZUIpKSB7XG4gICAgICAgIHJldHVybiBjaGFyQ29kZUEgLSBjaGFyQ29kZUI7XG4gICAgICB9XG5cbiAgICAgIHZhciBudW1TdGFydEEgPSBhSW5kZXg7XG4gICAgICB2YXIgbnVtU3RhcnRCID0gYkluZGV4O1xuXG4gICAgICB3aGlsZSAoY2hhckNvZGVBID09PSA0OCAmJiArK251bVN0YXJ0QSA8IGxlbmd0aEEpIHtcbiAgICAgICAgY2hhckNvZGVBID0gYS5jaGFyQ29kZUF0KG51bVN0YXJ0QSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoY2hhckNvZGVCID09PSA0OCAmJiArK251bVN0YXJ0QiA8IGxlbmd0aEIpIHtcbiAgICAgICAgY2hhckNvZGVCID0gYi5jaGFyQ29kZUF0KG51bVN0YXJ0Qik7XG4gICAgICB9XG5cbiAgICAgIHZhciBudW1FbmRBID0gbnVtU3RhcnRBO1xuICAgICAgdmFyIG51bUVuZEIgPSBudW1TdGFydEI7XG5cbiAgICAgIHdoaWxlIChudW1FbmRBIDwgbGVuZ3RoQSAmJiBpc051bWJlckNvZGUoYS5jaGFyQ29kZUF0KG51bUVuZEEpKSkge1xuICAgICAgICArK251bUVuZEE7XG4gICAgICB9XG4gICAgICB3aGlsZSAobnVtRW5kQiA8IGxlbmd0aEIgJiYgaXNOdW1iZXJDb2RlKGIuY2hhckNvZGVBdChudW1FbmRCKSkpIHtcbiAgICAgICAgKytudW1FbmRCO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlmZmVyZW5jZSA9IG51bUVuZEEgLSBudW1TdGFydEEgLSBudW1FbmRCICsgbnVtU3RhcnRCOyAvLyBudW1BIGxlbmd0aCAtIG51bUIgbGVuZ3RoXG4gICAgICBpZiAoZGlmZmVyZW5jZSkge1xuICAgICAgICByZXR1cm4gZGlmZmVyZW5jZTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKG51bVN0YXJ0QSA8IG51bUVuZEEpIHtcbiAgICAgICAgZGlmZmVyZW5jZSA9IGEuY2hhckNvZGVBdChudW1TdGFydEErKykgLSBiLmNoYXJDb2RlQXQobnVtU3RhcnRCKyspO1xuICAgICAgICBpZiAoZGlmZmVyZW5jZSkge1xuICAgICAgICAgIHJldHVybiBkaWZmZXJlbmNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFJbmRleCA9IG51bUVuZEE7XG4gICAgICBiSW5kZXggPSBudW1FbmRCO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJDb2RlQSAhPT0gY2hhckNvZGVCKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNoYXJDb2RlQSA8IGFscGhhYmV0SW5kZXhNYXBMZW5ndGggJiZcbiAgICAgICAgY2hhckNvZGVCIDwgYWxwaGFiZXRJbmRleE1hcExlbmd0aCAmJlxuICAgICAgICBhbHBoYWJldEluZGV4TWFwW2NoYXJDb2RlQV0gIT09IC0xICYmXG4gICAgICAgIGFscGhhYmV0SW5kZXhNYXBbY2hhckNvZGVCXSAhPT0gLTFcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gYWxwaGFiZXRJbmRleE1hcFtjaGFyQ29kZUFdIC0gYWxwaGFiZXRJbmRleE1hcFtjaGFyQ29kZUJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhckNvZGVBIC0gY2hhckNvZGVCO1xuICAgIH1cblxuICAgICsrYUluZGV4O1xuICAgICsrYkluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGxlbmd0aEEgLSBsZW5ndGhCO1xufVxuXG5uYXR1cmFsQ29tcGFyZS5jYXNlSW5zZW5zaXRpdmUgPSBuYXR1cmFsQ29tcGFyZS5pID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gbmF0dXJhbENvbXBhcmUoKCcnICsgYSkudG9Mb3dlckNhc2UoKSwgKCcnICsgYikudG9Mb3dlckNhc2UoKSk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhuYXR1cmFsQ29tcGFyZSwge1xuICBhbHBoYWJldDoge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWxwaGFiZXQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBhbHBoYWJldCA9IHZhbHVlO1xuICAgICAgYWxwaGFiZXRJbmRleE1hcCA9IFtdO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgaWYgKGFscGhhYmV0KSB7XG4gICAgICAgIGZvciAoOyBpIDwgYWxwaGFiZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhbHBoYWJldEluZGV4TWFwW2FscGhhYmV0LmNoYXJDb2RlQXQoaSldID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYWxwaGFiZXRJbmRleE1hcExlbmd0aCA9IGFscGhhYmV0SW5kZXhNYXAubGVuZ3RoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGFscGhhYmV0SW5kZXhNYXBMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYWxwaGFiZXRJbmRleE1hcFtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWxwaGFiZXRJbmRleE1hcFtpXSA9IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdHVyYWxDb21wYXJlO1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcImJyZWFrcG9pbnRzXCIgOiB7XG4gICAgXCJ4c1wiOiBcIjQ4MHB4XCIsXG4gICAgXCJzbVwiOiBcIjYyMHB4XCIsXG4gICAgXCJtZFwiOiBcIjc2MHB4XCIsXG4gICAgXCJsZ1wiOiBcIjk5MHB4XCIsXG4gICAgXCJ4bFwiOiBcIjEzODBweFwiXG4gIH1cbn1cbiIsImltcG9ydCB1IGZyb20gJy4vdXRpbGl0eS5qcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICd1c2Ugc3RyaWN0J1xuXG4gIGxldCBhcGkgPSB7fVxuICBsZXQgc2V0dGluZ3NcbiAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgdHJpZ2dlcjogJ1tkYXRhLWRpc21pc3NdJyxcbiAgICB0YXJnZXQ6ICdbZGF0YS1kaXNtaXNzaWJsZV0nLFxuICAgIGNsYXNzVG9nZ2xlOiAnZGlzbWlzcydcbiAgfVxuXG4gIGFwaS5pbml0ID0gKG9wdGlvbnMpID0+IHtcbiAgICBzZXR0aW5ncyA9IHUuZXh0ZW5kKCBkZWZhdWx0cywgb3B0aW9ucyB8fCB7fSApXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBydW4sIGZhbHNlKVxuICB9XG5cbiAgYXBpLmRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgc2V0dGluZ3MgPSBudWxsXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBydW4sIGZhbHNlKVxuICB9XG5cbiAgY29uc3QgcnVuID0gKCkgPT4ge1xuICAgIGxldCB0cmlnZ2VyID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3Qoc2V0dGluZ3MudHJpZ2dlcilcbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgbGV0IHRhcmdldCA9IHRyaWdnZXIuY2xvc2VzdChzZXR0aW5ncy50YXJnZXQpXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHUudG9nZ2xlQ2xhc3ModGFyZ2V0LCBzZXR0aW5ncy5jbGFzc1RvZ2dsZSlcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG4gIH1cblxuICBhcGkuaW5pdChvcHRpb25zKVxuICByZXR1cm4gYXBpXG59XG4iLCJpbXBvcnQgdSBmcm9tICcuL3V0aWxpdHkuanMnXG5cbi8qKlxuICogRHJhd2VyIHBsdWdpblxuICogLS0tXG4gKiBBIGNvbnRhaW5lciBjb21wb25lbnQgdGhhdCBzbGlkZXMgaW4gZnJvbSB0aGUgbGVmdCBvciByaWdodC4gSXQgdHlwaWNhbGx5XG4gKiBjb250YWlucyBtZW51cywgc2VhcmNoIG9yIG90aGVyIGNvbnRlbnQgZm9yIHlvdXIgYXBwLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvcHRpb25zKSB7XG5cbiAgJ3VzZSBzdHJpY3QnXG5cbiAgLy8gVGhlIGFwaSB3aGVyZSB3ZSBhc3NpZ24gb3VyIG1ldGhvZHMgdG8gYW5kIHJldHVybiBhZnRlciBydW5uaW5nIGluaXRcbiAgbGV0IGFwaSA9IHt9XG5cbiAgLy8gVGhlIHNldHRpbmdzIG9iamVjdCB3aGljaCB3aWxsIGNvbnRhaW4gb3VyIG1lcmdlZCBvcHRpb25zIGFuZCBkZWZhdWx0cyBvYmpcbiAgbGV0IHNldHRpbmdzXG5cbiAgLy8gVGhlIGRlZmF1bHQgc2V0dGluZ3Mgb2YgdGhlIGNvbXBvbmVudFxuICBjb25zdCBkZWZhdWx0cyA9IHtcblxuICAgIC8vIENsYXNzIG9wdGlvbnNcbiAgICAvLyB7c3RyaW5nfSBUaGUgY2xhc3MgbmFtZSB0byBiZSBzZWFyY2hlZCBmb3Igb3IgdXNlZFxuICAgIGNsYXNzRHJhd2VyOiAnZHJhd2VyX19pdGVtJyxcbiAgICBjbGFzc1RyaWdnZXI6ICdkcmF3ZXJfX3RyaWdnZXInLFxuICAgIGNsYXNzRGlhbG9nOiAnZHJhd2VyX19kaWFsb2cnLFxuICAgIGNsYXNzQWN0aXZlOiAnaXMtYWN0aXZlJyxcblxuICAgIC8vIFRoZSBjbGFzc2VzIHRoYXQgZ2V0IHN3aXRjaGVkIGRlcGVuZGluZyBvbiB0aGUgZWxlbWVudFxuICAgIGNsYXNzU3dpdGNoOiB7XG4gICAgICAnaXRlbSc6IHtcbiAgICAgICAgJ2RyYXdlcic6ICdkcmF3ZXJfX2l0ZW0nLFxuICAgICAgICAnbW9kYWwnOiAnbW9kYWwnXG4gICAgICB9LFxuICAgICAgJ3RyaWdnZXInOiB7XG4gICAgICAgICdkcmF3ZXInOiAnZHJhd2VyX190cmlnZ2VyJyxcbiAgICAgICAgJ21vZGFsJzogJ21vZGFsX190cmlnZ2VyJ1xuICAgICAgfSxcbiAgICAgICdkaWFsb2cnOiB7XG4gICAgICAgICdkcmF3ZXInOiAnZHJhd2VyX19kaWFsb2cnLFxuICAgICAgICAnbW9kYWwnOiAnbW9kYWxfX2RpYWxvZydcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gV2hldGhlciBvciBub3QgdG8gZW5hYmxlIHRoZSBzd2l0Y2ggZnVuY3Rpb25hbGl0eVxuICAgIC8vIHtmYWxzZX0gfHwge3N0cmluZ30gZS5nLiAnW2RhdGEtZHJhd2VyLXN3aXRjaF0nXG4gICAgc3dpdGNoOiAnW2RhdGEtZHJhd2VyLXN3aXRjaF0nLFxuXG4gICAgLy8gVGhlIGRlZmF1bHQgYnJlYWsgcG9pbnQgZm9yIHdoZW4gdG8gc3dpdGNoIHRvIGRyYXdlciBvciBtb2RhbCBjbGFzc2VzXG4gICAgLy8ge3N0cmluZ30gRWl0aGVyIGEgYnJlYWtwb2ludCBrZXkgb3IgcGl4ZWwgdmFsdWVcbiAgICBzd2l0Y2hCcmVha3BvaW50OiAnbGcnLFxuXG4gICAgLy8gV2hldGhlciBvciBub3QgdG8gc3RvcmUgdGhlIHNhdmUgc3RhdGUgaW4gbG9jYWwgc3RvcmFnZVxuICAgIC8vIHtmYWxzZX0gfHwge3N0cmluZ30gVGhlIHN0cmluZyB0byBzYXZlIG91ciBzdGF0ZSBvYmplY3QgYXNcbiAgICBzYXZlU3RhdGU6ICdkcmF3ZXJTdGF0ZScsXG5cbiAgICAvLyBUcmFuc2l0aW9uIG9wdGlvbnNcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IDUwMFxuICB9XG5cbiAgLy8gRHJhd2VyIHNwZWNpZmljIHZhcmlhYmxlc1xuICAvLyBXaGVyZSB3ZSBzdG9yZSBhbGwgb3VyIGRyYXdlcnMgYXZhaWxhYmxlIGluIHRoZSBET01cbiAgbGV0IGRyYXdlcnNcbiAgLy8gV2hlcmUgd2Ugc3RvcmUgYWxsIG91ciBzd2l0Y2ggZHJhd2VycyBhdmFpbGFibGUgaW4gdGhlIERPTVxuICBsZXQgc3dpdGNoRHJhd2Vyc1xuICAvLyBXaGVyZSB3ZSBzdG9yZSBhIHNhdmUgc3RhdGUgb2JqZWN0IGJlZm9yZSB3ZSBwYXNzIGl0IHRvIGxvY2FsIHN0b3JhZ2VcbiAgbGV0IGRyYXdlclN0YXRlID0ge31cblxuICAvKipcbiAgICogVGhlIGNvbnN0cnVjdG9yIG1ldGhvZCwgcnVuIGFzIHNvb24gYXMgYW4gaW5zdGFuY2UgaXMgY3JlYXRlZFxuICAgKiAtLS1cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBIGpzb24gb2JqZWN0IHdpdGggeW91ciBjdXN0b20gc2V0dGluZ3NcbiAgICovXG4gIGFwaS5pbml0ID0gKG9wdGlvbnMpID0+IHtcblxuICAgIC8vIE1lcmdlIHRoZSBkZWZhdWx0cyBhbmQgcGFzc2VkIG9wdGlvbnMgaW50byBvdXIgc2V0dGluZ3Mgb2JqXG4gICAgc2V0dGluZ3MgPSB1LmV4dGVuZCggZGVmYXVsdHMsIG9wdGlvbnMgfHwge30gKVxuXG4gICAgLy8gR2V0IGFsbCB0aGUgZHJhd2VycyBvbiB0aGUgcGFnZVxuICAgIGRyYXdlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHNldHRpbmdzLmNsYXNzRHJhd2VyKVxuXG4gICAgLy8gSW5pdCBzYXZlIHN0YXRlIGZ1bmN0aW9uYWxpdHkgaWYgaXQncyBlbmFibGVkXG4gICAgaWYgKHNldHRpbmdzLnNhdmVTdGF0ZSkge1xuICAgICAgaW5pdFNhdmVTdGF0ZSgpXG4gICAgfVxuXG4gICAgLy8gSW5pdCBzd2l0Y2ggZnVuY3Rpb25hbGl0eSBpZiBpdCdzIGVuYWJsZWRcbiAgICBpZiAoc2V0dGluZ3Muc3dpdGNoKSB7XG4gICAgICBpbml0U3dpdGNoKClcbiAgICB9XG5cbiAgICAvLyBBZGQgb3VyIGRyYXdlciB0cmlnZ2VyIGV2ZW50IGxpc3RlbmVyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0cmlnZ2VyLCBmYWxzZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGVjb25zdHJ1Y3RvciBtZXRob2QsIHVzZWQgdG8gcmVzZXQgYW5kIGRlc3RvcnkgdGhlIGRyYXdlciBpbnN0YW5jZVxuICAgKi9cbiAgYXBpLmRlc3Ryb3kgPSAoKSA9PiB7XG5cbiAgICAvLyBDbGVhciBvdXIgdmFyaWFibGVzXG4gICAgc2V0dGluZ3MgPSBudWxsXG4gICAgZHJhd2VycyA9IG51bGxcbiAgICBzd2l0Y2hEcmF3ZXJzID0gbnVsbFxuICAgIGRyYXdlclN0YXRlID0ge31cblxuICAgIC8vIERlbGV0ZSB0aGUgbG9jYWwgc3RvcmFnZSBkYXRhXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oc2V0dGluZ3Muc2F2ZVN0YXRlKVxuXG4gICAgLy8gUmVtb3ZlIHRoZSBkcmF3ZXIgdHJpZ2dlciBldmVudCBsaXN0ZW5lclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdHJpZ2dlciwgZmFsc2UpXG4gIH1cblxuICAvKipcbiAgICogUHVibGljIG1ldGhvZCB0byBvcGVuIGEgZHJhd2VyIG9yIGdyb3VwIG9mIGRyYXdlcnNcbiAgICogLS0tXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciAtIEEgdmFsaWQgQ1NTIHNlbGVjdG9yXG4gICAqL1xuICBhcGkub3BlbiA9IChzZWxlY3RvcikgPT4ge1xuICAgIHNlbGVjdG9yID0gKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogJy4nICsgc2V0dGluZ3MuY2xhc3NEcmF3ZXJcbiAgICB0b2dnbGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksICdvcGVuJylcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIHRvIGNsb3NlIGEgZHJhd2VyIG9yIGdyb3VwIG9mIGRyYXdlcnNcbiAgICogLS0tXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciAtIEEgdmFsaWQgQ1NTIHNlbGVjdG9yXG4gICAqL1xuICBhcGkuY2xvc2UgPSAoc2VsZWN0b3IpID0+IHtcbiAgICBzZWxlY3RvciA9IChzZWxlY3RvcikgPyBzZWxlY3RvciA6ICcuJyArIHNldHRpbmdzLmNsYXNzRHJhd2VyXG4gICAgdG9nZ2xlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLCAnY2xvc2UnKVxuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2QgdG8gdG9nZ2xlIGEgZHJhd2VyIG9yIGdyb3VwIG9mIGRyYXdlcnNcbiAgICogLS0tXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciAtIEEgdmFsaWQgQ1NTIHNlbGVjdG9yXG4gICAqL1xuICBhcGkudG9nZ2xlID0gKHNlbGVjdG9yKSA9PiB7XG4gICAgc2VsZWN0b3IgPSAoc2VsZWN0b3IpID8gc2VsZWN0b3IgOiAnLicgKyBzZXR0aW5ncy5jbGFzc0RyYXdlclxuICAgIHRvZ2dsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIHRvIHN3aXRjaCBhIGRyYXdlciBpbnRvIG1vZGFsXG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgLSBBIHZhbGlkIENTUyBzZWxlY3RvclxuICAgKi9cbiAgYXBpLnN3aXRjaERyYXdlciA9IChzZWxlY3RvcikgPT4ge1xuXG4gICAgLy8gVXNlIGRlZmF1bHQgc2VsZWN0b3IgaWYgb25lIGlzbid0IHBhc3NlZFxuICAgIHNlbGVjdG9yID0gKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogc2V0dGluZ3Muc3dpdGNoXG5cbiAgICAvLyBRdWVyeSBvdXIgZWxlbWVudHMgdXNpbmcgdGhlIHByb3ZpZGVkIHNlbGVjdG9yXG4gICAgbGV0IGl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcblxuICAgIC8vIENvbnZlcnQgdG8gYXJyYXkgaWYgb25seSBvbmUgZHJhd2VyIGlzIHBhc3NlZFxuICAgIGl0ZW1zID0gKGl0ZW1zLmZvckVhY2gpID8gaXRlbXMgOiB1LnRvQXJyYXkoaXRlbXMpXG5cbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBzd2l0Y2hEcmF3ZXIoaXRlbSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2QgdG8gc3dpdGNoIGEgZHJhd2VyIGludG8gbW9kYWxcbiAgICogLS0tXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciAtIEEgdmFsaWQgQ1NTIHNlbGVjdG9yXG4gICAqL1xuICBhcGkuc3dpdGNoTW9kYWwgPSAoc2VsZWN0b3IpID0+IHtcblxuICAgIC8vIFVzZSBkZWZhdWx0IHNlbGVjdG9yIGlmIG9uZSBpc24ndCBwYXNzZWRcbiAgICBzZWxlY3RvciA9IChzZWxlY3RvcikgPyBzZWxlY3RvciA6IHNldHRpbmdzLnN3aXRjaFxuXG4gICAgLy8gUXVlcnkgb3VyIGVsZW1lbnRzIHVzaW5nIHRoZSBwcm92aWRlZCBzZWxlY3RvclxuICAgIGxldCBpdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXG5cbiAgICAvLyBDb252ZXJ0IHRvIGFycmF5IGlmIG9ubHkgb25lIGRyYXdlciBpcyBwYXNzZWRcbiAgICBpdGVtcyA9IChpdGVtcy5mb3JFYWNoKSA/IGl0ZW1zIDogdS50b0FycmF5KGl0ZW1zKVxuXG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgc3dpdGNoTW9kYWwoaXRlbSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgdGhlIGRyYXdlciBjdXJyZW50IGRyYXdlciBzdGF0ZVxuICAgKi9cbiAgYXBpLnN0YXRlU2F2ZSA9ICgpID0+IHtcbiAgICBzdGF0ZVNhdmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0byBkcmF3ZXIgZGVmYXVsdCBzdGF0ZVxuICAgKi9cbiAgYXBpLnN0YXRlUmVzZXQgPSAoKSA9PiB7XG4gICAgc3RhdGVSZXNldCgpXG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZSBmdW5jdGlvbiB0byBjbG9zZSBhIGRyYXdlciBvciBncm91cCBvZiBkcmF3ZXJzXG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge05vZGV9IGRyYXdlciAtIFRoZSBkcmF3ZXIgZWxlbWVudChzKSB0byBjbG9zZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgLSBXaGV0aGVyIHRvIG9wZW4sIGNsb3NlIG9yIHRvZ2dsZSB0aGUgZHJhd2VyKHMpXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBjb25zdCB0b2dnbGUgPSAoZHJhd2VyLCBzdGF0ZSwgY2FsbGJhY2spID0+IHtcblxuICAgIC8vIENoZWNrIGlmIGRyYXdlcihzKSBzaG91bGQgYmUgb3BlbmVkLCBjbG9zZWQgb3IgdG9nZ2xlZCBhbmQgZWl0aGVyIGFkZCBvclxuICAgIC8vIHJlbW92ZSB0aGUgYWN0aXZlIGNsYXNzIHRvIHRoZSBwYXNzZWQgZHJhd2VyKHMpXG4gICAgaWYgKHN0YXRlID09PSAnb3BlbicpIHtcbiAgICAgIHUuYWRkQ2xhc3MoZHJhd2VyLCBzZXR0aW5ncy5jbGFzc0FjdGl2ZSlcbiAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAnY2xvc2UnKSB7XG4gICAgICB1LnJlbW92ZUNsYXNzKGRyYXdlciwgc2V0dGluZ3MuY2xhc3NBY3RpdmUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHUudG9nZ2xlQ2xhc3MoZHJhd2VyLCBzZXR0aW5ncy5jbGFzc0FjdGl2ZSlcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBzYXZlIHN0YXRlIGlzIGVuYWJsZWRcbiAgICBpZiAoc2V0dGluZ3Muc2F2ZVN0YXRlKSB7XG4gICAgICBzdGF0ZVNhdmUoZHJhd2VyKVxuICAgIH1cblxuICAgIC8vIEZpcmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlmIG9uZSB3YXMgcGFzc2VkXG4gICAgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmIGNhbGxiYWNrKClcbiAgfVxuXG4gIC8qKlxuICAgKiBQcml2YXRlIGZ1bmN0aW9uIHRvIHRvZ2dsZSBkcmF3ZXIgdmlhIGEgdHJpZ2dlclxuICAgKi9cbiAgY29uc3QgdHJpZ2dlciA9ICgpID0+IHtcblxuICAgIC8vIEdldCB0aGUgY2xvc2VzdCB0cmlnZ2VyIGVsZW1lbnQgZnJvbSB0aGUgY2xpY2sgZXZlbnRcbiAgICBsZXQgdHJpZ2dlciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuJyArIHNldHRpbmdzLmNsYXNzVHJpZ2dlcilcblxuICAgIC8vIENoZWNrIHRoYXQgdGhlIGNsYXNzIHRyaWdnZXIgd2FzIGNsaWNrZWRcbiAgICBpZiAodHJpZ2dlcikge1xuXG4gICAgICAvLyBHZXQgdGhlIGRyYXdlciBzZWxlY3RvciBmcm9tIHRoZSB0cmlnZ2VyIHZpYSBbZGF0YS10YXJnZXRdXG4gICAgICBsZXQgZGF0YURyYXdlciA9IHRyaWdnZXIuZGF0YXNldC50YXJnZXRcblxuICAgICAgLy8gQ2hlY2sgdGhhdCBhIGRyYXdlciB0YXJnZXQgd2FzIGdpdmVuXG4gICAgICBpZiAoZGF0YURyYXdlcikge1xuXG4gICAgICAgIC8vIFF1ZXJ5IHRoZSBkcmF3ZXIgZWxlbWVudCBhbmQgdG9nZ2xlIGl0IGlmIGl0IGV4aXN0c1xuICAgICAgICBsZXQgZHJhd2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChkYXRhRHJhd2VyKVxuICAgICAgICBpZiAoZHJhd2VyLmxlbmd0aCkge1xuICAgICAgICAgIHRvZ2dsZShkcmF3ZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZSBmdW5jdGlvbiB0aGF0IGluaXRpYWxpemVzIHRoZSBzYXZlIHN0YXRlIGZ1bmN0aW9uYWxpdHlcbiAgICovXG4gIGNvbnN0IGluaXRTYXZlU3RhdGUgPSAoKSA9PiB7XG5cbiAgICAvLyBDaGVjayBpZiBhIGRyYXdlciBzdGF0ZSBpcyBhbHJlYWR5IHNhdmVkIGluIGxvY2FsIHN0b3JhZ2UgYW5kIHNhdmUgdGhlXG4gICAgLy8ganNvbiBwYXJzZWQgZGF0YSB0byBvdXIgbG9jYWwgdmFyaWFibGUgaWYgaXQgZG9lc1xuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzZXR0aW5ncy5zYXZlU3RhdGUpKSB7XG4gICAgICBkcmF3ZXJTdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oc2V0dGluZ3Muc2F2ZVN0YXRlKSlcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggYWxsIGRyYXdlcnNcbiAgICBkcmF3ZXJzLmZvckVhY2goKGRyYXdlcikgPT4ge1xuXG4gICAgICAvLyBTZXQgdGhlIGRlZmF1bHQgc3RhdGUgaWYgb25lIGlzIG5vdCBzZXRcbiAgICAgIGlmIChkcmF3ZXIuaWQgaW4gZHJhd2VyU3RhdGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0YXRlU2F2ZShkcmF3ZXIpXG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBvdXIgZHJhd2VyIGRpYWxvZyBlbGVtZW50XG4gICAgICBsZXQgZGlhbG9nID0gZHJhd2VyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgc2V0dGluZ3MuY2xhc3NEaWFsb2cpXG5cbiAgICAgIC8vIFRyYW5zaXRpb24gZGVsYXk6IGRpc2FibGVzIHRyYW5zaXRpb25zIGFzIGRlZmF1bHQgc3RhdGVzIGFyZSBiZWluZyBzZXRcbiAgICAgIGxldCB0cmFuc2l0aW9uRGVsYXkgPSAoKSA9PiB7XG4gICAgICAgIGlmIChkaWFsb2cpIHtcbiAgICAgICAgICB1LmFkZENsYXNzKGRpYWxvZywgJ3RyYW5zaXRpb25fbm9uZScpXG4gICAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB1LnJlbW92ZUNsYXNzKGRpYWxvZywgJ3RyYW5zaXRpb25fbm9uZScpXG4gICAgICAgICAgICB9LCBzZXR0aW5ncy50cmFuc2l0aW9uRHVyYXRpb25cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG9nZ2xlIG91ciBkcmF3ZXIgc3RhdGUgYmFzZWQgb24gdGhlIHNhdmVkIHN0YXRlXG4gICAgICBpZiAoZHJhd2VyU3RhdGVbZHJhd2VyLmlkXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdG9nZ2xlKGRyYXdlciwgJ2Nsb3NlJywgdHJhbnNpdGlvbkRlbGF5KVxuICAgICAgfSBlbHNlIGlmIChkcmF3ZXJTdGF0ZVtkcmF3ZXIuaWRdKSB7XG4gICAgICAgIHRvZ2dsZShkcmF3ZXIsICdvcGVuJywgdHJhbnNpdGlvbkRlbGF5KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZSBmdW5jdGlvbiB0aGF0IHNhdmVzIHRoZSBzdGF0ZSBvZiBhIHNwZWNpZmljIG9yIGFsbCBkcmF3ZXJzXG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge05vZGV9IGl0ZW1zIC0gVGhlIGRyYXdlciBlbGVtZW50KHMpIHRvIHNhdmUgc3RhdGVcbiAgICovXG4gIGNvbnN0IHN0YXRlU2F2ZSA9IChpdGVtcykgPT4ge1xuXG4gICAgLy8gU2F2ZSBhbGwgZHJhd2VycyBpZiBhbiBpdGVtcyBhcmcgd2Fzbid0IHBhc3NlZFxuICAgIGl0ZW1zID0gKGl0ZW1zKSA/IGl0ZW1zIDogZHJhd2Vyc1xuXG4gICAgLy8gQ29udmVydCB0byBhcnJheSBpZiBvbmx5IG9uZSBkcmF3ZXIgaXMgcGFzc2VkXG4gICAgaXRlbXMgPSAoaXRlbXMuZm9yRWFjaCkgPyBpdGVtcyA6IHUudG9BcnJheShpdGVtcylcblxuICAgIC8vIExvb3AgdGhyb3VnaCBvdXIgZHJhd2VycyBhbmQgc2F2ZSB0aGVpciBuZXcgc3RhdGUgdG8gbG9jYWwgc3RvcmFnZVxuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIC8vIE9ubHkgc2F2ZSBkcmF3ZXIgc3RhdGUgaWYgYW4gaWQgZXhpc3RzXG4gICAgICBpZiAoaXRlbS5pZCkge1xuICAgICAgICBkcmF3ZXJTdGF0ZVtpdGVtLmlkXSA9IHUuaGFzQ2xhc3MoaXRlbSwgc2V0dGluZ3MuY2xhc3NBY3RpdmUpXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNldHRpbmdzLnNhdmVTdGF0ZSwgSlNPTi5zdHJpbmdpZnkoZHJhd2VyU3RhdGUpKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZSBmdW5jdGlvbiB0aGF0IGNsZWFycyB0aGUgZHJhd2VyIHN0YXRlXG4gICAqL1xuICBjb25zdCBzdGF0ZVJlc2V0ID0gKCkgPT4ge1xuXG4gICAgLy8gUmVzZXQgb3VyIGxvY2FsIGRyYXdlciBzdGF0ZSB2YXJpYWJsZSBhbmQgZGVsZXRlIHRoZSBsb2NhbCBzdG9yYWdlIGRhdGFcbiAgICBkcmF3ZXJTdGF0ZSA9IHt9XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oc2V0dGluZ3Muc2F2ZVN0YXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIFByaXZhdGUgZnVuY3Rpb24gdGhhdCBpbml0aWFsaXplcyB0aGUgc3dpdGNoIGZ1bmN0aW9uYWxpdHlcbiAgICovXG4gIGNvbnN0IGluaXRTd2l0Y2ggPSAoKSA9PiB7XG5cbiAgICAvLyBRdWVyeSBhbGwgdGhlIGRyYXdlcnMgd2l0aCB0aGUgc3dpdGNoIGZlYXR1cmUgZW5hYmxlZFxuICAgIHN3aXRjaERyYXdlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNldHRpbmdzLnN3aXRjaClcblxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgc3dpdGNoIGRyYXdlcnNcbiAgICBzd2l0Y2hEcmF3ZXJzLmZvckVhY2goKGRyYXdlcikgPT4ge1xuXG4gICAgICAvLyBHZXQgdGhlIGxvY2FsIGJyZWFrcG9pbnQgaWYgb25lIGlzIHNldFxuICAgICAgLy8gUmVtb3ZlIGJyYWNrZXRzIGFuZCB0aGUgaW50aWFsIGRhdGEgZmxhZ1xuICAgICAgbGV0IGNsZWFuU2VsZWN0b3IgPSBzZXR0aW5ncy5zd2l0Y2hcbiAgICAgICAgLnJlcGxhY2UoJ1snLCAnJylcbiAgICAgICAgLnJlcGxhY2UoJ10nLCAnJylcbiAgICAgICAgLnJlcGxhY2UoJ2RhdGEtJywgJycpXG5cbiAgICAgIC8vIENvbnZlcnQgc3JpbmcgdG8gY2FtZWxDYXNlXG4gICAgICBjbGVhblNlbGVjdG9yID0gY2xlYW5TZWxlY3Rvci5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoZykge1xuICAgICAgICByZXR1cm4gZ1sxXS50b1VwcGVyQ2FzZSgpXG4gICAgICB9KVxuXG4gICAgICAvLyBDaGVjayB3aGljaCBicmVha3BvaW50IHRvIHVzZTpcbiAgICAgIC8vIGEpIFRoZSBsb2NhbCBicCBzZXQgb24gdGhlIGRyYXdlclxuICAgICAgLy8gYikgVGhlIGJwIGF2YWlsYWJsZSBpbiBjb25maWcgdXNpbmcgYSBrZXlcbiAgICAgIC8vIGMpIFRoZSByYXcgcGl4ZWwgdmFsdWUgcHJvdmlkZWQgaW4gc2V0dGluZ3NcbiAgICAgIGxldCBicCA9IGRyYXdlci5kYXRhc2V0W2NsZWFuU2VsZWN0b3JdXG4gICAgICBpZiAoYnApIHtcbiAgICAgICAgYnAgPSB1LmdldEJyZWFrcG9pbnQoYnApXG4gICAgICAgIGlmICghYnApIHtcbiAgICAgICAgICBicCA9IGRyYXdlci5kYXRhc2V0W2NsZWFuU2VsZWN0b3JdXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJwID0gdS5nZXRCcmVha3BvaW50KHNldHRpbmdzLnN3aXRjaEJyZWFrcG9pbnQpXG4gICAgICAgIGlmICghYnApIHtcbiAgICAgICAgICBicCA9IHNldHRpbmdzLnN3aXRjaEJyZWFrcG9pbnRcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBNZWRpYSBxdWVyeSBsaXN0ZW5lclxuICAgICAgbGV0IG1xID0gd2luZG93Lm1hdGNoTWVkaWEoIFwiKG1pbi13aWR0aDpcIiArIGJwICsgXCIpXCIgKVxuICAgICAgbXEuYWRkTGlzdGVuZXIoKG1xKSA9PiB7XG4gICAgICAgIHN3aXRjaENoZWNrKG1xLCBkcmF3ZXIpXG4gICAgICB9KVxuICAgICAgc3dpdGNoQ2hlY2sobXEsIGRyYXdlcilcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFByaXZhdGUgZnVuY3Rpb24gdGhhdCBjaGVja3Mgd2hlbiBhIG1lZGlhIHF1ZXJ5IGhpdHMgYSBtYXRjaCBhbmQgc3dpdGNoZXNcbiAgICogdGhlIGNvbXBvbmVudCBmcm9tIGRyYXdlciB0byBtb2RhbCBhcyBuZWVkZWRcbiAgICogLS0tXG4gICAqIEBwYXJhbSB7TWVkaWFRdWVyeUxpc3R9IG1xIC0gVGhlIE1lZGlhUXVlcnlMaXN0IG9iamVjdCBmb3IgdGhlIG1lZGlhIHF1ZXJ5XG4gICAqIEBwYXJhbSB7Tm9kZX0gZHJhd2VyIC0gVGhlIGRyYXdlciBlbGVtZW50IHRvIHN3aXRjaFxuICAgKi9cbiAgY29uc3Qgc3dpdGNoQ2hlY2sgPSAobXEsIGRyYXdlcikgPT4ge1xuICAgIGlmIChtcS5tYXRjaGVzKSB7XG4gICAgICBzd2l0Y2hEcmF3ZXIoZHJhd2VyKVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2hNb2RhbChkcmF3ZXIpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByaXZhdGUgZnVuY3Rpb24gdGhhdCBzd2l0Y2hlcyBhIG1vZGFsIGludG8gYSBkcmF3ZXIgY29tcG9uZW50XG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge05vZGV9IGRyYXdlciAtIFRoZSBlbGVtZW50IHRvIHN3aXRjaFxuICAgKi9cbiAgY29uc3Qgc3dpdGNoRHJhd2VyID0gKGRyYXdlcikgPT4ge1xuXG4gICAgLy8gR2V0IHRoZSBkaWFsb2cgYW5kIHRyaWdnZXIgZWxlbWVudHMgcmVsYXRlZCB0byB0aGlzIGNvbXBvbmVudFxuICAgIGxldCBkaWFsb2cgPSBkcmF3ZXIucXVlcnlTZWxlY3RvcignLmRpYWxvZycpXG4gICAgbGV0IHRyaWdnZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGFyZ2V0PVwiIycgKyBkcmF3ZXIuaWQgKyAnXCJdJylcblxuICAgIC8vIFN3aXRjaCB0aGUgbW9kYWwgY29tcG9uZW50IHRvIGRyYXdlclxuICAgIGRyYXdlci5jbGFzc05hbWUgPSBkcmF3ZXIuY2xhc3NOYW1lLnJlcGxhY2UoXG4gICAgICBuZXcgUmVnRXhwKHNldHRpbmdzLmNsYXNzU3dpdGNoLml0ZW0ubW9kYWwsICdnaScpLFxuICAgICAgc2V0dGluZ3MuY2xhc3NTd2l0Y2guaXRlbS5kcmF3ZXJcbiAgICApXG5cbiAgICBkaWFsb2cuY2xhc3NOYW1lID0gZGlhbG9nLmNsYXNzTmFtZS5yZXBsYWNlKFxuICAgICAgbmV3IFJlZ0V4cChzZXR0aW5ncy5jbGFzc1N3aXRjaC5kaWFsb2cubW9kYWwsICdnaScpLFxuICAgICAgc2V0dGluZ3MuY2xhc3NTd2l0Y2guZGlhbG9nLmRyYXdlclxuICAgIClcblxuICAgIHRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcbiAgICAgIHRyaWdnZXIuY2xhc3NOYW1lID0gdHJpZ2dlci5jbGFzc05hbWUucmVwbGFjZShcbiAgICAgICAgbmV3IFJlZ0V4cChzZXR0aW5ncy5jbGFzc1N3aXRjaC50cmlnZ2VyLm1vZGFsLCAnZ2knKSxcbiAgICAgICAgc2V0dGluZ3MuY2xhc3NTd2l0Y2gudHJpZ2dlci5kcmF3ZXJcbiAgICAgIClcbiAgICB9KVxuXG4gICAgLy8gT3BlbiBvciBjbG9zZSBkcmF3ZXIgYmFzZWQgb24gc2F2ZSBzdGF0ZVxuICAgIGlmIChzZXR0aW5ncy5zYXZlU3RhdGUpIHtcbiAgICAgIGlmIChkcmF3ZXJTdGF0ZVtkcmF3ZXIuaWRdID09PSBmYWxzZSkge1xuICAgICAgICB0b2dnbGUoZHJhd2VyLCAnY2xvc2UnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9nZ2xlKGRyYXdlciwgJ29wZW4nKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcml2YXRlIGZ1bmN0aW9uIHRoYXQgc3dpdGNoZXMgYSBkcmF3ZXIgaW50byBhIG1vZGFsIGNvbXBvbmVudFxuICAgKiAtLS1cbiAgICogQHBhcmFtIHtOb2RlfSBkcmF3ZXIgLSBUaGUgZWxlbWVudCB0byBzd2l0Y2hcbiAgICovXG4gIGNvbnN0IHN3aXRjaE1vZGFsID0gKGRyYXdlcikgPT4ge1xuXG4gICAgLy8gR2V0IHRoZSBkaWFsb2cgYW5kIHRyaWdnZXIgZWxlbWVudHMgcmVsYXRlZCB0byB0aGlzIGNvbXBvbmVudFxuICAgIGxldCBkaWFsb2cgPSBkcmF3ZXIucXVlcnlTZWxlY3RvcignLmRpYWxvZycpXG4gICAgbGV0IHRyaWdnZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGFyZ2V0PVwiIycgKyBkcmF3ZXIuaWQgKyAnXCJdJylcblxuICAgIC8vIFN3aXRjaCB0aGUgZHJhd2VyIGNvbXBvbmVudCB0byBtb2RhbFxuICAgIGRyYXdlci5jbGFzc05hbWUgPSBkcmF3ZXIuY2xhc3NOYW1lLnJlcGxhY2UoXG4gICAgICBuZXcgUmVnRXhwKHNldHRpbmdzLmNsYXNzU3dpdGNoLml0ZW0uZHJhd2VyLCAnZ2knKSxcbiAgICAgIHNldHRpbmdzLmNsYXNzU3dpdGNoLml0ZW0ubW9kYWxcbiAgICApXG5cbiAgICBkaWFsb2cuY2xhc3NOYW1lID0gZGlhbG9nLmNsYXNzTmFtZS5yZXBsYWNlKFxuICAgICAgbmV3IFJlZ0V4cChzZXR0aW5ncy5jbGFzc1N3aXRjaC5kaWFsb2cuZHJhd2VyLCAnZ2knKSxcbiAgICAgIHNldHRpbmdzLmNsYXNzU3dpdGNoLmRpYWxvZy5tb2RhbFxuICAgIClcblxuICAgIHRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcbiAgICAgIHRyaWdnZXIuY2xhc3NOYW1lID0gdHJpZ2dlci5jbGFzc05hbWUucmVwbGFjZShcbiAgICAgICAgbmV3IFJlZ0V4cChzZXR0aW5ncy5jbGFzc1N3aXRjaC50cmlnZ2VyLmRyYXdlciwgJ2dpJyksXG4gICAgICAgIHNldHRpbmdzLmNsYXNzU3dpdGNoLnRyaWdnZXIubW9kYWxcbiAgICAgIClcbiAgICB9KVxuXG4gICAgLy8gUmVtb3ZlIGFjdGl2ZSBjbGFzcyBmb3IgbW9kYWwgc3R5bGVzIGJ5IGRlZmF1bHRcbiAgICB1LnJlbW92ZUNsYXNzKGRyYXdlciwgc2V0dGluZ3MuY2xhc3NBY3RpdmUpXG4gIH1cblxuICAvLyBSdW4gdGhlIGNvbnN0cnVjdG9yIG1ldGhvZFxuICBhcGkuaW5pdChvcHRpb25zKVxuXG4gIC8vIFJldHVybiB0aGUgQVBJIGZvciBydW5uaW5nIHB1YmxpYyBtZXRob2RzXG4gIHJldHVybiBhcGlcbn1cbiIsImltcG9ydCB1IGZyb20gJy4vdXRpbGl0eS5qcydcblxuLyoqXG4gKiBNb2RhbCBwbHVnaW5cbiAqIC0tLVxuICogQSBjb21wb25lbnQgZm9yIGNoYW5naW5nIHRoZSBtb2RlIG9mIGEgcGFnZSB0byBjb21wbGV0ZSBhIGNyaXRpY2FsIHRhc2suXG4gKiBUaGlzIGlzIHVzdWFsbHkgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBEaWFsb2cgY29tcG9uZW50IHRvIG1ha2VcbiAqIG1vZGFsIGRpYWxvZ3MuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAndXNlIHN0cmljdCdcblxuICBsZXQgYXBpID0ge31cbiAgbGV0IHNldHRpbmdzXG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGNsYXNzVHJpZ2dlcjogJ21vZGFsX190cmlnZ2VyJyxcbiAgICBjbGFzc01vZGFsOiAnbW9kYWwnLFxuICAgIGNsYXNzRGlhbG9nOiAnbW9kYWxfX2RpYWxvZycsXG4gICAgY2xhc3NBY3RpdmU6ICdpcy1hY3RpdmUnLFxuICAgIGZvY3VzOiAnW2RhdGEtZm9jdXNdJ1xuICB9XG5cbiAgbGV0IG1lbW9yeVRyaWdnZXJcbiAgbGV0IG1lbW9yeVRhcmdldFxuXG4gIGFwaS5pbml0ID0gKG9wdGlvbnMpID0+IHtcbiAgICBzZXR0aW5ncyA9IHUuZXh0ZW5kKCBkZWZhdWx0cywgb3B0aW9ucyB8fCB7fSApXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBydW4sIGZhbHNlKVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgcnVuLCBmYWxzZSlcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGVzY2FwZSwgZmFsc2UpXG4gIH1cblxuICBhcGkuZGVzdHJveSA9ICgpID0+IHtcbiAgICBzZXR0aW5ncyA9IG51bGxcbiAgICBtZW1vcnlUYXJnZXQgPSBudWxsXG4gICAgbWVtb3J5VHJpZ2dlciA9IG51bGxcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHJ1biwgZmFsc2UpXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBydW4sIGZhbHNlKVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXNjYXBlLCBmYWxzZSlcbiAgfVxuXG4gIGFwaS5vcGVuID0gKHNlbGVjdG9yKSA9PiB7XG4gICAgb3Blbihkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgfVxuXG4gIGFwaS5jbG9zZSA9IChjbGVhcikgPT4ge1xuICAgIGNsb3NlKGNsZWFyKVxuICB9XG5cbiAgY29uc3Qgb3BlbiA9ICh0YXJnZXQpID0+IHtcbiAgICB1LmFkZENsYXNzKHRhcmdldCwgc2V0dGluZ3MuY2xhc3NBY3RpdmUpXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRhcmdldCA9IHRhcmdldC5pdGVtKDApXG4gICAgICBsZXQgZm9jdXMgPSB0YXJnZXQucXVlcnlTZWxlY3RvcihzZXR0aW5ncy5mb2N1cylcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gX2xpc3RlbmVyKCkge1xuICAgICAgICBpZiAoZm9jdXMpIHtcbiAgICAgICAgICBmb2N1cy5mb2N1cygpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0LmZvY3VzKClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBfbGlzdGVuZXIsIHRydWUpXG4gICAgICB9LCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjbG9zZSA9IChjbGVhciA9IGZhbHNlKSA9PiB7XG4gICAgbGV0IG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgc2V0dGluZ3MuY2xhc3NNb2RhbClcbiAgICB1LnJlbW92ZUNsYXNzKG1vZGFscywgc2V0dGluZ3MuY2xhc3NBY3RpdmUpXG4gICAgaWYgKGNsZWFyID09IGZhbHNlICYmIG1lbW9yeVRyaWdnZXIgJiYgbWVtb3J5VGFyZ2V0KSB7XG4gICAgICBpZiAobWVtb3J5VGFyZ2V0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBtZW1vcnlUYXJnZXQgPSBtZW1vcnlUYXJnZXQuaXRlbSgwKVxuICAgICAgICBtZW1vcnlUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIF9saXN0ZW5lcigpIHtcbiAgICAgICAgICBpZiAobWVtb3J5VHJpZ2dlcikge1xuICAgICAgICAgICAgbWVtb3J5VHJpZ2dlci5mb2N1cygpXG4gICAgICAgICAgfVxuICAgICAgICAgIG1lbW9yeVRhcmdldCA9IG51bGxcbiAgICAgICAgICBtZW1vcnlUcmlnZ2VyID0gbnVsbFxuICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIF9saXN0ZW5lciwgdHJ1ZSlcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjbGVhciA9PSB0cnVlKSB7XG4gICAgICBtZW1vcnlUYXJnZXQgPSBudWxsXG4gICAgICBtZW1vcnlUcmlnZ2VyID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGVzY2FwZSA9ICgpID0+IHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAyNykge1xuICAgICAgY2xvc2UoKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJ1biA9ICgpID0+IHtcbiAgICBsZXQgdHJpZ2dlciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuJyArIHNldHRpbmdzLmNsYXNzVHJpZ2dlcilcbiAgICBsZXQgbW9kYWwgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy5jbGFzc01vZGFsKVxuICAgIGxldCBkaWFsb2cgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLicgKyBzZXR0aW5ncy5jbGFzc0RpYWxvZylcbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgY2xvc2UoKVxuICAgICAgbGV0IGRhdGFNb2RhbCA9IHRyaWdnZXIuZGF0YXNldC50YXJnZXRcbiAgICAgIGlmIChkYXRhTW9kYWwpIHtcbiAgICAgICAgbWVtb3J5VGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChkYXRhTW9kYWwpXG4gICAgICAgIG1lbW9yeVRyaWdnZXIgPSB0cmlnZ2VyXG4gICAgICAgIG9wZW4obWVtb3J5VGFyZ2V0KVxuICAgICAgfVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH0gZWxzZSBpZiAobW9kYWwgJiYgIWRpYWxvZykge1xuICAgICAgY2xvc2UoKVxuICAgIH1cbiAgfVxuXG4gIGFwaS5pbml0KG9wdGlvbnMpXG4gIHJldHVybiBhcGlcbn1cbiIsImltcG9ydCB1IGZyb20gJy4vdXRpbGl0eS5qcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob3B0aW9ucykge1xuXG4gICd1c2Ugc3RyaWN0J1xuXG4gIGxldCBhcGkgPSB7fVxuICBsZXQgc2V0dGluZ3NcbiAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgdHJpZ2dlcjogJ1tkYXRhLXRvZ2dsZS1jbGFzc10nLFxuICAgIHRhcmdldHM6ICcnLFxuICAgIGNsYXNzOiAnJ1xuICB9XG5cbiAgYXBpLmluaXQgPSAob3B0aW9ucykgPT4ge1xuICAgIHNldHRpbmdzID0gdS5leHRlbmQoIGRlZmF1bHRzLCBvcHRpb25zIHx8IHt9IClcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJ1biwgZmFsc2UpXG4gIH1cblxuICBhcGkuZGVzdHJveSA9ICgpID0+IHtcbiAgICBzZXR0aW5ncyA9IG51bGxcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHJ1biwgZmFsc2UpXG4gIH1cblxuICBjb25zdCBydW4gPSAoKSA9PiB7XG5cbiAgICBsZXQgdHJpZ2dlciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KHNldHRpbmdzLnRyaWdnZXIpXG5cbiAgICBpZiAodHJpZ2dlcikge1xuXG4gICAgICBsZXQgdGFyZ2V0c1xuXG4gICAgICBpZiAoc2V0dGluZ3MudGFyZ2V0cykge1xuICAgICAgICB0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZXR0aW5ncy50YXJnZXRzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodHJpZ2dlci5kYXRhc2V0LnRvZ2dsZVRhcmdldClcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldHMubGVuZ3RoKSB7XG4gICAgICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiB7XG4gICAgICAgICAgdS50b2dnbGVDbGFzcyh0YXJnZXQsIHRyaWdnZXIuZGF0YXNldC50b2dnbGVDbGFzcy5zcGxpdCgnICcpKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldHRpbmdzLmNsYXNzKSB7XG4gICAgICAgICAgdS50b2dnbGVDbGFzcyh0cmlnZ2VyLCBzZXR0aW5ncy5jbGFzcylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1LnRvZ2dsZUNsYXNzKHRyaWdnZXIsIHRyaWdnZXIuZGF0YXNldC50b2dnbGVDbGFzcy5zcGxpdCgnICcpKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG4gIH1cblxuICBhcGkuaW5pdChvcHRpb25zKVxuICByZXR1cm4gYXBpXG59XG4iLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZydcblxuLyoqXG4gKiBVdGlsaXR5XG4gKiAtLS1cbiAqIEEgc2V0IG9mIGhlbHBlciBtZXRob2RzIGZvciBnZW5lcmFsIGphdmFzY3JpcHQgcGx1Z2luIHVzZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuXG4gIC8qKlxuICAgKiBHZXQgYW5kIG91dHB1dCBhIGJyZWFrcG9pbnQgdXNpbmcgaXQncyBrZXkgZm91bmQgaW4gY29uZmlnLmpzb25cbiAgICogLS0tXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBUaGUga2V5IHRvIHNlYXJjaCBmb3IgaW4gdGhlIGJyZWFrcG9pbnRzIG9iamVjdFxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIFRoZSBwaXhlbCB2YWx1ZSBvZiB0aGUgYnJlYWtwb2ludCBhcyBhIHN0cmluZ1xuICAgKi9cbiAgc3RhdGljIGdldEJyZWFrcG9pbnQoa2V5KSB7XG4gICAgcmV0dXJuIGNvbmZpZy5icmVha3BvaW50c1trZXldXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGFuIGVsZW1lbnQgaGFzIGEgY2xhc3Mgb3Igbm90XG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge05vZGV9IGVsIC0gRWxlbWVudChzKSB0byBjaGVjayBjbGFzcyhlcykgb25cbiAgICogQHBhcmFtIHtTdHJpbmcgfHwgQXJyYXl9IGMgLSBDbGFzcyhlcykgdG8gY2hlY2tcbiAgICogQHJldHVybnMge0Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlmIGNsYXNzIGV4aXN0cywgb3RoZXJ3aXNlIGZhbHNlXG4gICAqL1xuICBzdGF0aWMgaGFzQ2xhc3MoZWwsIGMpIHtcbiAgICBlbCA9IChlbC5mb3JFYWNoKSA/IGVsIDogdGhpcy50b0FycmF5KGVsKVxuICAgIGMgPSB0aGlzLnRvQXJyYXkoYylcbiAgICByZXR1cm4gYy5zb21lKCBmdW5jdGlvbiAoYykge1xuICAgICAgbGV0IGhhcyA9IGZhbHNlXG4gICAgICBlbC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGMpKSB7XG4gICAgICAgICAgaGFzID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIGhhc1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGNsYXNzIG9yIGNsYXNzZXMgdG8gYW4gZWxlbWVudFxuICAgKiAtLS1cbiAgICogQHBhcmFtIHtOb2RlfSBlbCAtIEVsZW1lbnQocykgdG8gYWRkIGNsYXNzKGVzKSBvblxuICAgKiBAcGFyYW0ge1N0cmluZyB8fCBBcnJheX0gYyAtIENsYXNzKGVzKSB0byBhZGRcbiAgICovXG4gIHN0YXRpYyBhZGRDbGFzcyhlbCwgYykge1xuICAgIGVsID0gKGVsLmZvckVhY2gpID8gZWwgOiB0aGlzLnRvQXJyYXkoZWwpXG4gICAgYyA9IHRoaXMudG9BcnJheShjKVxuICAgIGVsLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBjLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGNsYXNzIG9yIGNsYXNzZXMgZnJvbSBhbiBlbGVtZW50XG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge05vZGV9IGVsIC0gRWxlbWVudChzKSB0byByZW1vdmUgY2xhc3MoZXMpIGZyb21cbiAgICogQHBhcmFtIHtTdHJpbmcgfHwgQXJyYXl9IGMgLSBDbGFzcyhlcykgdG8gcmVtb3ZlXG4gICAqL1xuICBzdGF0aWMgcmVtb3ZlQ2xhc3MoZWwsIGMpIHtcbiAgICBlbCA9IChlbC5mb3JFYWNoKSA/IGVsIDogdGhpcy50b0FycmF5KGVsKVxuICAgIGMgPSB0aGlzLnRvQXJyYXkoYylcbiAgICBlbC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgYy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgYSBjbGFzcyBvciBjbGFzc2VzIG9uIGFuIGVsZW1lbnRcbiAgICogLS0tXG4gICAqIEBwYXJhbSB7Tm9kZX0gZWwgLSBFbGVtZW50KHMpIHRvIHRvZ2dsZSBjbGFzcyhlcykgb25cbiAgICogQHBhcmFtIHtTdHJpbmcgfHwgQXJyYXl9IGMgLSBDbGFzcyhlcykgdG8gdG9nZ2xlXG4gICAqL1xuICBzdGF0aWMgdG9nZ2xlQ2xhc3MoZWwsIGMpIHtcbiAgICBlbCA9IChlbC5mb3JFYWNoKSA/IGVsIDogdGhpcy50b0FycmF5KGVsKVxuICAgIGMgPSB0aGlzLnRvQXJyYXkoYylcbiAgICBlbC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgYy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoYylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHRoZSBjbG9zZXN0IHBhcmVudCBlbGVtZW50IGJhc2VkIG9uIGNsYXNzLiBUaGlzIGlzIGRpZmZlcmVudCBmcm9tIHRoZVxuICAgKiBuYXRpdmUgLmNsb3Nlc3QoKSBtZXRob2QgaW4gdGhhdCBpdCBkb2Vzbid0IGNoZWNrIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge05vZGV9IGVsIC0gRWxlbWVudCB0byBzdGFydCBzZWFyY2ggb25cbiAgICogQHBhcmFtIHtTdHJpbmcgfHwgQXJyYXl9IGMgLSBDbGFzcyhlcykgdG8gY2hlY2sgZm9yXG4gICAqIEByZXR1cm4ge05vZGV9IC0gQ2xvc2VzdCBwYXJlbnQgZWxlbWVudFxuICAgKi9cbiAgc3RhdGljIGNsb3Nlc3QoZWwsIGMpIHtcbiAgICB3aGlsZSAoKGVsID0gZWwucGFyZW50RWxlbWVudCkgJiYgIXRoaXMuaGFzQ2xhc3MoZWwsIGMpKVxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgc3RyaW5nIG9yIG9iamVjdCB0byBhbiBhcnJheS4gSWYgYW4gYXJyYXkgaXMgcGFzc2VkLCBpdCdzXG4gICAqIHJldHVybmVkIGFzIGlzLiBBbnl0aGluZyBlbHNlIGlzIHJldHVybmVkIGFzIGFuIGFycmF5LlxuICAgKiAtLS1cbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gLSBTdHJpbmcgb3Igb2JqZWN0IHRvIGNvbnZlcnQgdG8gYW4gYXJyYXlcbiAgICogQHJldHVybiB7QXJyYXl9IC0gUmV0dXJuIHRoZSBjb252ZXJ0ZWQgYXJyYXlcbiAgICovXG4gIHN0YXRpYyB0b0FycmF5KGl0ZW0pIHtcblxuICAgIGxldCBhcnJheSA9IFtdXG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgICAgYXJyYXkgPSBpdGVtXG4gICAgfSBlbHNlIHtcbiAgICAgIGFycmF5LnB1c2goaXRlbSlcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSB0d28gb3IgbW9yZSBvYmplY3RzLiBSZXR1cm5zIGEgbmV3IG9iamVjdC4gU2V0IHRoZSBmaXJzdCBhcmd1bWVudFxuICAgKiB0byBgdHJ1ZWAgZm9yIGEgZGVlcCBvciByZWN1cnNpdmUgbWVyZ2UuXG4gICAqIC0tLVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtPcHRpb25hbF0gLSBJZiB0cnVlLCBkbyBhIGRlZXAgKG9yIHJlY3Vyc2l2ZSkgbWVyZ2VcbiAgICogQHBhcmFtIHtPYmplY3R9IC0gVGhlIG9iamVjdHMgdG8gbWVyZ2UgdG9nZXRoZXI7IGVhY2ggb3ZlcnJpZGluZyB0aGUgbmV4dFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIE1lcmdlZCB2YWx1ZXMgb2YgZGVmYXVsdHMgYW5kIG9wdGlvbnNcbiAgICovXG4gIHN0YXRpYyBleHRlbmQoKSB7XG5cbiAgICBsZXQgZXh0ZW5kZWQgPSB7fVxuICAgIGxldCBkZWVwID0gZmFsc2VcbiAgICBsZXQgaSA9IDBcbiAgICBsZXQgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuXG4gICAgaWYgKCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIGFyZ3VtZW50c1swXSApID09PSAnW29iamVjdCBCb29sZWFuXScgKSB7XG4gICAgICBkZWVwID0gYXJndW1lbnRzWzBdXG4gICAgICBpKytcbiAgICB9XG5cbiAgICBsZXQgbWVyZ2UgPSAoIG9iaiApID0+IHtcbiAgICAgIGZvciAoIGxldCBwcm9wIGluIG9iaiApIHtcbiAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIG9iaiwgcHJvcCApICkge1xuICAgICAgICAgIGlmICggZGVlcCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqW3Byb3BdKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgKSB7XG4gICAgICAgICAgICBleHRlbmRlZFtwcm9wXSA9IGV4dGVuZCggdHJ1ZSwgZXh0ZW5kZWRbcHJvcF0sIG9ialtwcm9wXSApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuZGVkW3Byb3BdID0gb2JqW3Byb3BdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgICBsZXQgb2JqID0gYXJndW1lbnRzW2ldXG4gICAgICBtZXJnZShvYmopXG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dGVuZGVkXG4gIH1cblxufVxuIl19\n"]}