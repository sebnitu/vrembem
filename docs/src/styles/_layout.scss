@use "@vrembem/core";
@use "@vrembem/core/css";
@use "@vrembem/core/palette";
@use "./variables" as var;

.layout {
  display: flex;
  justify-content: center;
  overflow-x: hidden;
  padding-left: css.get("layout", "padding");
  padding-right: css.get("layout", "padding");
  position: relative;
  width: 100%;
}

.layout__main {
  box-sizing: content-box;
  max-width: calc(css.get("layout", "width") - css.get("layout", "drawer-width"));
  position: relative;
  width: 100%;

  * > * {
    box-sizing: border-box;
  }

  @include core.media-min(var.$bp-drawer) {
    padding-top: css.get("layout", "navibar-height");

    .has-drawer & {
      padding-left: css.get("layout", "drawer-width");
      width: calc(100% - css.get("layout", "drawer-width"));
    }
  }
}

.layout__grid {
  align-items: center;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  justify-content: center;
  padding: 2rem 0 0;

  @include core.media-min(var.$bp-code) {
    padding: 3rem 3rem 0;
  }

  @include core.media-min(var.$bp-drawer) {
    gap: 3rem;
    padding: 3rem 0 0;

    .has-drawer & {
      padding: 3rem 3.5rem 0 4.5rem;
    }
  }

  @include core.media-min(var.$bp-aside) {
    align-items: flex-start;
    flex-flow: row wrap;
    gap: css.get("layout", "gap");
    padding: 4rem 0 0;

    .has-drawer & {
      padding: 4rem 0 0 6rem;
    }
  }
}

.layout__content {
  max-width: css.get("layout", "content-width");
  order: 1;
  width: 100%;

  @include core.media-min(var.$bp-aside) {
    width: calc(100% - (css.get("layout", "aside-width") + css.get("layout", "gap")));
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    position: relative;
    scroll-margin-top: calc(css.get("layout", "navibar-height") + 1rem);
  }

  h3 {
    font-weight: 500;
  }
}

.layout__prepend {
  margin-bottom: 2rem;

  @include core.media-min("md") {
    margin-bottom: 3rem;
  }

  @include core.media-min("lg") {
    margin-bottom: 4rem;
  }
}

.layout__append {
  margin-top: 2rem;

  @include core.media-min("md") {
    margin-top: 3rem;
  }

  @include core.media-min("lg") {
    margin-top: 4rem;
  }
}

.layout__aside {
  order: 2;
  width: css.get("layout", "aside-width");
}

.layout__footer {
  background-color: css.get("background");
  border-top: 1px solid css.get("border-color");
  order: 3;
  padding: 2rem 0;
  position: relative;
  width: 100%;
  z-index: 2;

  @include core.media-min(var.$bp-drawer) {
    padding: 3rem 0;
  }

  @include core.media-min(var.$bp-aside) {
    padding: 4rem 0;
  }
}

/**
 * Layout screen
 */

.layout__screen {
  background-color: palette.get("neutral", 10%, 0%);
  inset: auto;
  position: fixed;
  transition: background-color 0.25s;
  z-index: 99;

  .is-opened ~ &,
  .is-opening ~ & {
    background-color: palette.get("neutral", 10%, 80%);
  }

  .is-opened ~ &,
  .is-opening ~ &,
  .is-closing ~ & {
    inset: 0;
  }
}
