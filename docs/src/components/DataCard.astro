---
import Data from "./Data.astro";

const { lang = "scss", name, description, value, computed, open = "false" } =
  Astro.props;

const id = ((lang === "css") ? "css-var-" : "scss-var-") + name;
const title = ((lang === "css") ? "--vb-" : "$") + name;

---

<div id={id} class="data-card border-bottom padding-y-sm gap-y-xs font-size-base">
  <div class="media">
    <div class="media__obj">
      <button
        type="button"
        class="button button_size_sm button_icon" 
        data-toggle={"toggle-" + id}
        aria-label={`Toggle ${name} details`}
      >
        <span class="arrow"></span>
      </button>
    </div>
    <div class="media__body">
      <p class="level level_gap-x_lg">
        <code class="flex-grow-1 foreground-primary">{title}</code>
        <code>{computed}</code>
      </p>
      <div
        id={"toggle-" + id}
        data-toggle-open={open === "true" ? "" : undefined}
        class="data-card__details"
      >
        <div class="border-top border-color-light margin-top-sm padding-top-sm">
          {description && <p class="margin-bottom-md">{description}</p>}
          <div class="level level_gap-x_xl flex-items-equal">
            {value && <Data key="Value" value={value} />}
            {computed && <Data key="Computed" value={computed} />}
          </div>
          {
            Astro.slots.has("default") && (
              <div class="data margin-y-sm">
                <span class="data__key margin-bottom-sm">Default</span>
                <div class="data__value">
                  <slot />
                </div>
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const toggles = document.querySelectorAll("[data-toggle]");
  toggles.forEach((trigger) => {
    // Get the trigger and target elements
    const targetId = trigger.getAttribute("data-toggle");
    const target = document.getElementById(targetId);

    // Get the current state
    let state = target.hasAttribute("data-toggle-open");
      
    // Set the a11y attributes
    trigger.setAttribute("id", targetId + "-trigger"); // Check if ID exists first...
    trigger.setAttribute("aria-controls", targetId);
    trigger.setAttribute("aria-expanded", state.toString());
    target.setAttribute("aria-hidden", (!state).toString());
    target.setAttribute("aria-labelledby", targetId + "-trigger"); // Use the current set ID

    // Set the event listener
    trigger.addEventListener("click", () => {
      state = !state;
      trigger.setAttribute("aria-expanded", state.toString());
      target.setAttribute("aria-hidden", (!state).toString());
    });
  });
</script>

<style lang="scss">
  @use "@vrembem/core";

  .data-card__details {
    overflow: hidden;
    height: 0;
    opacity: 0;
    transition-property: height, opacity;
    transition-duration: core.$transition-duration;
    transition-timing-function: core.$transition-timing-function;
  }

  .data-card__details[aria-hidden="true"] {
    height: 0;
    opacity: 0;
  }

  .data-card__details[aria-hidden="false"] {
    height: 100%;
    opacity: 1;
  }

  [data-toggle] .arrow {
    transform: rotate(-90deg);
    transition: transform core.$transition-duration core.$transition-timing-function;
  }

  [data-toggle][aria-expanded="true"] .arrow {
    transform: rotate(0);
  }
</style>
