---
import Icon from './Icon.astro';
import { makeSafeForCSS } from "../modules/makeSafeForCSS";

interface Props {
  name?: string;
  type?: string;
  returns?: string;
  src?: string;
  line?: string;
  args?: Array<Array<string>>;
  open?: boolean;
}

const { name, type, returns, src, line, args, open = false } = Astro.props;
const id = makeSafeForCSS(`${name}-${type}`);
const isFile = (type === 'file');
---

<article class="doc-block">
  <div class="doc-block__header">
    <div class="media media_gap-x_sm flex-align-center">
      <div class="media__obj">
        <button
          type="button" 
          id={"toggle-" + id + "-trigger"}
          data-toggle={"toggle-" + id}
          aria-controls={"toggle-" + id}
          aria-label={`Toggle ${id} file contents`}
          aria-expanded={open ? "true" : "false"}
          class="toggle-trigger button button_icon button_size_sm"
        >
          <Icon name="chevron-right" iconClass="icon_size_sm" />
        </button>
      </div>
      <div class="media__body flex flex-align-center flex-gap-x flex-wrap">
        <h3 id={id} class="doc-block__title level level_gap_lg no-anchor">
          <code>
            <a class="link font-size-sm" href={`#${id}`}>
              { isFile ? src : name }
            </a>
          </code>
          { 
            !isFile && type && (
              <span class="badge">{type}</span>
            )
          }
        </h3>
        <a class="link flex" target="_blank" href={`https://github.com/sebnitu/vrembem/blob/next/packages/${src}${(line) ? `#L${line}` : ''}`}>
          Source
          <Icon
            name="arrow-up-right"
            iconClass="icon_external"
          />
        </a>
      </div>
    </div>
  </div>
  <div 
    id={"toggle-" + id}
    aria-labelledby={"toggle-" + id + "-trigger"}
    aria-hidden={open ? "false" : "true"}  
    class="toggle-content doc-block__content"
  >

    {
      isFile ? (
        <div class="doc-block__file">
          <slot />
        </div>
      ) : (
        <div class="doc-block__intro">
          <div class="doc-block__meta">
            <span>Name: <code>{name}</code></span>
            { 
              type && (
                <span>Type: <code>{type}</code></span>
              )
            }
            { 
              returns && (
                <span>Returns: <code>{returns}</code></span>
              )
            }
          </div>
          <hr class="sep" />
          <slot />
        </div>
      )
    }

    {
      args && (
        <div class="doc-block__arguments">
          <h4 id={id + '-arguments'} class="font-size-lg no-anchor">Arguments</h4>
          <table class="table table_style_rowed">
            <tr>
              <th>Name</th>
              <th>Type</th>
              <th>Description</th>
            </tr>
            {
              args.map((arg) => (
                <tr>
                  <td><code class="text-nowrap">{arg[0]}</code></td>
                  <td><code class="text-nowrap">{arg[1]}</code></td>
                  <td>{arg[2]}</td>
                </tr>
              ))
            }
          </table>
        </div>
      )
    }

    {
      Astro.slots.has("example") && (
        <div class="doc-block__example">
          <h4 id={id + '-example'} class="font-size-lg no-anchor">Example</h4>
          <slot name="example" />
        </div>
      )
    }

  </div>
</article>

<script>
  import { toggle } from '../modules/toggle';

  // Build the docBlock array.
  const docBlock = [];
  const els = document.querySelectorAll('.doc-block');
  els.forEach((el) => {
    const id = el.querySelector('h3').id;
    docBlock.push({
      id: id,
      el: el
    });
  });
  
  // Check for active block function.
  function checkActiveBlock() {
    const result = docBlock.find((el) => {
      return `#${el.id}` === window.location.hash;
    });

    docBlock.forEach((item) => {
      item.el.classList.remove('is-active')
    });

    if (result) {
      toggle.open(result.id);
      result.el.classList.add('is-active');

      // Scroll to the element after it's open. This is needed to ensure the
      // element's toggled height is factored into the scroll position.
      const el = document.querySelector(`#${result.id}`);
      if (el) el.scrollIntoView();
    }
  }

  // Setup event listener for hash change and
  // check for active block on load and change.
  checkActiveBlock();
  window.addEventListener('hashchange', () => {
    checkActiveBlock();
  });
</script>
