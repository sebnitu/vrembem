---
interface Props {
  id?: string;
  arrow?: boolean;
  triggerClass?: string;
  popoverClass?: string;
  tooltipClass?: string;
  placement?: string;
}

const { 
  id, 
  arrow = false,
  triggerClass = "link", 
  popoverClass = "",
  tooltipClass = "",
  placement,
  ...rest
} = Astro.props;

const uid = id ? id : JSON.stringify(Math.floor(Math.random() * Date.now()));
const triggerId = `popover-trigger-${uid}`;
const popoverId = Astro.slots.has("default") ? `popover-${uid}` : null;
const tooltipId = Astro.slots.has("tooltip") ? `popover-tooltip-${uid}` : null;

const css = {};
if (placement) {
  css["--vb-popover-placement"] = placement;
}

---

<button
  id={triggerId}
  data-popover-trigger={popoverId}
  aria-controls={popoverId}
  aria-describedby={tooltipId}
  class={triggerClass}
  {...rest}
>
  <slot name="trigger">Popover Trigger</slot>
</button>

{
  Astro.slots.has("default") && (
    <div
      id={popoverId}
      aria-labelledby={triggerId}
      class={("popover " + popoverClass).trim()}
      style={css}
    >
      <slot>Popover Content</slot>
      { 
        arrow && (
          <span class="popover__arrow"></span>
        )
      }
    </div>
  )
}

{
  Astro.slots.has("tooltip") && (
    <div
      id={tooltipId}
      class={("popover popover_tooltip " + tooltipClass).trim()}
      style={css}
    >
      <slot name="tooltip" />
      <span class="popover__arrow"></span>
    </div>
  )
}

<script>
  import "../modules/usePopover";
</script>
