---
interface Props {
  stack: string;
  span: number;
}

let { 
  stack = 'md',
  span = 6,
} = Astro.props;

const stackOptions = ['xs', 'sm', 'md', 'lg', 'xl'];
let spanInput: string, spanOutput: string;

if (typeof stack === 'string') {
  if (stackOptions.includes(stack)) {
    stack = ' grid_stack_' + stack;
  } else {
    throw new Error(`Not a valid stack option: "${stack}". Valid stack options include: ${stackOptions}`);
  }
} else if (stack === true) {
  stack = ' grid_stack';
} else {
  stack = '';
}

if (span > 12 || span < 1) {
  throw new Error(`Not a valid span option: "${span}". Span must be a value between 1 and 12`);
} else {
  spanInput = `span-${span}`;
  spanOutput = `span-${(span == 12) ? 12 : 12 - span}`;
}

---

<div class="demo">
  <div class={ `grid${stack}` }>
    
    <div class={ `grid__item ${spanInput}` }>
      <div class="demo__input type">
        <slot name="input" />
      </div>
    </div>

    <div class={ `grid__item ${spanOutput}` }>
      <div class="demo__output">
        <slot name="output" />
      </div>
    </div>

  </div>
</div>

<style lang="scss">
  @use "@vrembem/core";

  .demo {
    margin: 2rem 0 !important;
  }

  .demo__input,
  .demo__output {
    border-top: 1px solid core.theme-get("background-darker");

    &::before {
      display: inline-block;
      padding: core.$padding-sm;
      margin-bottom: 1em;
      font-size: core.$font-size-sm;
      background: core.theme-get("background-darker");
    }
  }

  .demo__input::before {
    content: "Input";
  }

  .demo__output::before {
    content: "Output";
  }
</style>
